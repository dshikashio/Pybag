typedef struct _WINDBG_EXTENSION_APIS32* PWINDBG_EXTENSION_APIS32;
typedef struct _WINDBG_EXTENSION_APIS64* PWINDBG_EXTENSION_APIS64;
typedef struct _MEMORY_BASIC_INFORMATION64* PMEMORY_BASIC_INFORMATION64;
enum {ERROR_DBG_CANCELLED = 0xC00004C7};
enum {ERROR_DBG_TIMEOUT   = 0xC00005B4};
enum {WAIT_INFINITE = 0xFFFFFFFF};
typedef struct _DEBUG_OFFSET_REGION
{
    unsigned __int64 Base;
    unsigned __int64 Size;
} DEBUG_OFFSET_REGION, *PDEBUG_OFFSET_REGION;
///////////////////////////////////////////////////////////
[
	object,
	uuid(f2df5f53-071f-47bd-9de6-5734c3fed689),
	helpstring("IDebugAdvanced")
]
interface IDebugAdvanced : IUnknown {
	HRESULT GetThreadContext(  PVOID Context, unsigned long ContextSize );
	HRESULT SetThreadContext(  PVOID Context, unsigned long ContextSize );
};

typedef struct _DEBUG_READ_USER_MINIDUMP_STREAM
{
   unsigned long StreamType;
   unsigned long Flags;
   unsigned __int64 Offset;
   PVOID Buffer;
   unsigned long BufferSize;
   unsigned long BufferUsed;
} DEBUG_READ_USER_MINIDUMP_STREAM, *PDEBUG_READ_USER_MINIDUMP_STREAM;
enum {DEBUG_GET_TEXT_COMPLETIONS_NO_DOT_COMMANDS       = 0x00000001};
enum {DEBUG_GET_TEXT_COMPLETIONS_NO_EXTENSION_COMMANDS = 0x00000002};
enum {DEBUG_GET_TEXT_COMPLETIONS_NO_SYMBOLS            = 0x00000004};
typedef struct _DEBUG_GET_TEXT_COMPLETIONS_IN
{
    unsigned long Flags;
    unsigned long MatchCountLimit;
    unsigned __int64 Reserved[3];
    // Input text string follows.
} DEBUG_GET_TEXT_COMPLETIONS_IN, *PDEBUG_GET_TEXT_COMPLETIONS_IN;
enum {DEBUG_GET_TEXT_COMPLETIONS_IS_DOT_COMMAND       = 0x00000001};
enum {DEBUG_GET_TEXT_COMPLETIONS_IS_EXTENSION_COMMAND = 0x00000002};
enum {DEBUG_GET_TEXT_COMPLETIONS_IS_SYMBOL            = 0x00000004};
typedef struct _DEBUG_GET_TEXT_COMPLETIONS_OUT
{
    unsigned long Flags;
    // Char index in input string where completions start.
    unsigned long ReplaceIndex;
    unsigned long MatchCount;
    unsigned long Reserved1;
    unsigned __int64 Reserved2[2];
    // Completions follow.
    // Completion data is zero-terminated strings ended
    // by a final zero double-terminator.
} DEBUG_GET_TEXT_COMPLETIONS_OUT, *PDEBUG_GET_TEXT_COMPLETIONS_OUT;
typedef struct _DEBUG_CACHED_SYMBOL_INFO
{
    unsigned __int64 ModBase;
    unsigned __int64 Arg1;
    unsigned __int64 Arg2;
    unsigned long Id;
    unsigned long Arg3;
} DEBUG_CACHED_SYMBOL_INFO, *PDEBUG_CACHED_SYMBOL_INFO;
typedef struct _PROCESS_NAME_ENTRY
{
    unsigned long ProcessId;
    unsigned long NameOffset;  // offset for the process name string.
    unsigned long NameSize;    // ProcessName will always be NULL terminated, NameSize is for struct align and safeguard.
    unsigned long NextEntry;   // offset for next entry, 0 if the last.
} PROCESS_NAME_ENTRY, *PPROCESS_NAME_ENTRY;
enum {DEBUG_REQUEST_SOURCE_PATH_HAS_SOURCE_SERVER = 0};
enum {DEBUG_REQUEST_TARGET_EXCEPTION_CONTEXT = 1};
enum {DEBUG_REQUEST_TARGET_EXCEPTION_THREAD = 2};
enum {DEBUG_REQUEST_TARGET_EXCEPTION_RECORD = 3};
enum {DEBUG_REQUEST_GET_ADDITIONAL_CREATE_OPTIONS = 4};
enum {DEBUG_REQUEST_SET_ADDITIONAL_CREATE_OPTIONS = 5};
enum {DEBUG_REQUEST_GET_WIN32_MAJOR_MINOR_VERSIONS = 6};
enum {DEBUG_REQUEST_READ_USER_MINIDUMP_STREAM = 7};
enum {DEBUG_REQUEST_TARGET_CAN_DETACH = 8};
enum {DEBUG_REQUEST_SET_LOCAL_IMPLICIT_COMMAND_LINE = 9};
enum {DEBUG_REQUEST_GET_CAPTURED_EVENT_CODE_OFFSET = 10};
enum {DEBUG_REQUEST_READ_CAPTURED_EVENT_CODE_STREAM = 11};
enum {DEBUG_REQUEST_EXT_TYPED_DATA_ANSI = 12};
enum {DEBUG_REQUEST_GET_EXTENSION_SEARCH_PATH_WIDE = 13};
enum {DEBUG_REQUEST_GET_TEXT_COMPLETIONS_WIDE = 14};
enum {DEBUG_REQUEST_GET_CACHED_SYMBOL_INFO = 15};
enum {DEBUG_REQUEST_ADD_CACHED_SYMBOL_INFO = 16};
enum {DEBUG_REQUEST_REMOVE_CACHED_SYMBOL_INFO = 17};
enum {DEBUG_REQUEST_GET_TEXT_COMPLETIONS_ANSI = 18};
enum {DEBUG_REQUEST_CURRENT_OUTPUT_CALLBACKS_ARE_DML_AWARE = 19};
enum {DEBUG_REQUEST_GET_OFFSET_UNWIND_INFORMATION = 20};
enum {DEBUG_REQUEST_GET_DUMP_HEADER = 21};
enum {DEBUG_REQUEST_SET_DUMP_HEADER = 22};
enum {DEBUG_REQUEST_MIDORI = 23};
enum {DEBUG_REQUEST_PROCESS_DESCRIPTORS = 24};
enum {DEBUG_REQUEST_MISC_INFORMATION = 25};
enum {DEBUG_REQUEST_OPEN_PROCESS_TOKEN = 26};
enum {DEBUG_REQUEST_OPEN_THREAD_TOKEN = 27};
enum {DEBUG_REQUEST_DUPLICATE_TOKEN = 28};
enum {DEBUG_REQUEST_QUERY_INFO_TOKEN = 29};
enum {DEBUG_REQUEST_CLOSE_TOKEN = 30};
enum {DEBUG_REQUEST_WOW_PROCESS = 31};
enum {DEBUG_REQUEST_WOW_MODULE = 32};
enum {DEBUG_LIVE_USER_NON_INVASIVE = 33};
enum {DEBUG_REQUEST_RESUME_THREAD = 34};
enum {DEBUG_REQUEST_INLINE_QUERY = 35};
enum {DEBUG_REQUEST_TL_INSTRUMENTATION_AWARE = 36};
enum {DEBUG_REQUEST_GET_INSTRUMENTATION_VERSION = 37};
enum {DEBUG_REQUEST_GET_MODULE_ARCHITECTURE = 38};
enum {DEBUG_SRCFILE_SYMBOL_TOKEN = 0};
enum {DEBUG_SRCFILE_SYMBOL_TOKEN_SOURCE_COMMAND_WIDE = 1};
enum {DEBUG_SRCFILE_SYMBOL_CHECKSUMINFO = 2};
enum {DEBUG_SYMINFO_BREAKPOINT_SOURCE_LINE = 0};
enum {DEBUG_SYMINFO_IMAGEHLP_MODULEW64 = 1};
enum {DEBUG_SYMINFO_GET_SYMBOL_NAME_BY_OFFSET_AND_TAG_WIDE = 2};
enum {DEBUG_SYMINFO_GET_MODULE_SYMBOL_NAMES_AND_OFFSETS = 3};
enum {DEBUG_SYSOBJINFO_THREAD_BASIC_INFORMATION = 0};
enum {DEBUG_SYSOBJINFO_THREAD_NAME_WIDE = 1};
enum {DEBUG_SYSOBJINFO_CURRENT_PROCESS_COOKIE = 2};
enum {DEBUG_TBINFO_EXIT_STATUS    = 0x00000001};
enum {DEBUG_TBINFO_PRIORITY_CLASS = 0x00000002};
enum {DEBUG_TBINFO_PRIORITY       = 0x00000004};
enum {DEBUG_TBINFO_TIMES          = 0x00000008};
enum {DEBUG_TBINFO_START_OFFSET   = 0x00000010};
enum {DEBUG_TBINFO_AFFINITY       = 0x00000020};
enum {DEBUG_TBINFO_ALL            = 0x0000003f};
typedef struct _DEBUG_THREAD_BASIC_INFORMATION
{
    // Valid members have a DEBUG_TBINFO bit set in Valid.
    unsigned long Valid;
    unsigned long ExitStatus;
    unsigned long PriorityClass;
    unsigned long Priority;
    unsigned __int64 CreateTime;
    unsigned __int64 ExitTime;
    unsigned __int64 KernelTime;
    unsigned __int64 UserTime;
    unsigned __int64 StartOffset;
    unsigned __int64 Affinity;
} DEBUG_THREAD_BASIC_INFORMATION, *PDEBUG_THREAD_BASIC_INFORMATION;
///////////////////////////////////////////////////////////
[
	object,
	uuid(716d14c9-119b-4ba5-af1f-0890e672416a),
	helpstring("IDebugAdvanced2")
]
interface IDebugAdvanced2 : IUnknown {
	HRESULT GetThreadContext(  PVOID Context, unsigned long ContextSize );
	HRESULT SetThreadContext(  PVOID Context, unsigned long ContextSize );
	HRESULT Request(  unsigned long Request, PVOID InBuffer, unsigned long InBufferSize, PVOID OutBuffer, unsigned long OutBufferSize, unsigned long* OutSize );
	HRESULT GetSourceFileInformation(  unsigned long Which, char* SourceFile, unsigned __int64 Arg64, unsigned long Arg32,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* InfoSize );
	HRESULT FindSourceFileAndToken(  unsigned long StartElement, unsigned __int64 ModAddr, const char* File, unsigned long Flags, PVOID FileToken, unsigned long FileTokenSize, unsigned long* FoundElement, char* Buffer, unsigned long BufferSize, unsigned long* FoundSize );
	HRESULT GetSymbolInformation(  unsigned long Which, unsigned __int64 Arg64, unsigned long Arg32,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* InfoSize, char* StringBuffer, unsigned long StringBufferSize, unsigned long* StringSize );
	HRESULT GetSystemObjectInformation(  unsigned long Which, unsigned __int64 Arg64, unsigned long Arg32,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* InfoSize );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(cba4abb4-84c4-444d-87ca-a04e13286739),
	helpstring("IDebugAdvanced3")
]
interface IDebugAdvanced3 : IUnknown {
	HRESULT GetThreadContext(  PVOID Context, unsigned long ContextSize );
	HRESULT SetThreadContext(  PVOID Context, unsigned long ContextSize );
	HRESULT Request(  unsigned long Request, PVOID InBuffer, unsigned long InBufferSize, PVOID OutBuffer, unsigned long OutBufferSize, unsigned long* OutSize );
	HRESULT GetSourceFileInformation(  unsigned long Which, char* SourceFile, unsigned __int64 Arg64, unsigned long Arg32,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* InfoSize );
	HRESULT FindSourceFileAndToken(  unsigned long StartElement, unsigned __int64 ModAddr, const char* File, unsigned long Flags, PVOID FileToken, unsigned long FileTokenSize, unsigned long* FoundElement, char* Buffer, unsigned long BufferSize, unsigned long* FoundSize );
	HRESULT GetSymbolInformation(  unsigned long Which, unsigned __int64 Arg64, unsigned long Arg32,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* InfoSize, char* StringBuffer, unsigned long StringBufferSize, unsigned long* StringSize );
	HRESULT GetSystemObjectInformation(  unsigned long Which, unsigned __int64 Arg64, unsigned long Arg32,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* InfoSize );
	HRESULT GetSourceFileInformationWide(  unsigned long Which, wchar_t* SourceFile, unsigned __int64 Arg64, unsigned long Arg32,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* InfoSize );
	HRESULT FindSourceFileAndTokenWide(  unsigned long StartElement, unsigned __int64 ModAddr, const wchar_t* File, unsigned long Flags, PVOID FileToken, unsigned long FileTokenSize, unsigned long* FoundElement, wchar_t* Buffer, unsigned long BufferSize, unsigned long* FoundSize );
	HRESULT GetSymbolInformationWide(  unsigned long Which, unsigned __int64 Arg64, unsigned long Arg32,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* InfoSize, wchar_t* StringBuffer, unsigned long StringBufferSize, unsigned long* StringSize );
};

typedef struct _SYMBOL_INFO_EX
{
    unsigned long   SizeOfStruct;       // Set to sizeof(SYMBOL_INFO_EX).
    unsigned long   TypeOfInfo;         // Type of the symbol information stored (Ex. DEBUG_SYMINFO_BREAKPOINT_SOURCE_LINE)
    unsigned __int64 Offset;             // Address of the line.
    unsigned long   Line;               // First line number that does not correspond to a compiler added glue lines.
    unsigned long   Displacement;       // Line displacement: Offset between given address and the first instruction of the line.
    unsigned long   Reserved[4];
} SYMBOL_INFO_EX, *PSYMBOL_INFO_EX;
///////////////////////////////////////////////////////////
[
	object,
	uuid(d1069067-2a65-4bf0-ae97-76184b67856b),
	helpstring("IDebugAdvanced4")
]
interface IDebugAdvanced4 : IUnknown {
	HRESULT GetThreadContext(  PVOID Context, unsigned long ContextSize );
	HRESULT SetThreadContext(  PVOID Context, unsigned long ContextSize );
	HRESULT Request(  unsigned long Request, PVOID InBuffer, unsigned long InBufferSize, PVOID OutBuffer, unsigned long OutBufferSize, unsigned long* OutSize );
	HRESULT GetSourceFileInformation(  unsigned long Which, char* SourceFile, unsigned __int64 Arg64, unsigned long Arg32,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* InfoSize );
	HRESULT FindSourceFileAndToken(  unsigned long StartElement, unsigned __int64 ModAddr, const char* File, unsigned long Flags, PVOID FileToken, unsigned long FileTokenSize, unsigned long* FoundElement, char* Buffer, unsigned long BufferSize, unsigned long* FoundSize );
	HRESULT GetSymbolInformation(  unsigned long Which, unsigned __int64 Arg64, unsigned long Arg32,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* InfoSize, char* StringBuffer, unsigned long StringBufferSize, unsigned long* StringSize );
	HRESULT GetSystemObjectInformation(  unsigned long Which, unsigned __int64 Arg64, unsigned long Arg32,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* InfoSize );
	HRESULT GetSourceFileInformationWide(  unsigned long Which, wchar_t* SourceFile, unsigned __int64 Arg64, unsigned long Arg32,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* InfoSize );
	HRESULT FindSourceFileAndTokenWide(  unsigned long StartElement, unsigned __int64 ModAddr, const wchar_t* File, unsigned long Flags, PVOID FileToken, unsigned long FileTokenSize, unsigned long* FoundElement, wchar_t* Buffer, unsigned long BufferSize, unsigned long* FoundSize );
	HRESULT GetSymbolInformationWide(  unsigned long Which, unsigned __int64 Arg64, unsigned long Arg32,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* InfoSize, wchar_t* StringBuffer, unsigned long StringBufferSize, unsigned long* StringSize );
	HRESULT GetSymbolInformationWideEx(  unsigned long Which, unsigned __int64 Arg64, unsigned long Arg32,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* InfoSize, wchar_t* StringBuffer, unsigned long StringBufferSize, unsigned long* StringSize, PSYMBOL_INFO_EX pInfoEx );
};

enum {DEBUG_BREAKPOINT_CODE = 0};
enum {DEBUG_BREAKPOINT_DATA = 1};
enum {DEBUG_BREAKPOINT_TIME = 2};
enum {DEBUG_BREAKPOINT_INLINE = 3};
enum {DEBUG_BREAKPOINT_GO_ONLY    = 0x00000001};
enum {DEBUG_BREAKPOINT_DEFERRED   = 0x00000002};
enum {DEBUG_BREAKPOINT_ENABLED    = 0x00000004};
enum {DEBUG_BREAKPOINT_ADDER_ONLY = 0x00000008};
enum {DEBUG_BREAKPOINT_ONE_SHOT   = 0x00000010};
enum {DEBUG_BREAK_READ    = 0x00000001};
enum {DEBUG_BREAK_WRITE   = 0x00000002};
enum {DEBUG_BREAK_EXECUTE = 0x00000004};
enum {DEBUG_BREAK_IO      = 0x00000008};
typedef struct _DEBUG_BREAKPOINT_PARAMETERS
{
    unsigned __int64 Offset;
    unsigned long Id;
    unsigned long BreakType;
    unsigned long ProcType;
    unsigned long Flags;
    unsigned long DataSize;
    unsigned long DataAccessType;
    unsigned long PassCount;
    unsigned long CurrentPassCount;
    unsigned long MatchThread;
    unsigned long CommandSize;
    unsigned long OffsetExpressionSize;
} DEBUG_BREAKPOINT_PARAMETERS, *PDEBUG_BREAKPOINT_PARAMETERS;
///////////////////////////////////////////////////////////
[
	object,
	uuid(5bd9d474-5975-423a-b88b-65a8e7110e65),
	helpstring("IDebugBreakpoint")
]
interface IDebugBreakpoint : IUnknown {
	HRESULT GetId(  unsigned long* Id );
	HRESULT GetType(  unsigned long* BreakType, unsigned long* ProcType );
	HRESULT GetAdder(  IDebugClient** Adder );
	HRESULT GetFlags(  unsigned long* Flags );
	HRESULT AddFlags(  unsigned long Flags );
	HRESULT RemoveFlags(  unsigned long Flags );
	HRESULT SetFlags(  unsigned long Flags );
	HRESULT GetOffset(  unsigned __int64* Offset );
	HRESULT SetOffset(  unsigned __int64 Offset );
	HRESULT GetDataParameters(  unsigned long* Size, unsigned long* AccessType );
	HRESULT SetDataParameters(  unsigned long Size, unsigned long AccessType );
	HRESULT GetPassCount(  unsigned long* Count );
	HRESULT SetPassCount(  unsigned long Count );
	HRESULT GetCurrentPassCount(  unsigned long* Count );
	HRESULT GetMatchThreadId(  unsigned long* Id );
	HRESULT SetMatchThreadId(  unsigned long Thread );
	HRESULT GetCommand(  char* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetCommand(  const char* Command );
	HRESULT GetOffsetExpression(  char* Buffer, unsigned long BufferSize, unsigned long* ExpressionSize );
	HRESULT SetOffsetExpression(  const char* Expression );
	HRESULT GetParameters(  PDEBUG_BREAKPOINT_PARAMETERS Params );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(1b278d20-79f2-426e-a3f9-c1ddf375d48e),
	helpstring("IDebugBreakpoint2")
]
interface IDebugBreakpoint2 : IUnknown {
	HRESULT GetId(  unsigned long* Id );
	HRESULT GetType(  unsigned long* BreakType, unsigned long* ProcType );
	HRESULT GetAdder(  IDebugClient** Adder );
	HRESULT GetFlags(  unsigned long* Flags );
	HRESULT AddFlags(  unsigned long Flags );
	HRESULT RemoveFlags(  unsigned long Flags );
	HRESULT SetFlags(  unsigned long Flags );
	HRESULT GetOffset(  unsigned __int64* Offset );
	HRESULT SetOffset(  unsigned __int64 Offset );
	HRESULT GetDataParameters(  unsigned long* Size, unsigned long* AccessType );
	HRESULT SetDataParameters(  unsigned long Size, unsigned long AccessType );
	HRESULT GetPassCount(  unsigned long* Count );
	HRESULT SetPassCount(  unsigned long Count );
	HRESULT GetCurrentPassCount(  unsigned long* Count );
	HRESULT GetMatchThreadId(  unsigned long* Id );
	HRESULT SetMatchThreadId(  unsigned long Thread );
	HRESULT GetCommand(  char* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetCommand(  const char* Command );
	HRESULT GetOffsetExpression(  char* Buffer, unsigned long BufferSize, unsigned long* ExpressionSize );
	HRESULT SetOffsetExpression(  const char* Expression );
	HRESULT GetParameters(  PDEBUG_BREAKPOINT_PARAMETERS Params );
	HRESULT GetCommandWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetCommandWide(  const wchar_t* Command );
	HRESULT GetOffsetExpressionWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* ExpressionSize );
	HRESULT SetOffsetExpressionWide(  const wchar_t* Expression );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(38f5c249-b448-43bb-9835-579d4ec02249),
	helpstring("IDebugBreakpoint3")
]
interface IDebugBreakpoint3 : IUnknown {
	HRESULT GetId(  unsigned long* Id );
	HRESULT GetType(  unsigned long* BreakType, unsigned long* ProcType );
	HRESULT GetAdder(  IDebugClient** Adder );
	HRESULT GetFlags(  unsigned long* Flags );
	HRESULT AddFlags(  unsigned long Flags );
	HRESULT RemoveFlags(  unsigned long Flags );
	HRESULT SetFlags(  unsigned long Flags );
	HRESULT GetOffset(  unsigned __int64* Offset );
	HRESULT SetOffset(  unsigned __int64 Offset );
	HRESULT GetDataParameters(  unsigned long* Size, unsigned long* AccessType );
	HRESULT SetDataParameters(  unsigned long Size, unsigned long AccessType );
	HRESULT GetPassCount(  unsigned long* Count );
	HRESULT SetPassCount(  unsigned long Count );
	HRESULT GetCurrentPassCount(  unsigned long* Count );
	HRESULT GetMatchThreadId(  unsigned long* Id );
	HRESULT SetMatchThreadId(  unsigned long Thread );
	HRESULT GetCommand(  char* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetCommand(  const char* Command );
	HRESULT GetOffsetExpression(  char* Buffer, unsigned long BufferSize, unsigned long* ExpressionSize );
	HRESULT SetOffsetExpression(  const char* Expression );
	HRESULT GetParameters(  PDEBUG_BREAKPOINT_PARAMETERS Params );
	HRESULT GetCommandWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetCommandWide(  const wchar_t* Command );
	HRESULT GetOffsetExpressionWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* ExpressionSize );
	HRESULT SetOffsetExpressionWide(  const wchar_t* Expression );
	HRESULT GetGuid(  LPGUID Guid );
};

enum {DEBUG_ATTACH_KERNEL_CONNECTION = 0x00000000};
enum {DEBUG_ATTACH_LOCAL_KERNEL      = 0x00000001};
enum {DEBUG_ATTACH_EXDI_DRIVER       = 0x00000002};
enum {DEBUG_ATTACH_INSTALL_DRIVER    = 0x00000004};
enum {DEBUG_GET_PROC_DEFAULT      = 0x00000000};
enum {DEBUG_GET_PROC_FULL_MATCH   = 0x00000001};
enum {DEBUG_GET_PROC_ONLY_MATCH   = 0x00000002};
enum {DEBUG_GET_PROC_SERVICE_NAME = 0x00000004};
enum {DEBUG_PROC_DESC_DEFAULT         = 0x00000000};
enum {DEBUG_PROC_DESC_NO_PATHS        = 0x00000001};
enum {DEBUG_PROC_DESC_NO_SERVICES     = 0x00000002};
enum {DEBUG_PROC_DESC_NO_MTS_PACKAGES = 0x00000004};
enum {DEBUG_PROC_DESC_NO_COMMAND_LINE = 0x00000008};
enum {DEBUG_PROC_DESC_NO_SESSION_ID   = 0x00000010};
enum {DEBUG_PROC_DESC_NO_USER_NAME    = 0x00000020};
enum {DEBUG_ATTACH_DEFAULT                   = 0x00000000};
enum {DEBUG_ATTACH_NONINVASIVE               = 0x00000001};
enum {DEBUG_ATTACH_EXISTING                  = 0x00000002};
enum {DEBUG_ATTACH_NONINVASIVE_NO_SUSPEND    = 0x00000004};
enum {DEBUG_ATTACH_INVASIVE_NO_INITIAL_BREAK = 0x00000008};
enum {DEBUG_ATTACH_INVASIVE_RESUME_PROCESS   = 0x00000010};
enum {DEBUG_ATTACH_NONINVASIVE_ALLOW_PARTIAL = 0x00000020};
enum {DEBUG_ECREATE_PROCESS_DEFAULT                   = 0x00000000};
enum {DEBUG_ECREATE_PROCESS_INHERIT_HANDLES           = 0x00000001};
enum {DEBUG_ECREATE_PROCESS_USE_VERIFIER_FLAGS        = 0x00000002};
enum {DEBUG_ECREATE_PROCESS_USE_IMPLICIT_COMMAND_LINE = 0x00000004};
typedef struct _DEBUG_CREATE_PROCESS_OPTIONS
{
    // Win32 create flags.
    unsigned long CreateFlags;
    // DEBUG_ECREATE_PROCESS_* flags.
    unsigned long EngCreateFlags;
    // Application Verifier flags,
    // if DEBUG_ECREATE_PROCESS_USE_VERIFIER_FLAGS is set.
    unsigned long VerifierFlags;
    // Must be zero.
    unsigned long Reserved;
} DEBUG_CREATE_PROCESS_OPTIONS, *PDEBUG_CREATE_PROCESS_OPTIONS;
enum {DEBUG_PROCESS_DETACH_ON_EXIT    = 0x00000001};
enum {DEBUG_PROCESS_ONLY_THIS_PROCESS = 0x00000002};
enum {DEBUG_CONNECT_SESSION_DEFAULT     = 0x00000000};
enum {DEBUG_CONNECT_SESSION_NO_VERSION  = 0x00000001};
enum {DEBUG_CONNECT_SESSION_NO_ANNOUNCE = 0x00000002};
enum {DEBUG_SERVERS_DEBUGGER = 0x00000001};
enum {DEBUG_SERVERS_PROCESS  = 0x00000002};
enum {DEBUG_SERVERS_ALL      = 0x00000003};
enum {DEBUG_END_PASSIVE          = 0x00000000};
enum {DEBUG_END_ACTIVE_TERMINATE = 0x00000001};
enum {DEBUG_END_ACTIVE_DETACH    = 0x00000002};
enum {DEBUG_END_REENTRANT        = 0x00000003};
enum {DEBUG_END_DISCONNECT       = 0x00000004};
enum {DEBUG_OUTPUT_NORMAL            = 0x00000001};
enum {DEBUG_OUTPUT_ERROR             = 0x00000002};
enum {DEBUG_OUTPUT_WARNING           = 0x00000004};
enum {DEBUG_OUTPUT_VERBOSE           = 0x00000008};
enum {DEBUG_OUTPUT_PROMPT            = 0x00000010};
enum {DEBUG_OUTPUT_PROMPT_REGISTERS  = 0x00000020};
enum {DEBUG_OUTPUT_EXTENSION_WARNING = 0x00000040};
enum {DEBUG_OUTPUT_DEBUGGEE          = 0x00000080};
enum {DEBUG_OUTPUT_DEBUGGEE_PROMPT   = 0x00000100};
enum {DEBUG_OUTPUT_SYMBOLS           = 0x00000200};
enum {DEBUG_OUTPUT_STATUS            = 0x00000400};
enum {DEBUG_OUTPUT_XML               = 0x00000800};
enum {DEBUG_IOUTPUT_KD_PROTOCOL      = 0x80000000};
enum {DEBUG_IOUTPUT_REMOTING         = 0x40000000};
enum {DEBUG_IOUTPUT_BREAKPOINT       = 0x20000000};
enum {DEBUG_IOUTPUT_EVENT            = 0x10000000};
enum {DEBUG_IOUTPUT_ADDR_TRANSLATE   = 0x08000000};
enum {DEBUG_OUTPUT_IDENTITY_DEFAULT = 0x00000000};
enum {DEBUG_CLIENT_UNKNOWN            = 0x0};
enum {DEBUG_CLIENT_VSINT              = 0x1};
enum {DEBUG_CLIENT_NTSD               = 0x2};
enum {DEBUG_CLIENT_NTKD               = 0x3};
enum {DEBUG_CLIENT_CDB                = 0x4};
enum {DEBUG_CLIENT_KD                 = 0x5};
enum {DEBUG_CLIENT_WINDBG             = 0x6};
enum {DEBUG_CLIENT_WINIDE             = 0x7};
typedef struct _DEBUG_CLIENT_CONTEXT 
{
    UINT cbSize;
    UINT eClient;
} DEBUG_CLIENT_CONTEXT, *PDEBUG_CLIENT_CONTEXT;
///////////////////////////////////////////////////////////
[
	object,
	uuid(27fe5639-8407-4f47-8364-ee118fb08ac8),
	helpstring("IDebugClient")
]
interface IDebugClient : IUnknown {
	HRESULT AttachKernel(  unsigned long Flags, const char* ConnectOptions );
	HRESULT GetKernelConnectionOptions(  char* Buffer, unsigned long BufferSize, unsigned long* OptionsSize );
	HRESULT SetKernelConnectionOptions(  const char* Options );
	HRESULT StartProcessServer(  unsigned long Flags, const char* Options, PVOID Reserved );
	HRESULT ConnectProcessServer(  const char* RemoteOptions, unsigned __int64* Server );
	HRESULT DisconnectProcessServer(  unsigned __int64 Server );
	HRESULT GetRunningProcessSystemIds(  unsigned __int64 Server, unsigned long* Ids, unsigned long Count, unsigned long* ActualCount );
	HRESULT GetRunningProcessSystemIdByExecutableName(  unsigned __int64 Server, const char* ExeName, unsigned long Flags, unsigned long* Id );
	HRESULT GetRunningProcessDescription(  unsigned __int64 Server, unsigned long SystemId, unsigned long Flags, char* ExeName, unsigned long ExeNameSize, unsigned long* ActualExeNameSize, char* Description, unsigned long DescriptionSize, unsigned long* ActualDescriptionSize );
	HRESULT AttachProcess(  unsigned __int64 Server, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT CreateProcess(  unsigned __int64 Server, char* CommandLine, unsigned long CreateFlags );
	HRESULT CreateProcessAndAttach(  unsigned __int64 Server, char* CommandLine, unsigned long CreateFlags, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT GetProcessOptions(  unsigned long* Options );
	HRESULT AddProcessOptions(  unsigned long Options );
	HRESULT RemoveProcessOptions(  unsigned long Options );
	HRESULT SetProcessOptions(  unsigned long Options );
	HRESULT OpenDumpFile(  const char* DumpFile );
	HRESULT WriteDumpFile(  const char* DumpFile, unsigned long Qualifier );
	HRESULT ConnectSession(  unsigned long Flags, unsigned long HistoryLimit );
	HRESULT StartServer(  const char* Options );
	HRESULT OutputServers(  unsigned long OutputControl, const char* Machine, unsigned long Flags );
	HRESULT TerminateProcesses(  );
	HRESULT DetachProcesses(  );
	HRESULT EndSession(  unsigned long Flags );
	HRESULT GetExitCode(  unsigned long* Code );
	HRESULT DispatchCallbacks(  unsigned long Timeout );
	HRESULT ExitDispatch(  IDebugClient* Client );
	HRESULT CreateClient(  IDebugClient** Client );
	HRESULT GetInputCallbacks(  IDebugInputCallbacks** Callbacks );
	HRESULT SetInputCallbacks(  IDebugInputCallbacks* Callbacks );
	HRESULT GetOutputCallbacks(  IDebugOutputCallbacks** Callbacks );
	HRESULT SetOutputCallbacks(  IDebugOutputCallbacks* Callbacks );
	HRESULT GetOutputMask(  unsigned long* Mask );
	HRESULT SetOutputMask(  unsigned long Mask );
	HRESULT GetOtherOutputMask(  IDebugClient* Client, unsigned long* Mask );
	HRESULT SetOtherOutputMask(  IDebugClient* Client, unsigned long Mask );
	HRESULT GetOutputWidth(  unsigned long* Columns );
	HRESULT SetOutputWidth(  unsigned long Columns );
	HRESULT GetOutputLinePrefix(  char* Buffer, unsigned long BufferSize, unsigned long* PrefixSize );
	HRESULT SetOutputLinePrefix(  const char* Prefix );
	HRESULT GetIdentity(  char* Buffer, unsigned long BufferSize, unsigned long* IdentitySize );
	HRESULT OutputIdentity(  unsigned long OutputControl, unsigned long Flags, const char* Format );
	HRESULT GetEventCallbacks(  IDebugEventCallbacks** Callbacks );
	HRESULT SetEventCallbacks(  IDebugEventCallbacks* Callbacks );
	HRESULT FlushCallbacks(  );
};

enum {DEBUG_FORMAT_DEFAULT                  = 0x00000000};
enum {DEBUG_FORMAT_CAB_SECONDARY_ALL_IMAGES = 0x10000000};
enum {DEBUG_FORMAT_WRITE_CAB                = 0x20000000};
enum {DEBUG_FORMAT_CAB_SECONDARY_FILES      = 0x40000000};
enum {DEBUG_FORMAT_NO_OVERWRITE             = 0x80000000};
enum {DEBUG_FORMAT_USER_SMALL_FULL_MEMORY               = 0x00000001};
enum {DEBUG_FORMAT_USER_SMALL_HANDLE_DATA               = 0x00000002};
enum {DEBUG_FORMAT_USER_SMALL_UNLOADED_MODULES          = 0x00000004};
enum {DEBUG_FORMAT_USER_SMALL_INDIRECT_MEMORY           = 0x00000008};
enum {DEBUG_FORMAT_USER_SMALL_DATA_SEGMENTS             = 0x00000010};
enum {DEBUG_FORMAT_USER_SMALL_FILTER_MEMORY             = 0x00000020};
enum {DEBUG_FORMAT_USER_SMALL_FILTER_PATHS              = 0x00000040};
enum {DEBUG_FORMAT_USER_SMALL_PROCESS_THREAD_DATA       = 0x00000080};
enum {DEBUG_FORMAT_USER_SMALL_PRIVATE_READ_WRITE_MEMORY = 0x00000100};
enum {DEBUG_FORMAT_USER_SMALL_NO_OPTIONAL_DATA          = 0x00000200};
enum {DEBUG_FORMAT_USER_SMALL_FULL_MEMORY_INFO          = 0x00000400};
enum {DEBUG_FORMAT_USER_SMALL_THREAD_INFO               = 0x00000800};
enum {DEBUG_FORMAT_USER_SMALL_CODE_SEGMENTS             = 0x00001000};
enum {DEBUG_FORMAT_USER_SMALL_NO_AUXILIARY_STATE        = 0x00002000};
enum {DEBUG_FORMAT_USER_SMALL_FULL_AUXILIARY_STATE      = 0x00004000};
enum {DEBUG_FORMAT_USER_SMALL_MODULE_HEADERS            = 0x00008000};
enum {DEBUG_FORMAT_USER_SMALL_FILTER_TRIAGE             = 0x00010000};
enum {DEBUG_FORMAT_USER_SMALL_ADD_AVX_XSTATE_CONTEXT    = 0x00020000};
enum {DEBUG_FORMAT_USER_SMALL_IPT_TRACE                 = 0x00040000};
enum {DEBUG_FORMAT_USER_SMALL_IGNORE_INACCESSIBLE_MEM   = 0x08000000};
enum {DEBUG_FORMAT_USER_SMALL_SCAN_PARTIAL_PAGES        = 0x10000000};
enum {DEBUG_DUMP_FILE_BASE           = 0xffffffff};
enum {DEBUG_DUMP_FILE_PAGE_FILE_DUMP = 0x00000000};
///////////////////////////////////////////////////////////
[
	object,
	uuid(edbed635-372e-4dab-bbfe-ed0d2f63be81),
	helpstring("IDebugClient2")
]
interface IDebugClient2 : IUnknown {
	HRESULT AttachKernel(  unsigned long Flags, const char* ConnectOptions );
	HRESULT GetKernelConnectionOptions(  char* Buffer, unsigned long BufferSize, unsigned long* OptionsSize );
	HRESULT SetKernelConnectionOptions(  const char* Options );
	HRESULT StartProcessServer(  unsigned long Flags, const char* Options, PVOID Reserved );
	HRESULT ConnectProcessServer(  const char* RemoteOptions, unsigned __int64* Server );
	HRESULT DisconnectProcessServer(  unsigned __int64 Server );
	HRESULT GetRunningProcessSystemIds(  unsigned __int64 Server, unsigned long* Ids, unsigned long Count, unsigned long* ActualCount );
	HRESULT GetRunningProcessSystemIdByExecutableName(  unsigned __int64 Server, const char* ExeName, unsigned long Flags, unsigned long* Id );
	HRESULT GetRunningProcessDescription(  unsigned __int64 Server, unsigned long SystemId, unsigned long Flags, char* ExeName, unsigned long ExeNameSize, unsigned long* ActualExeNameSize, char* Description, unsigned long DescriptionSize, unsigned long* ActualDescriptionSize );
	HRESULT AttachProcess(  unsigned __int64 Server, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT CreateProcess(  unsigned __int64 Server, char* CommandLine, unsigned long CreateFlags );
	HRESULT CreateProcessAndAttach(  unsigned __int64 Server, char* CommandLine, unsigned long CreateFlags, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT GetProcessOptions(  unsigned long* Options );
	HRESULT AddProcessOptions(  unsigned long Options );
	HRESULT RemoveProcessOptions(  unsigned long Options );
	HRESULT SetProcessOptions(  unsigned long Options );
	HRESULT OpenDumpFile(  const char* DumpFile );
	HRESULT WriteDumpFile(  const char* DumpFile, unsigned long Qualifier );
	HRESULT ConnectSession(  unsigned long Flags, unsigned long HistoryLimit );
	HRESULT StartServer(  const char* Options );
	HRESULT OutputServers(  unsigned long OutputControl, const char* Machine, unsigned long Flags );
	HRESULT TerminateProcesses(  );
	HRESULT DetachProcesses(  );
	HRESULT EndSession(  unsigned long Flags );
	HRESULT GetExitCode(  unsigned long* Code );
	HRESULT DispatchCallbacks(  unsigned long Timeout );
	HRESULT ExitDispatch(  IDebugClient* Client );
	HRESULT CreateClient(  IDebugClient** Client );
	HRESULT GetInputCallbacks(  IDebugInputCallbacks** Callbacks );
	HRESULT SetInputCallbacks(  IDebugInputCallbacks* Callbacks );
	HRESULT GetOutputCallbacks(  IDebugOutputCallbacks** Callbacks );
	HRESULT SetOutputCallbacks(  IDebugOutputCallbacks* Callbacks );
	HRESULT GetOutputMask(  unsigned long* Mask );
	HRESULT SetOutputMask(  unsigned long Mask );
	HRESULT GetOtherOutputMask(  IDebugClient* Client, unsigned long* Mask );
	HRESULT SetOtherOutputMask(  IDebugClient* Client, unsigned long Mask );
	HRESULT GetOutputWidth(  unsigned long* Columns );
	HRESULT SetOutputWidth(  unsigned long Columns );
	HRESULT GetOutputLinePrefix(  char* Buffer, unsigned long BufferSize, unsigned long* PrefixSize );
	HRESULT SetOutputLinePrefix(  const char* Prefix );
	HRESULT GetIdentity(  char* Buffer, unsigned long BufferSize, unsigned long* IdentitySize );
	HRESULT OutputIdentity(  unsigned long OutputControl, unsigned long Flags, const char* Format );
	HRESULT GetEventCallbacks(  IDebugEventCallbacks** Callbacks );
	HRESULT SetEventCallbacks(  IDebugEventCallbacks* Callbacks );
	HRESULT FlushCallbacks(  );
	HRESULT WriteDumpFile2(  const char* DumpFile, unsigned long Qualifier, unsigned long FormatFlags, const char* Comment );
	HRESULT AddDumpInformationFile(  const char* InfoFile, unsigned long Type );
	HRESULT EndProcessServer(  unsigned __int64 Server );
	HRESULT WaitForProcessServerEnd(  unsigned long Timeout );
	HRESULT IsKernelDebuggerEnabled(  );
	HRESULT TerminateCurrentProcess(  );
	HRESULT DetachCurrentProcess(  );
	HRESULT AbandonCurrentProcess(  );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(dd492d7f-71b8-4ad6-a8dc-1c887479ff91),
	helpstring("IDebugClient3")
]
interface IDebugClient3 : IUnknown {
	HRESULT AttachKernel(  unsigned long Flags, const char* ConnectOptions );
	HRESULT GetKernelConnectionOptions(  char* Buffer, unsigned long BufferSize, unsigned long* OptionsSize );
	HRESULT SetKernelConnectionOptions(  const char* Options );
	HRESULT StartProcessServer(  unsigned long Flags, const char* Options, PVOID Reserved );
	HRESULT ConnectProcessServer(  const char* RemoteOptions, unsigned __int64* Server );
	HRESULT DisconnectProcessServer(  unsigned __int64 Server );
	HRESULT GetRunningProcessSystemIds(  unsigned __int64 Server, unsigned long* Ids, unsigned long Count, unsigned long* ActualCount );
	HRESULT GetRunningProcessSystemIdByExecutableName(  unsigned __int64 Server, const char* ExeName, unsigned long Flags, unsigned long* Id );
	HRESULT GetRunningProcessDescription(  unsigned __int64 Server, unsigned long SystemId, unsigned long Flags, char* ExeName, unsigned long ExeNameSize, unsigned long* ActualExeNameSize, char* Description, unsigned long DescriptionSize, unsigned long* ActualDescriptionSize );
	HRESULT AttachProcess(  unsigned __int64 Server, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT CreateProcess(  unsigned __int64 Server, char* CommandLine, unsigned long CreateFlags );
	HRESULT CreateProcessAndAttach(  unsigned __int64 Server, char* CommandLine, unsigned long CreateFlags, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT GetProcessOptions(  unsigned long* Options );
	HRESULT AddProcessOptions(  unsigned long Options );
	HRESULT RemoveProcessOptions(  unsigned long Options );
	HRESULT SetProcessOptions(  unsigned long Options );
	HRESULT OpenDumpFile(  const char* DumpFile );
	HRESULT WriteDumpFile(  const char* DumpFile, unsigned long Qualifier );
	HRESULT ConnectSession(  unsigned long Flags, unsigned long HistoryLimit );
	HRESULT StartServer(  const char* Options );
	HRESULT OutputServers(  unsigned long OutputControl, const char* Machine, unsigned long Flags );
	HRESULT TerminateProcesses(  );
	HRESULT DetachProcesses(  );
	HRESULT EndSession(  unsigned long Flags );
	HRESULT GetExitCode(  unsigned long* Code );
	HRESULT DispatchCallbacks(  unsigned long Timeout );
	HRESULT ExitDispatch(  IDebugClient* Client );
	HRESULT CreateClient(  IDebugClient** Client );
	HRESULT GetInputCallbacks(  IDebugInputCallbacks** Callbacks );
	HRESULT SetInputCallbacks(  IDebugInputCallbacks* Callbacks );
	HRESULT GetOutputCallbacks(  IDebugOutputCallbacks** Callbacks );
	HRESULT SetOutputCallbacks(  IDebugOutputCallbacks* Callbacks );
	HRESULT GetOutputMask(  unsigned long* Mask );
	HRESULT SetOutputMask(  unsigned long Mask );
	HRESULT GetOtherOutputMask(  IDebugClient* Client, unsigned long* Mask );
	HRESULT SetOtherOutputMask(  IDebugClient* Client, unsigned long Mask );
	HRESULT GetOutputWidth(  unsigned long* Columns );
	HRESULT SetOutputWidth(  unsigned long Columns );
	HRESULT GetOutputLinePrefix(  char* Buffer, unsigned long BufferSize, unsigned long* PrefixSize );
	HRESULT SetOutputLinePrefix(  const char* Prefix );
	HRESULT GetIdentity(  char* Buffer, unsigned long BufferSize, unsigned long* IdentitySize );
	HRESULT OutputIdentity(  unsigned long OutputControl, unsigned long Flags, const char* Format );
	HRESULT GetEventCallbacks(  IDebugEventCallbacks** Callbacks );
	HRESULT SetEventCallbacks(  IDebugEventCallbacks* Callbacks );
	HRESULT FlushCallbacks(  );
	HRESULT WriteDumpFile2(  const char* DumpFile, unsigned long Qualifier, unsigned long FormatFlags, const char* Comment );
	HRESULT AddDumpInformationFile(  const char* InfoFile, unsigned long Type );
	HRESULT EndProcessServer(  unsigned __int64 Server );
	HRESULT WaitForProcessServerEnd(  unsigned long Timeout );
	HRESULT IsKernelDebuggerEnabled(  );
	HRESULT TerminateCurrentProcess(  );
	HRESULT DetachCurrentProcess(  );
	HRESULT AbandonCurrentProcess(  );
	HRESULT GetRunningProcessSystemIdByExecutableNameWide(  unsigned __int64 Server, const wchar_t* ExeName, unsigned long Flags, unsigned long* Id );
	HRESULT GetRunningProcessDescriptionWide(  unsigned __int64 Server, unsigned long SystemId, unsigned long Flags, wchar_t* ExeName, unsigned long ExeNameSize, unsigned long* ActualExeNameSize, wchar_t* Description, unsigned long DescriptionSize, unsigned long* ActualDescriptionSize );
	HRESULT CreateProcessWide(  unsigned __int64 Server, wchar_t* CommandLine, unsigned long CreateFlags );
	HRESULT CreateProcessAndAttachWide(  unsigned __int64 Server, wchar_t* CommandLine, unsigned long CreateFlags, unsigned long ProcessId, unsigned long AttachFlags );
};

enum {DEBUG_DUMP_FILE_LOAD_FAILED_INDEX  = 0xffffffff};
enum {DEBUG_DUMP_FILE_ORIGINAL_CAB_INDEX = 0xfffffffe};
///////////////////////////////////////////////////////////
[
	object,
	uuid(ca83c3de-5089-4cf8-93c8-d892387f2a5e),
	helpstring("IDebugClient4")
]
interface IDebugClient4 : IUnknown {
	HRESULT AttachKernel(  unsigned long Flags, const char* ConnectOptions );
	HRESULT GetKernelConnectionOptions(  char* Buffer, unsigned long BufferSize, unsigned long* OptionsSize );
	HRESULT SetKernelConnectionOptions(  const char* Options );
	HRESULT StartProcessServer(  unsigned long Flags, const char* Options, PVOID Reserved );
	HRESULT ConnectProcessServer(  const char* RemoteOptions, unsigned __int64* Server );
	HRESULT DisconnectProcessServer(  unsigned __int64 Server );
	HRESULT GetRunningProcessSystemIds(  unsigned __int64 Server, unsigned long* Ids, unsigned long Count, unsigned long* ActualCount );
	HRESULT GetRunningProcessSystemIdByExecutableName(  unsigned __int64 Server, const char* ExeName, unsigned long Flags, unsigned long* Id );
	HRESULT GetRunningProcessDescription(  unsigned __int64 Server, unsigned long SystemId, unsigned long Flags, char* ExeName, unsigned long ExeNameSize, unsigned long* ActualExeNameSize, char* Description, unsigned long DescriptionSize, unsigned long* ActualDescriptionSize );
	HRESULT AttachProcess(  unsigned __int64 Server, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT CreateProcess(  unsigned __int64 Server, char* CommandLine, unsigned long CreateFlags );
	HRESULT CreateProcessAndAttach(  unsigned __int64 Server, char* CommandLine, unsigned long CreateFlags, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT GetProcessOptions(  unsigned long* Options );
	HRESULT AddProcessOptions(  unsigned long Options );
	HRESULT RemoveProcessOptions(  unsigned long Options );
	HRESULT SetProcessOptions(  unsigned long Options );
	HRESULT OpenDumpFile(  const char* DumpFile );
	HRESULT WriteDumpFile(  const char* DumpFile, unsigned long Qualifier );
	HRESULT ConnectSession(  unsigned long Flags, unsigned long HistoryLimit );
	HRESULT StartServer(  const char* Options );
	HRESULT OutputServers(  unsigned long OutputControl, const char* Machine, unsigned long Flags );
	HRESULT TerminateProcesses(  );
	HRESULT DetachProcesses(  );
	HRESULT EndSession(  unsigned long Flags );
	HRESULT GetExitCode(  unsigned long* Code );
	HRESULT DispatchCallbacks(  unsigned long Timeout );
	HRESULT ExitDispatch(  IDebugClient* Client );
	HRESULT CreateClient(  IDebugClient** Client );
	HRESULT GetInputCallbacks(  IDebugInputCallbacks** Callbacks );
	HRESULT SetInputCallbacks(  IDebugInputCallbacks* Callbacks );
	HRESULT GetOutputCallbacks(  IDebugOutputCallbacks** Callbacks );
	HRESULT SetOutputCallbacks(  IDebugOutputCallbacks* Callbacks );
	HRESULT GetOutputMask(  unsigned long* Mask );
	HRESULT SetOutputMask(  unsigned long Mask );
	HRESULT GetOtherOutputMask(  IDebugClient* Client, unsigned long* Mask );
	HRESULT SetOtherOutputMask(  IDebugClient* Client, unsigned long Mask );
	HRESULT GetOutputWidth(  unsigned long* Columns );
	HRESULT SetOutputWidth(  unsigned long Columns );
	HRESULT GetOutputLinePrefix(  char* Buffer, unsigned long BufferSize, unsigned long* PrefixSize );
	HRESULT SetOutputLinePrefix(  const char* Prefix );
	HRESULT GetIdentity(  char* Buffer, unsigned long BufferSize, unsigned long* IdentitySize );
	HRESULT OutputIdentity(  unsigned long OutputControl, unsigned long Flags, const char* Format );
	HRESULT GetEventCallbacks(  IDebugEventCallbacks** Callbacks );
	HRESULT SetEventCallbacks(  IDebugEventCallbacks* Callbacks );
	HRESULT FlushCallbacks(  );
	HRESULT WriteDumpFile2(  const char* DumpFile, unsigned long Qualifier, unsigned long FormatFlags, const char* Comment );
	HRESULT AddDumpInformationFile(  const char* InfoFile, unsigned long Type );
	HRESULT EndProcessServer(  unsigned __int64 Server );
	HRESULT WaitForProcessServerEnd(  unsigned long Timeout );
	HRESULT IsKernelDebuggerEnabled(  );
	HRESULT TerminateCurrentProcess(  );
	HRESULT DetachCurrentProcess(  );
	HRESULT AbandonCurrentProcess(  );
	HRESULT GetRunningProcessSystemIdByExecutableNameWide(  unsigned __int64 Server, const wchar_t* ExeName, unsigned long Flags, unsigned long* Id );
	HRESULT GetRunningProcessDescriptionWide(  unsigned __int64 Server, unsigned long SystemId, unsigned long Flags, wchar_t* ExeName, unsigned long ExeNameSize, unsigned long* ActualExeNameSize, wchar_t* Description, unsigned long DescriptionSize, unsigned long* ActualDescriptionSize );
	HRESULT CreateProcessWide(  unsigned __int64 Server, wchar_t* CommandLine, unsigned long CreateFlags );
	HRESULT CreateProcessAndAttachWide(  unsigned __int64 Server, wchar_t* CommandLine, unsigned long CreateFlags, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT OpenDumpFileWide(  const wchar_t* FileName, unsigned __int64 FileHandle );
	HRESULT WriteDumpFileWide(  const wchar_t* FileName, unsigned __int64 FileHandle, unsigned long Qualifier, unsigned long FormatFlags, const wchar_t* Comment );
	HRESULT AddDumpInformationFileWide(  const wchar_t* FileName, unsigned __int64 FileHandle, unsigned long Type );
	HRESULT GetNumberDumpFiles(  unsigned long* Number );
	HRESULT GetDumpFile(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* NameSize, unsigned __int64* Handle, unsigned long* Type );
	HRESULT GetDumpFileWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* NameSize, unsigned __int64* Handle, unsigned long* Type );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(e3acb9d7-7ec2-4f0c-a0da-e81e0cbbe628),
	helpstring("IDebugClient5")
]
interface IDebugClient5 : IUnknown {
	HRESULT AttachKernel(  unsigned long Flags, const char* ConnectOptions );
	HRESULT GetKernelConnectionOptions(  char* Buffer, unsigned long BufferSize, unsigned long* OptionsSize );
	HRESULT SetKernelConnectionOptions(  const char* Options );
	HRESULT StartProcessServer(  unsigned long Flags, const char* Options, PVOID Reserved );
	HRESULT ConnectProcessServer(  const char* RemoteOptions, unsigned __int64* Server );
	HRESULT DisconnectProcessServer(  unsigned __int64 Server );
	HRESULT GetRunningProcessSystemIds(  unsigned __int64 Server, unsigned long* Ids, unsigned long Count, unsigned long* ActualCount );
	HRESULT GetRunningProcessSystemIdByExecutableName(  unsigned __int64 Server, const char* ExeName, unsigned long Flags, unsigned long* Id );
	HRESULT GetRunningProcessDescription(  unsigned __int64 Server, unsigned long SystemId, unsigned long Flags, char* ExeName, unsigned long ExeNameSize, unsigned long* ActualExeNameSize, char* Description, unsigned long DescriptionSize, unsigned long* ActualDescriptionSize );
	HRESULT AttachProcess(  unsigned __int64 Server, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT CreateProcess(  unsigned __int64 Server, char* CommandLine, unsigned long CreateFlags );
	HRESULT CreateProcessAndAttach(  unsigned __int64 Server, char* CommandLine, unsigned long CreateFlags, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT GetProcessOptions(  unsigned long* Options );
	HRESULT AddProcessOptions(  unsigned long Options );
	HRESULT RemoveProcessOptions(  unsigned long Options );
	HRESULT SetProcessOptions(  unsigned long Options );
	HRESULT OpenDumpFile(  const char* DumpFile );
	HRESULT WriteDumpFile(  const char* DumpFile, unsigned long Qualifier );
	HRESULT ConnectSession(  unsigned long Flags, unsigned long HistoryLimit );
	HRESULT StartServer(  const char* Options );
	HRESULT OutputServers(  unsigned long OutputControl, const char* Machine, unsigned long Flags );
	HRESULT TerminateProcesses(  );
	HRESULT DetachProcesses(  );
	HRESULT EndSession(  unsigned long Flags );
	HRESULT GetExitCode(  unsigned long* Code );
	HRESULT DispatchCallbacks(  unsigned long Timeout );
	HRESULT ExitDispatch(  IDebugClient* Client );
	HRESULT CreateClient(  IDebugClient** Client );
	HRESULT GetInputCallbacks(  IDebugInputCallbacks** Callbacks );
	HRESULT SetInputCallbacks(  IDebugInputCallbacks* Callbacks );
	HRESULT GetOutputCallbacks(  IDebugOutputCallbacks** Callbacks );
	HRESULT SetOutputCallbacks(  IDebugOutputCallbacks* Callbacks );
	HRESULT GetOutputMask(  unsigned long* Mask );
	HRESULT SetOutputMask(  unsigned long Mask );
	HRESULT GetOtherOutputMask(  IDebugClient* Client, unsigned long* Mask );
	HRESULT SetOtherOutputMask(  IDebugClient* Client, unsigned long Mask );
	HRESULT GetOutputWidth(  unsigned long* Columns );
	HRESULT SetOutputWidth(  unsigned long Columns );
	HRESULT GetOutputLinePrefix(  char* Buffer, unsigned long BufferSize, unsigned long* PrefixSize );
	HRESULT SetOutputLinePrefix(  const char* Prefix );
	HRESULT GetIdentity(  char* Buffer, unsigned long BufferSize, unsigned long* IdentitySize );
	HRESULT OutputIdentity(  unsigned long OutputControl, unsigned long Flags, const char* Format );
	HRESULT GetEventCallbacks(  IDebugEventCallbacks** Callbacks );
	HRESULT SetEventCallbacks(  IDebugEventCallbacks* Callbacks );
	HRESULT FlushCallbacks(  );
	HRESULT WriteDumpFile2(  const char* DumpFile, unsigned long Qualifier, unsigned long FormatFlags, const char* Comment );
	HRESULT AddDumpInformationFile(  const char* InfoFile, unsigned long Type );
	HRESULT EndProcessServer(  unsigned __int64 Server );
	HRESULT WaitForProcessServerEnd(  unsigned long Timeout );
	HRESULT IsKernelDebuggerEnabled(  );
	HRESULT TerminateCurrentProcess(  );
	HRESULT DetachCurrentProcess(  );
	HRESULT AbandonCurrentProcess(  );
	HRESULT GetRunningProcessSystemIdByExecutableNameWide(  unsigned __int64 Server, const wchar_t* ExeName, unsigned long Flags, unsigned long* Id );
	HRESULT GetRunningProcessDescriptionWide(  unsigned __int64 Server, unsigned long SystemId, unsigned long Flags, wchar_t* ExeName, unsigned long ExeNameSize, unsigned long* ActualExeNameSize, wchar_t* Description, unsigned long DescriptionSize, unsigned long* ActualDescriptionSize );
	HRESULT CreateProcessWide(  unsigned __int64 Server, wchar_t* CommandLine, unsigned long CreateFlags );
	HRESULT CreateProcessAndAttachWide(  unsigned __int64 Server, wchar_t* CommandLine, unsigned long CreateFlags, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT OpenDumpFileWide(  const wchar_t* FileName, unsigned __int64 FileHandle );
	HRESULT WriteDumpFileWide(  const wchar_t* FileName, unsigned __int64 FileHandle, unsigned long Qualifier, unsigned long FormatFlags, const wchar_t* Comment );
	HRESULT AddDumpInformationFileWide(  const wchar_t* FileName, unsigned __int64 FileHandle, unsigned long Type );
	HRESULT GetNumberDumpFiles(  unsigned long* Number );
	HRESULT GetDumpFile(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* NameSize, unsigned __int64* Handle, unsigned long* Type );
	HRESULT GetDumpFileWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* NameSize, unsigned __int64* Handle, unsigned long* Type );
	HRESULT AttachKernelWide(  unsigned long Flags, const wchar_t* ConnectOptions );
	HRESULT GetKernelConnectionOptionsWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* OptionsSize );
	HRESULT SetKernelConnectionOptionsWide(  const wchar_t* Options );
	HRESULT StartProcessServerWide(  unsigned long Flags, const wchar_t* Options, PVOID Reserved );
	HRESULT ConnectProcessServerWide(  const wchar_t* RemoteOptions, unsigned __int64* Server );
	HRESULT StartServerWide(  const wchar_t* Options );
	HRESULT OutputServersWide(  unsigned long OutputControl, const wchar_t* Machine, unsigned long Flags );
	HRESULT GetOutputCallbacksWide(  IDebugOutputCallbacksWide** Callbacks );
	HRESULT SetOutputCallbacksWide(  IDebugOutputCallbacksWide* Callbacks );
	HRESULT GetOutputLinePrefixWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* PrefixSize );
	HRESULT SetOutputLinePrefixWide(  const wchar_t* Prefix );
	HRESULT GetIdentityWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* IdentitySize );
	HRESULT OutputIdentityWide(  unsigned long OutputControl, unsigned long Flags, const wchar_t* Format );
	HRESULT GetEventCallbacksWide(  IDebugEventCallbacksWide** Callbacks );
	HRESULT SetEventCallbacksWide(  IDebugEventCallbacksWide* Callbacks );
	HRESULT CreateProcess2(  unsigned __int64 Server, char* CommandLine, PVOID OptionsBuffer, unsigned long OptionsBufferSize, const char* InitialDirectory, const char* Environment );
	HRESULT CreateProcess2Wide(  unsigned __int64 Server, wchar_t* CommandLine, PVOID OptionsBuffer, unsigned long OptionsBufferSize, const wchar_t* InitialDirectory, const wchar_t* Environment );
	HRESULT CreateProcessAndAttach2(  unsigned __int64 Server, char* CommandLine, PVOID OptionsBuffer, unsigned long OptionsBufferSize, const char* InitialDirectory, const char* Environment, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT CreateProcessAndAttach2Wide(  unsigned __int64 Server, wchar_t* CommandLine, PVOID OptionsBuffer, unsigned long OptionsBufferSize, const wchar_t* InitialDirectory, const wchar_t* Environment, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT PushOutputLinePrefix(  const char* NewPrefix, unsigned __int64* Handle );
	HRESULT PushOutputLinePrefixWide(  const wchar_t* NewPrefix, unsigned __int64* Handle );
	HRESULT PopOutputLinePrefix(  unsigned __int64 Handle );
	HRESULT GetNumberInputCallbacks(  unsigned long* Count );
	HRESULT GetNumberOutputCallbacks(  unsigned long* Count );
	HRESULT GetNumberEventCallbacks(  unsigned long EventFlags, unsigned long* Count );
	HRESULT GetQuitLockString(  char* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT SetQuitLockString(  const char* String );
	HRESULT GetQuitLockStringWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT SetQuitLockStringWide(  const wchar_t* String );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(fd28b4c5-c498-4686-a28e-62cad2154eb3),
	helpstring("IDebugClient6")
]
interface IDebugClient6 : IUnknown {
	HRESULT AttachKernel(  unsigned long Flags, const char* ConnectOptions );
	HRESULT GetKernelConnectionOptions(  char* Buffer, unsigned long BufferSize, unsigned long* OptionsSize );
	HRESULT SetKernelConnectionOptions(  const char* Options );
	HRESULT StartProcessServer(  unsigned long Flags, const char* Options, PVOID Reserved );
	HRESULT ConnectProcessServer(  const char* RemoteOptions, unsigned __int64* Server );
	HRESULT DisconnectProcessServer(  unsigned __int64 Server );
	HRESULT GetRunningProcessSystemIds(  unsigned __int64 Server, unsigned long* Ids, unsigned long Count, unsigned long* ActualCount );
	HRESULT GetRunningProcessSystemIdByExecutableName(  unsigned __int64 Server, const char* ExeName, unsigned long Flags, unsigned long* Id );
	HRESULT GetRunningProcessDescription(  unsigned __int64 Server, unsigned long SystemId, unsigned long Flags, char* ExeName, unsigned long ExeNameSize, unsigned long* ActualExeNameSize, char* Description, unsigned long DescriptionSize, unsigned long* ActualDescriptionSize );
	HRESULT AttachProcess(  unsigned __int64 Server, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT CreateProcess(  unsigned __int64 Server, char* CommandLine, unsigned long CreateFlags );
	HRESULT CreateProcessAndAttach(  unsigned __int64 Server, char* CommandLine, unsigned long CreateFlags, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT GetProcessOptions(  unsigned long* Options );
	HRESULT AddProcessOptions(  unsigned long Options );
	HRESULT RemoveProcessOptions(  unsigned long Options );
	HRESULT SetProcessOptions(  unsigned long Options );
	HRESULT OpenDumpFile(  const char* DumpFile );
	HRESULT WriteDumpFile(  const char* DumpFile, unsigned long Qualifier );
	HRESULT ConnectSession(  unsigned long Flags, unsigned long HistoryLimit );
	HRESULT StartServer(  const char* Options );
	HRESULT OutputServers(  unsigned long OutputControl, const char* Machine, unsigned long Flags );
	HRESULT TerminateProcesses(  );
	HRESULT DetachProcesses(  );
	HRESULT EndSession(  unsigned long Flags );
	HRESULT GetExitCode(  unsigned long* Code );
	HRESULT DispatchCallbacks(  unsigned long Timeout );
	HRESULT ExitDispatch(  IDebugClient* Client );
	HRESULT CreateClient(  IDebugClient** Client );
	HRESULT GetInputCallbacks(  IDebugInputCallbacks** Callbacks );
	HRESULT SetInputCallbacks(  IDebugInputCallbacks* Callbacks );
	HRESULT GetOutputCallbacks(  IDebugOutputCallbacks** Callbacks );
	HRESULT SetOutputCallbacks(  IDebugOutputCallbacks* Callbacks );
	HRESULT GetOutputMask(  unsigned long* Mask );
	HRESULT SetOutputMask(  unsigned long Mask );
	HRESULT GetOtherOutputMask(  IDebugClient* Client, unsigned long* Mask );
	HRESULT SetOtherOutputMask(  IDebugClient* Client, unsigned long Mask );
	HRESULT GetOutputWidth(  unsigned long* Columns );
	HRESULT SetOutputWidth(  unsigned long Columns );
	HRESULT GetOutputLinePrefix(  char* Buffer, unsigned long BufferSize, unsigned long* PrefixSize );
	HRESULT SetOutputLinePrefix(  const char* Prefix );
	HRESULT GetIdentity(  char* Buffer, unsigned long BufferSize, unsigned long* IdentitySize );
	HRESULT OutputIdentity(  unsigned long OutputControl, unsigned long Flags, const char* Format );
	HRESULT GetEventCallbacks(  IDebugEventCallbacks** Callbacks );
	HRESULT SetEventCallbacks(  IDebugEventCallbacks* Callbacks );
	HRESULT FlushCallbacks(  );
	HRESULT WriteDumpFile2(  const char* DumpFile, unsigned long Qualifier, unsigned long FormatFlags, const char* Comment );
	HRESULT AddDumpInformationFile(  const char* InfoFile, unsigned long Type );
	HRESULT EndProcessServer(  unsigned __int64 Server );
	HRESULT WaitForProcessServerEnd(  unsigned long Timeout );
	HRESULT IsKernelDebuggerEnabled(  );
	HRESULT TerminateCurrentProcess(  );
	HRESULT DetachCurrentProcess(  );
	HRESULT AbandonCurrentProcess(  );
	HRESULT GetRunningProcessSystemIdByExecutableNameWide(  unsigned __int64 Server, const wchar_t* ExeName, unsigned long Flags, unsigned long* Id );
	HRESULT GetRunningProcessDescriptionWide(  unsigned __int64 Server, unsigned long SystemId, unsigned long Flags, wchar_t* ExeName, unsigned long ExeNameSize, unsigned long* ActualExeNameSize, wchar_t* Description, unsigned long DescriptionSize, unsigned long* ActualDescriptionSize );
	HRESULT CreateProcessWide(  unsigned __int64 Server, wchar_t* CommandLine, unsigned long CreateFlags );
	HRESULT CreateProcessAndAttachWide(  unsigned __int64 Server, wchar_t* CommandLine, unsigned long CreateFlags, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT OpenDumpFileWide(  const wchar_t* FileName, unsigned __int64 FileHandle );
	HRESULT WriteDumpFileWide(  const wchar_t* FileName, unsigned __int64 FileHandle, unsigned long Qualifier, unsigned long FormatFlags, const wchar_t* Comment );
	HRESULT AddDumpInformationFileWide(  const wchar_t* FileName, unsigned __int64 FileHandle, unsigned long Type );
	HRESULT GetNumberDumpFiles(  unsigned long* Number );
	HRESULT GetDumpFile(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* NameSize, unsigned __int64* Handle, unsigned long* Type );
	HRESULT GetDumpFileWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* NameSize, unsigned __int64* Handle, unsigned long* Type );
	HRESULT AttachKernelWide(  unsigned long Flags, const wchar_t* ConnectOptions );
	HRESULT GetKernelConnectionOptionsWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* OptionsSize );
	HRESULT SetKernelConnectionOptionsWide(  const wchar_t* Options );
	HRESULT StartProcessServerWide(  unsigned long Flags, const wchar_t* Options, PVOID Reserved );
	HRESULT ConnectProcessServerWide(  const wchar_t* RemoteOptions, unsigned __int64* Server );
	HRESULT StartServerWide(  const wchar_t* Options );
	HRESULT OutputServersWide(  unsigned long OutputControl, const wchar_t* Machine, unsigned long Flags );
	HRESULT GetOutputCallbacksWide(  IDebugOutputCallbacksWide** Callbacks );
	HRESULT SetOutputCallbacksWide(  IDebugOutputCallbacksWide* Callbacks );
	HRESULT GetOutputLinePrefixWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* PrefixSize );
	HRESULT SetOutputLinePrefixWide(  const wchar_t* Prefix );
	HRESULT GetIdentityWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* IdentitySize );
	HRESULT OutputIdentityWide(  unsigned long OutputControl, unsigned long Flags, const wchar_t* Format );
	HRESULT GetEventCallbacksWide(  IDebugEventCallbacksWide** Callbacks );
	HRESULT SetEventCallbacksWide(  IDebugEventCallbacksWide* Callbacks );
	HRESULT CreateProcess2(  unsigned __int64 Server, char* CommandLine, PVOID OptionsBuffer, unsigned long OptionsBufferSize, const char* InitialDirectory, const char* Environment );
	HRESULT CreateProcess2Wide(  unsigned __int64 Server, wchar_t* CommandLine, PVOID OptionsBuffer, unsigned long OptionsBufferSize, const wchar_t* InitialDirectory, const wchar_t* Environment );
	HRESULT CreateProcessAndAttach2(  unsigned __int64 Server, char* CommandLine, PVOID OptionsBuffer, unsigned long OptionsBufferSize, const char* InitialDirectory, const char* Environment, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT CreateProcessAndAttach2Wide(  unsigned __int64 Server, wchar_t* CommandLine, PVOID OptionsBuffer, unsigned long OptionsBufferSize, const wchar_t* InitialDirectory, const wchar_t* Environment, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT PushOutputLinePrefix(  const char* NewPrefix, unsigned __int64* Handle );
	HRESULT PushOutputLinePrefixWide(  const wchar_t* NewPrefix, unsigned __int64* Handle );
	HRESULT PopOutputLinePrefix(  unsigned __int64 Handle );
	HRESULT GetNumberInputCallbacks(  unsigned long* Count );
	HRESULT GetNumberOutputCallbacks(  unsigned long* Count );
	HRESULT GetNumberEventCallbacks(  unsigned long EventFlags, unsigned long* Count );
	HRESULT GetQuitLockString(  char* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT SetQuitLockString(  const char* String );
	HRESULT GetQuitLockStringWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT SetQuitLockStringWide(  const wchar_t* String );
	HRESULT SetEventContextCallbacks(  IDebugEventContextCallbacks* Callbacks );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(13586be3-542e-481e-b1f2-8497ba74f9a9),
	helpstring("IDebugClient7")
]
interface IDebugClient7 : IUnknown {
	HRESULT AttachKernel(  unsigned long Flags, const char* ConnectOptions );
	HRESULT GetKernelConnectionOptions(  char* Buffer, unsigned long BufferSize, unsigned long* OptionsSize );
	HRESULT SetKernelConnectionOptions(  const char* Options );
	HRESULT StartProcessServer(  unsigned long Flags, const char* Options, PVOID Reserved );
	HRESULT ConnectProcessServer(  const char* RemoteOptions, unsigned __int64* Server );
	HRESULT DisconnectProcessServer(  unsigned __int64 Server );
	HRESULT GetRunningProcessSystemIds(  unsigned __int64 Server, unsigned long* Ids, unsigned long Count, unsigned long* ActualCount );
	HRESULT GetRunningProcessSystemIdByExecutableName(  unsigned __int64 Server, const char* ExeName, unsigned long Flags, unsigned long* Id );
	HRESULT GetRunningProcessDescription(  unsigned __int64 Server, unsigned long SystemId, unsigned long Flags, char* ExeName, unsigned long ExeNameSize, unsigned long* ActualExeNameSize, char* Description, unsigned long DescriptionSize, unsigned long* ActualDescriptionSize );
	HRESULT AttachProcess(  unsigned __int64 Server, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT CreateProcess(  unsigned __int64 Server, char* CommandLine, unsigned long CreateFlags );
	HRESULT CreateProcessAndAttach(  unsigned __int64 Server, char* CommandLine, unsigned long CreateFlags, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT GetProcessOptions(  unsigned long* Options );
	HRESULT AddProcessOptions(  unsigned long Options );
	HRESULT RemoveProcessOptions(  unsigned long Options );
	HRESULT SetProcessOptions(  unsigned long Options );
	HRESULT OpenDumpFile(  const char* DumpFile );
	HRESULT WriteDumpFile(  const char* DumpFile, unsigned long Qualifier );
	HRESULT ConnectSession(  unsigned long Flags, unsigned long HistoryLimit );
	HRESULT StartServer(  const char* Options );
	HRESULT OutputServers(  unsigned long OutputControl, const char* Machine, unsigned long Flags );
	HRESULT TerminateProcesses(  );
	HRESULT DetachProcesses(  );
	HRESULT EndSession(  unsigned long Flags );
	HRESULT GetExitCode(  unsigned long* Code );
	HRESULT DispatchCallbacks(  unsigned long Timeout );
	HRESULT ExitDispatch(  IDebugClient* Client );
	HRESULT CreateClient(  IDebugClient** Client );
	HRESULT GetInputCallbacks(  IDebugInputCallbacks** Callbacks );
	HRESULT SetInputCallbacks(  IDebugInputCallbacks* Callbacks );
	HRESULT GetOutputCallbacks(  IDebugOutputCallbacks** Callbacks );
	HRESULT SetOutputCallbacks(  IDebugOutputCallbacks* Callbacks );
	HRESULT GetOutputMask(  unsigned long* Mask );
	HRESULT SetOutputMask(  unsigned long Mask );
	HRESULT GetOtherOutputMask(  IDebugClient* Client, unsigned long* Mask );
	HRESULT SetOtherOutputMask(  IDebugClient* Client, unsigned long Mask );
	HRESULT GetOutputWidth(  unsigned long* Columns );
	HRESULT SetOutputWidth(  unsigned long Columns );
	HRESULT GetOutputLinePrefix(  char* Buffer, unsigned long BufferSize, unsigned long* PrefixSize );
	HRESULT SetOutputLinePrefix(  const char* Prefix );
	HRESULT GetIdentity(  char* Buffer, unsigned long BufferSize, unsigned long* IdentitySize );
	HRESULT OutputIdentity(  unsigned long OutputControl, unsigned long Flags, const char* Format );
	HRESULT GetEventCallbacks(  IDebugEventCallbacks** Callbacks );
	HRESULT SetEventCallbacks(  IDebugEventCallbacks* Callbacks );
	HRESULT FlushCallbacks(  );
	HRESULT WriteDumpFile2(  const char* DumpFile, unsigned long Qualifier, unsigned long FormatFlags, const char* Comment );
	HRESULT AddDumpInformationFile(  const char* InfoFile, unsigned long Type );
	HRESULT EndProcessServer(  unsigned __int64 Server );
	HRESULT WaitForProcessServerEnd(  unsigned long Timeout );
	HRESULT IsKernelDebuggerEnabled(  );
	HRESULT TerminateCurrentProcess(  );
	HRESULT DetachCurrentProcess(  );
	HRESULT AbandonCurrentProcess(  );
	HRESULT GetRunningProcessSystemIdByExecutableNameWide(  unsigned __int64 Server, const wchar_t* ExeName, unsigned long Flags, unsigned long* Id );
	HRESULT GetRunningProcessDescriptionWide(  unsigned __int64 Server, unsigned long SystemId, unsigned long Flags, wchar_t* ExeName, unsigned long ExeNameSize, unsigned long* ActualExeNameSize, wchar_t* Description, unsigned long DescriptionSize, unsigned long* ActualDescriptionSize );
	HRESULT CreateProcessWide(  unsigned __int64 Server, wchar_t* CommandLine, unsigned long CreateFlags );
	HRESULT CreateProcessAndAttachWide(  unsigned __int64 Server, wchar_t* CommandLine, unsigned long CreateFlags, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT OpenDumpFileWide(  const wchar_t* FileName, unsigned __int64 FileHandle );
	HRESULT WriteDumpFileWide(  const wchar_t* FileName, unsigned __int64 FileHandle, unsigned long Qualifier, unsigned long FormatFlags, const wchar_t* Comment );
	HRESULT AddDumpInformationFileWide(  const wchar_t* FileName, unsigned __int64 FileHandle, unsigned long Type );
	HRESULT GetNumberDumpFiles(  unsigned long* Number );
	HRESULT GetDumpFile(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* NameSize, unsigned __int64* Handle, unsigned long* Type );
	HRESULT GetDumpFileWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* NameSize, unsigned __int64* Handle, unsigned long* Type );
	HRESULT AttachKernelWide(  unsigned long Flags, const wchar_t* ConnectOptions );
	HRESULT GetKernelConnectionOptionsWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* OptionsSize );
	HRESULT SetKernelConnectionOptionsWide(  const wchar_t* Options );
	HRESULT StartProcessServerWide(  unsigned long Flags, const wchar_t* Options, PVOID Reserved );
	HRESULT ConnectProcessServerWide(  const wchar_t* RemoteOptions, unsigned __int64* Server );
	HRESULT StartServerWide(  const wchar_t* Options );
	HRESULT OutputServersWide(  unsigned long OutputControl, const wchar_t* Machine, unsigned long Flags );
	HRESULT GetOutputCallbacksWide(  IDebugOutputCallbacksWide** Callbacks );
	HRESULT SetOutputCallbacksWide(  IDebugOutputCallbacksWide* Callbacks );
	HRESULT GetOutputLinePrefixWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* PrefixSize );
	HRESULT SetOutputLinePrefixWide(  const wchar_t* Prefix );
	HRESULT GetIdentityWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* IdentitySize );
	HRESULT OutputIdentityWide(  unsigned long OutputControl, unsigned long Flags, const wchar_t* Format );
	HRESULT GetEventCallbacksWide(  IDebugEventCallbacksWide** Callbacks );
	HRESULT SetEventCallbacksWide(  IDebugEventCallbacksWide* Callbacks );
	HRESULT CreateProcess2(  unsigned __int64 Server, char* CommandLine, PVOID OptionsBuffer, unsigned long OptionsBufferSize, const char* InitialDirectory, const char* Environment );
	HRESULT CreateProcess2Wide(  unsigned __int64 Server, wchar_t* CommandLine, PVOID OptionsBuffer, unsigned long OptionsBufferSize, const wchar_t* InitialDirectory, const wchar_t* Environment );
	HRESULT CreateProcessAndAttach2(  unsigned __int64 Server, char* CommandLine, PVOID OptionsBuffer, unsigned long OptionsBufferSize, const char* InitialDirectory, const char* Environment, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT CreateProcessAndAttach2Wide(  unsigned __int64 Server, wchar_t* CommandLine, PVOID OptionsBuffer, unsigned long OptionsBufferSize, const wchar_t* InitialDirectory, const wchar_t* Environment, unsigned long ProcessId, unsigned long AttachFlags );
	HRESULT PushOutputLinePrefix(  const char* NewPrefix, unsigned __int64* Handle );
	HRESULT PushOutputLinePrefixWide(  const wchar_t* NewPrefix, unsigned __int64* Handle );
	HRESULT PopOutputLinePrefix(  unsigned __int64 Handle );
	HRESULT GetNumberInputCallbacks(  unsigned long* Count );
	HRESULT GetNumberOutputCallbacks(  unsigned long* Count );
	HRESULT GetNumberEventCallbacks(  unsigned long EventFlags, unsigned long* Count );
	HRESULT GetQuitLockString(  char* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT SetQuitLockString(  const char* String );
	HRESULT GetQuitLockStringWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT SetQuitLockStringWide(  const wchar_t* String );
	HRESULT SetEventContextCallbacks(  IDebugEventContextCallbacks* Callbacks );
	HRESULT SetClientContext(  PVOID Context, unsigned long ContextSize );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(a02b66c4-aea3-4234-a9f7-fe4c383d4e29),
	helpstring("IDebugPlmClient")
]
interface IDebugPlmClient : IUnknown {
	HRESULT LaunchPlmPackageForDebugWide(  unsigned __int64 Server, unsigned long Timeout, const wchar_t* PackageFullName, const wchar_t* AppName, const wchar_t* Arguments, unsigned long* ProcessId, unsigned long* ThreadId );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(597c980d-e7bd-4309-962c-9d9b69a7372c),
	helpstring("IDebugPlmClient2")
]
interface IDebugPlmClient2 : IUnknown {
	HRESULT LaunchPlmPackageForDebugWide(  unsigned __int64 Server, unsigned long Timeout, const wchar_t* PackageFullName, const wchar_t* AppName, const wchar_t* Arguments, unsigned long* ProcessId, unsigned long* ThreadId );
	HRESULT LaunchPlmBgTaskForDebugWide(  unsigned __int64 Server, unsigned long Timeout, const wchar_t* PackageFullName, const wchar_t* BackgroundTaskId, unsigned long* ProcessId, unsigned long* ThreadId );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(d4a5dbd1-ca02-4d90-856a-2a92bfd0f20f),
	helpstring("IDebugPlmClient3")
]
interface IDebugPlmClient3 : IUnknown {
	HRESULT LaunchPlmPackageForDebugWide(  unsigned __int64 Server, unsigned long Timeout, const wchar_t* PackageFullName, const wchar_t* AppName, const wchar_t* Arguments, unsigned long* ProcessId, unsigned long* ThreadId );
	HRESULT LaunchPlmBgTaskForDebugWide(  unsigned __int64 Server, unsigned long Timeout, const wchar_t* PackageFullName, const wchar_t* BackgroundTaskId, unsigned long* ProcessId, unsigned long* ThreadId );
	HRESULT QueryPlmPackageWide(  unsigned __int64 Server, const wchar_t* PackageFullName, IDebugOutputStream* Stream );
	HRESULT QueryPlmPackageList(  unsigned __int64 Server, IDebugOutputStream* Stream );
	HRESULT EnablePlmPackageDebugWide(  unsigned __int64 Server, const wchar_t* PackageFullName );
	HRESULT DisablePlmPackageDebugWide(  unsigned __int64 Server, const wchar_t* PackageFullName );
	HRESULT SuspendPlmPackageWide(  unsigned __int64 Server, const wchar_t* PackageFullName );
	HRESULT ResumePlmPackageWide(  unsigned __int64 Server, const wchar_t* PackageFullName );
	HRESULT TerminatePlmPackageWide(  unsigned __int64 Server, const wchar_t* PackageFullName );
	HRESULT LaunchAndDebugPlmAppWide(  unsigned __int64 Server, const wchar_t* PackageFullName, const wchar_t* AppName, const wchar_t* Arguments );
	HRESULT ActivateAndDebugPlmBgTaskWide(  unsigned __int64 Server, const wchar_t* PackageFullName, const wchar_t* BackgroundTaskId );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(7782d8f2-2b85-4059-ab88-28ceddca1c80),
	helpstring("IDebugOutputStream")
]
interface IDebugOutputStream : IUnknown {
	HRESULT Write(  const wchar_t* psz );
};

enum {DEBUG_STATUS_NO_CHANGE           = 0};
enum {DEBUG_STATUS_GO                  = 1};
enum {DEBUG_STATUS_GO_HANDLED          = 2};
enum {DEBUG_STATUS_GO_NOT_HANDLED      = 3};
enum {DEBUG_STATUS_STEP_OVER           = 4};
enum {DEBUG_STATUS_STEP_INTO           = 5};
enum {DEBUG_STATUS_BREAK               = 6};
enum {DEBUG_STATUS_NO_DEBUGGEE         = 7};
enum {DEBUG_STATUS_STEP_BRANCH         = 8};
enum {DEBUG_STATUS_IGNORE_EVENT        = 9};
enum {DEBUG_STATUS_RESTART_REQUESTED   = 10};
enum {DEBUG_STATUS_REVERSE_GO          = 11};
enum {DEBUG_STATUS_REVERSE_STEP_BRANCH = 12};
enum {DEBUG_STATUS_REVERSE_STEP_OVER   = 13};
enum {DEBUG_STATUS_REVERSE_STEP_INTO   = 14};
enum {DEBUG_STATUS_OUT_OF_SYNC		 = 15};
enum {DEBUG_STATUS_WAIT_INPUT			 = 16};
enum {DEBUG_STATUS_TIMEOUT             = 17};
enum {DEBUG_STATUS_MASK                = 0x1f};
enum {DEBUG_OUTCTL_THIS_CLIENT       = 0x00000000};
enum {DEBUG_OUTCTL_ALL_CLIENTS       = 0x00000001};
enum {DEBUG_OUTCTL_ALL_OTHER_CLIENTS = 0x00000002};
enum {DEBUG_OUTCTL_IGNORE            = 0x00000003};
enum {DEBUG_OUTCTL_LOG_ONLY          = 0x00000004};
enum {DEBUG_OUTCTL_SEND_MASK         = 0x00000007};
enum {DEBUG_OUTCTL_NOT_LOGGED        = 0x00000008};
enum {DEBUG_OUTCTL_OVERRIDE_MASK     = 0x00000010};
enum {DEBUG_OUTCTL_DML               = 0x00000020};
enum {DEBUG_OUTCTL_AMBIENT_DML       = 0xfffffffe};
enum {DEBUG_OUTCTL_AMBIENT_TEXT      = 0xffffffff};
enum {DEBUG_INTERRUPT_ACTIVE  = 0};
enum {DEBUG_INTERRUPT_PASSIVE = 1};
enum {DEBUG_INTERRUPT_EXIT    = 2};
enum {DEBUG_CURRENT_DEFAULT     = 0x0000000f};
enum {DEBUG_CURRENT_SYMBOL      = 0x00000001};
enum {DEBUG_CURRENT_DISASM      = 0x00000002};
enum {DEBUG_CURRENT_REGISTERS   = 0x00000004};
enum {DEBUG_CURRENT_SOURCE_LINE = 0x00000008};
enum {DEBUG_DISASM_EFFECTIVE_ADDRESS  = 0x00000001};
enum {DEBUG_DISASM_MATCHING_SYMBOLS   = 0x00000002};
enum {DEBUG_DISASM_SOURCE_LINE_NUMBER = 0x00000004};
enum {DEBUG_DISASM_SOURCE_FILE_NAME   = 0x00000008};
enum {DEBUG_LEVEL_SOURCE   = 0};
enum {DEBUG_LEVEL_ASSEMBLY = 1};
enum {DEBUG_ENGIGNORE_DBGHELP_VERSION      = 0x00000001};
enum {DEBUG_ENGIGNORE_EXTENSION_VERSIONS   = 0x00000002};
enum {DEBUG_ENGALLOW_NETWORK_PATHS         = 0x00000004};
enum {DEBUG_ENGDISALLOW_NETWORK_PATHS      = 0x00000008};
enum {DEBUG_ENGIGNORE_LOADER_EXCEPTIONS    = 0x00000010};
enum {DEBUG_ENGINITIAL_BREAK               = 0x00000020};
enum {DEBUG_ENGINITIAL_MODULE_BREAK        = 0x00000040};
enum {DEBUG_ENGFINAL_BREAK                 = 0x00000080};
enum {DEBUG_ENGNO_EXECUTE_REPEAT           = 0x00000100};
enum {DEBUG_ENGFAIL_INCOMPLETE_INFORMATION = 0x00000200};
enum {DEBUG_ENGALLOW_READ_ONLY_BREAKPOINTS = 0x00000400};
enum {DEBUG_ENGSYNCHRONIZE_BREAKPOINTS     = 0x00000800};
enum {DEBUG_ENGDISALLOW_SHELL_COMMANDS     = 0x00001000};
enum {DEBUG_ENGKD_QUIET_MODE               = 0x00002000};
enum {DEBUG_ENGDISABLE_MANAGED_SUPPORT     = 0x00004000};
enum {DEBUG_ENGDISABLE_MODULE_SYMBOL_LOAD  = 0x00008000};
enum {DEBUG_ENGDISABLE_EXECUTION_COMMANDS  = 0x00010000};
enum {DEBUG_ENGDISALLOW_IMAGE_FILE_MAPPING = 0x00020000};
enum {DEBUG_ENGPREFER_DML                  = 0x00040000};
enum {DEBUG_ENGDISABLESQM                  = 0x00080000};
enum {DEBUG_ENGDISABLE_STEPLINES_OPTIONS   = 0x00200000};
enum {DEBUG_ENGDEBUGGING_SENSITIVE_DATA    = 0x00400000};
enum {DEBUG_ENGPREFER_TRACE_FILES          = 0x00800000};
enum {DEBUG_ENGALL                         = 0x00EFFFFF};
enum {DEBUG_ANY_ID = 0xffffffff};
typedef struct _DEBUG_STACK_FRAME
{
    unsigned __int64 InstructionOffset;
    unsigned __int64 ReturnOffset;
    unsigned __int64 FrameOffset;
    unsigned __int64 StackOffset;
    unsigned __int64 FuncTableEntry;
    unsigned __int64 Params[4];
    unsigned __int64 Reserved[6];
    BOOL    Virtual;
    unsigned long   FrameNumber;
} DEBUG_STACK_FRAME, *PDEBUG_STACK_FRAME;
enum {DBG_FRAME_DEFAULT                = 0};
enum {DBG_FRAME_IGNORE_INLINE = 0xFFFFFFFF};
typedef struct _DEBUG_STACK_FRAME_EX
{
    // First DEBUG_STACK_FRAME structure
    unsigned __int64 InstructionOffset;
    unsigned __int64 ReturnOffset;
    unsigned __int64 FrameOffset;
    unsigned __int64 StackOffset;
    unsigned __int64 FuncTableEntry;
    unsigned __int64 Params[4];
    unsigned __int64 Reserved[6];
    BOOL    Virtual;
    unsigned long   FrameNumber;

    // Extended DEBUG_STACK_FRAME fields.
    unsigned long InlineFrameContext;
    unsigned long Reserved1; // For alignment purpose.
} DEBUG_STACK_FRAME_EX, *PDEBUG_STACK_FRAME_EX;
enum {STACK_FRAME_TYPE_INIT   = 0x00};
enum {STACK_FRAME_TYPE_STACK  = 0x01};
enum {STACK_FRAME_TYPE_INLINE = 0x02};
enum {STACK_FRAME_TYPE_RA     = 0x80};
enum {STACK_FRAME_TYPE_IGNORE = 0xFF};
typedef struct _STACK_SRC_INFO
{
    const wchar_t* ImagePath;
    const wchar_t* ModuleName;
    const wchar_t* Function;
    unsigned long Displacement;
    unsigned long Row;
    unsigned long Column;
} STACK_SRC_INFO, *PSTACK_SRC_INFO;
typedef struct _STACK_SYM_FRAME_INFO
{
    DEBUG_STACK_FRAME_EX StackFrameEx;
    STACK_SRC_INFO       SrcInfo;
} STACK_SYM_FRAME_INFO, *PSTACK_SYM_FRAME_INFO;
enum {DEBUG_STACK_ARGUMENTS               = 0x00000001};
enum {DEBUG_STACK_FUNCTION_INFO           = 0x00000002};
enum {DEBUG_STACK_SOURCE_LINE             = 0x00000004};
enum {DEBUG_STACK_FRAME_ADDRESSES         = 0x00000008};
enum {DEBUG_STACK_COLUMN_NAMES            = 0x00000010};
enum {DEBUG_STACK_NONVOLATILE_REGISTERS   = 0x00000020};
enum {DEBUG_STACK_FRAME_NUMBERS           = 0x00000040};
enum {DEBUG_STACK_PARAMETERS              = 0x00000080};
enum {DEBUG_STACK_FRAME_ADDRESSES_RA_ONLY = 0x00000100};
enum {DEBUG_STACK_FRAME_MEMORY_USAGE      = 0x00000200};
enum {DEBUG_STACK_PARAMETERS_NEWLINE      = 0x00000400};
enum {DEBUG_STACK_DML                     = 0x00000800};
enum {DEBUG_STACK_FRAME_OFFSETS           = 0x00001000};
enum {DEBUG_STACK_PROVIDER                = 0x00002000};
enum {DEBUG_STACK_FRAME_ARCH              = 0x00004000};
enum {DEBUG_CLASS_UNINITIALIZED = 0};
enum {DEBUG_CLASS_KERNEL        = 1};
enum {DEBUG_CLASS_USER_WINDOWS  = 2};
enum {DEBUG_CLASS_IMAGE_FILE    = 3};
enum {DEBUG_DUMP_SMALL      = 1024};
enum {DEBUG_DUMP_DEFAULT    = 1025};
enum {DEBUG_DUMP_FULL       = 1026};
enum {DEBUG_DUMP_IMAGE_FILE = 1027};
enum {DEBUG_DUMP_TRACE_LOG  = 1028};
enum {DEBUG_DUMP_WINDOWS_CE = 1029};
enum {DEBUG_DUMP_ACTIVE     = 1030};
enum {DEBUG_KERNEL_CONNECTION     = 0};
enum {DEBUG_KERNEL_LOCAL          = 1};
enum {DEBUG_KERNEL_EXDI_DRIVER    = 2};
enum {DEBUG_KERNEL_IDNA           = 3};
enum {DEBUG_KERNEL_INSTALL_DRIVER = 4};
enum {DEBUG_KERNEL_REPT           = 5};
enum {DEBUG_USER_WINDOWS_PROCESS         = 0};
enum {DEBUG_USER_WINDOWS_PROCESS_SERVER  = 1};
enum {DEBUG_USER_WINDOWS_IDNA            = 2};
enum {DEBUG_USER_WINDOWS_REPT            = 3};
enum {DEBUG_EXTENSION_AT_ENGINE = 0x00000000};
enum {DEBUG_EXECUTE_DEFAULT    = 0x00000000};
enum {DEBUG_EXECUTE_ECHO       = 0x00000001};
enum {DEBUG_EXECUTE_NOT_LOGGED = 0x00000002};
enum {DEBUG_EXECUTE_NO_REPEAT  = 0x00000004};
enum {DEBUG_EXECUTE_USER_TYPED  = 0x00000008};
enum {DEBUG_EXECUTE_USER_CLICKED  = 0x00000010};
enum {DEBUG_EXECUTE_EXTENSION  = 0x00000020};
enum {DEBUG_EXECUTE_INTERNAL  = 0x00000040};
enum {DEBUG_EXECUTE_SCRIPT  = 0x00000080};
enum {DEBUG_EXECUTE_TOOLBAR  = 0x00000100};
enum {DEBUG_EXECUTE_MENU  = 0x00000200};
enum {DEBUG_EXECUTE_HOTKEY  = 0x00000400};
enum {DEBUG_EXECUTE_EVENT  = 0x00000800};
enum {DEBUG_FILTER_CREATE_THREAD       = 0x00000000};
enum {DEBUG_FILTER_EXIT_THREAD         = 0x00000001};
enum {DEBUG_FILTER_CREATE_PROCESS      = 0x00000002};
enum {DEBUG_FILTER_EXIT_PROCESS        = 0x00000003};
enum {DEBUG_FILTER_LOAD_MODULE         = 0x00000004};
enum {DEBUG_FILTER_UNLOAD_MODULE       = 0x00000005};
enum {DEBUG_FILTER_SYSTEM_ERROR        = 0x00000006};
enum {DEBUG_FILTER_INITIAL_BREAKPOINT  = 0x00000007};
enum {DEBUG_FILTER_INITIAL_MODULE_LOAD = 0x00000008};
enum {DEBUG_FILTER_DEBUGGEE_OUTPUT     = 0x00000009};
enum {DEBUG_FILTER_BREAK               = 0x00000000};
enum {DEBUG_FILTER_SECOND_CHANCE_BREAK = 0x00000001};
enum {DEBUG_FILTER_OUTPUT              = 0x00000002};
enum {DEBUG_FILTER_IGNORE              = 0x00000003};
enum {DEBUG_FILTER_REMOVE              = 0x00000004};
enum {DEBUG_FILTER_GO_HANDLED          = 0x00000000};
enum {DEBUG_FILTER_GO_NOT_HANDLED      = 0x00000001};
typedef struct _DEBUG_SPECIFIC_FILTER_PARAMETERS
{
    unsigned long ExecutionOption;
    unsigned long ContinueOption;
    unsigned long TextSize;
    unsigned long CommandSize;
    // If ArgumentSize is zero this filter does
    // not have an argument.  An empty argument for
    // a filter which does have an argument will take
    // one byte for the terminator.
    unsigned long ArgumentSize;
} DEBUG_SPECIFIC_FILTER_PARAMETERS, *PDEBUG_SPECIFIC_FILTER_PARAMETERS;
typedef struct _DEBUG_EXCEPTION_FILTER_PARAMETERS
{
    unsigned long ExecutionOption;
    unsigned long ContinueOption;
    unsigned long TextSize;
    unsigned long CommandSize;
    unsigned long SecondCommandSize;
    unsigned long ExceptionCode;
} DEBUG_EXCEPTION_FILTER_PARAMETERS, *PDEBUG_EXCEPTION_FILTER_PARAMETERS;
enum {DEBUG_WAIT_DEFAULT = 0x00000000};
typedef struct _DEBUG_LAST_EVENT_INFO_BREAKPOINT
{
    unsigned long Id;
} DEBUG_LAST_EVENT_INFO_BREAKPOINT, *PDEBUG_LAST_EVENT_INFO_BREAKPOINT;
typedef struct _DEBUG_LAST_EVENT_INFO_EXCEPTION
{
    EXCEPTION_RECORD64 ExceptionRecord;
    unsigned long FirstChance;
} DEBUG_LAST_EVENT_INFO_EXCEPTION, *PDEBUG_LAST_EVENT_INFO_EXCEPTION;
typedef struct _DEBUG_LAST_EVENT_INFO_EXIT_THREAD
{
    unsigned long ExitCode;
} DEBUG_LAST_EVENT_INFO_EXIT_THREAD, *PDEBUG_LAST_EVENT_INFO_EXIT_THREAD;
typedef struct _DEBUG_LAST_EVENT_INFO_EXIT_PROCESS
{
    unsigned long ExitCode;
} DEBUG_LAST_EVENT_INFO_EXIT_PROCESS, *PDEBUG_LAST_EVENT_INFO_EXIT_PROCESS;
typedef struct _DEBUG_LAST_EVENT_INFO_LOAD_MODULE
{
    unsigned __int64 Base;
} DEBUG_LAST_EVENT_INFO_LOAD_MODULE, *PDEBUG_LAST_EVENT_INFO_LOAD_MODULE;
typedef struct _DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE
{
    unsigned __int64 Base;
} DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE, *PDEBUG_LAST_EVENT_INFO_UNLOAD_MODULE;
typedef struct _DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR
{
    unsigned long Error;
    unsigned long Level;
} DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR, *PDEBUG_LAST_EVENT_INFO_SYSTEM_ERROR;
typedef struct _DEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION
{
    unsigned long Kind;
    unsigned long DataSize;
    unsigned __int64 Address;

    //
    // (Kind) Specific DataSAFEARRAY(VARIANT) (e.g.: an EXCEPTION_RECORD64 or another definition given by
    //                                a specific platform service)
    //
} DEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION, *PDEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION;
enum {DEBUG_VALUE_INVALID      = 0};
enum {DEBUG_VALUE_INT8         = 1};
enum {DEBUG_VALUE_INT16        = 2};
enum {DEBUG_VALUE_INT32        = 3};
enum {DEBUG_VALUE_INT64        = 4};
enum {DEBUG_VALUE_FLOAT32      = 5};
enum {DEBUG_VALUE_FLOAT64      = 6};
enum {DEBUG_VALUE_FLOAT80      = 7};
enum {DEBUG_VALUE_FLOAT82      = 8};
enum {DEBUG_VALUE_FLOAT128     = 9};
enum {DEBUG_VALUE_VECTOR64     = 10};
enum {DEBUG_VALUE_VECTOR128    = 11};
enum {DEBUG_VALUE_TYPES        = 12};
typedef struct _DEBUG_VALUE
{
    union _u
    {
        UCHAR I8;
        USHORT I16;
        unsigned long I32;
        struct _I64
        {
            // Extra NAT indicator for IA64
            // integer registers.  NAT will
            // always be false for other CPUs.
            unsigned __int64 I64;
            BOOL Nat;
        } I64;
        float F32;
        double F64;
        UCHAR F80Bytes[10];
        UCHAR F82Bytes[11];
        UCHAR F128Bytes[16];
        // Vector interpretations.  The actual number
        // of valid elements depends on the vector length.
        UCHAR VI8[16];
        USHORT VI16[8];
        unsigned long VI32[4];
        unsigned __int64 VI64[2];
        float VF32[4];
        double VF64[2];
        struct
        {
            unsigned long LowPart;
            unsigned long HighPart;
        } I64Parts32;
        struct
        {
            unsigned __int64 LowPart;
            __int64 HighPart;
        } F128Parts64;
        // Allows raw byte access to content.  Array
        // can be indexed for as much data as Type
        // describes.  This array also serves to pad
        // the structure out to 32 bytes and reserves
        // space for future members.
        UCHAR RawBytes[24];
    } u;
    unsigned long TailOfRawBytes;
  unsigned long Type;
} DEBUG_VALUE, *PDEBUG_VALUE;
///////////////////////////////////////////////////////////
[
	object,
	uuid(5182e668-105e-416e-ad92-24ef800424ba),
	helpstring("IDebugControl")
]
interface IDebugControl : IUnknown {
	HRESULT GetInterrupt(  );
	HRESULT SetInterrupt(  unsigned long Flags );
	HRESULT GetInterruptTimeout(  unsigned long* Seconds );
	HRESULT SetInterruptTimeout(  unsigned long Seconds );
	HRESULT GetLogFile(  char* Buffer, unsigned long BufferSize, unsigned long* FileSize, bool* Append );
	HRESULT OpenLogFile(  const char* File, BOOL Append );
	HRESULT CloseLogFile(  );
	HRESULT GetLogMask(  unsigned long* Mask );
	HRESULT SetLogMask(  unsigned long Mask );
	HRESULT Input(  char* Buffer, unsigned long BufferSize, unsigned long* InputSize );
	HRESULT ReturnInput(  const char* Buffer );
	HRESULT Output(  unsigned long Mask, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputVaList(  unsigned long Mask, const char* Format, char* Args );
	HRESULT ControlledOutput(  unsigned long OutputControl, unsigned long Mask, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT ControlledOutputVaList(  unsigned long OutputControl, unsigned long Mask, const char* Format, char* Args );
	HRESULT OutputPrompt(  unsigned long OutputControl, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputPromptVaList(  unsigned long OutputControl, const char* Format, char* Args );
	HRESULT GetPromptText(  char* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT OutputCurrentState(  unsigned long OutputControl, unsigned long Flags );
	HRESULT OutputVersionInformation(  unsigned long OutputControl );
	HRESULT GetNotifyEventHandle(  unsigned __int64* Handle );
	HRESULT SetNotifyEventHandle(  unsigned __int64 Handle );
	HRESULT Assemble(  unsigned __int64 Offset, const char* Instr, unsigned __int64* EndOffset );
	HRESULT Disassemble(  unsigned __int64 Offset, unsigned long Flags, char* Buffer, unsigned long BufferSize, unsigned long* DisassemblySize, unsigned __int64* EndOffset );
	HRESULT GetDisassembleEffectiveOffset(  unsigned __int64* Offset );
	HRESULT OutputDisassembly(  unsigned long OutputControl, unsigned __int64 Offset, unsigned long Flags, unsigned __int64* EndOffset );
	HRESULT OutputDisassemblyLines(  unsigned long OutputControl, unsigned long PreviousLines, unsigned long TotalLines, unsigned __int64 Offset, unsigned long Flags, unsigned long* OffsetLine, unsigned __int64* StartOffset, unsigned __int64* EndOffset, unsigned __int64* LineOffsets );
	HRESULT GetNearInstruction(  unsigned __int64 Offset, LONG Delta, unsigned __int64* NearOffset );
	HRESULT GetStackTrace(  unsigned __int64 FrameOffset, unsigned __int64 StackOffset, unsigned __int64 InstructionOffset,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, unsigned long* FramesFilled );
	HRESULT GetReturnOffset(  unsigned __int64* Offset );
	HRESULT OutputStackTrace(  unsigned long OutputControl,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, unsigned long Flags );
	HRESULT GetDebuggeeType(  unsigned long* Class, unsigned long* Qualifier );
	HRESULT GetActualProcessorType(  unsigned long* Type );
	HRESULT GetExecutingProcessorType(  unsigned long* Type );
	HRESULT GetNumberPossibleExecutingProcessorTypes(  unsigned long* Number );
	HRESULT GetPossibleExecutingProcessorTypes(  unsigned long Start, unsigned long Count, unsigned long* Types );
	HRESULT GetNumberProcessors(  unsigned long* Number );
	HRESULT GetSystemVersion(  unsigned long* PlatformId, unsigned long* Major, unsigned long* Minor, char* ServicePackString, unsigned long ServicePackStringSize, unsigned long* ServicePackStringUsed, unsigned long* ServicePackNumber, char* BuildString, unsigned long BuildStringSize, unsigned long* BuildStringUsed );
	HRESULT GetPageSize(  unsigned long* Size );
	HRESULT IsPointer64Bit(  );
	HRESULT ReadBugCheckData(  unsigned long* Code, unsigned __int64* Arg1, unsigned __int64* Arg2, unsigned __int64* Arg3, unsigned __int64* Arg4 );
	HRESULT GetNumberSupportedProcessorTypes(  unsigned long* Number );
	HRESULT GetSupportedProcessorTypes(  unsigned long Start, unsigned long Count, unsigned long* Types );
	HRESULT GetProcessorTypeNames(  unsigned long Type, char* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, char* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetEffectiveProcessorType(  unsigned long* Type );
	HRESULT SetEffectiveProcessorType(  unsigned long Type );
	HRESULT GetExecutionStatus(  unsigned long* Status );
	HRESULT SetExecutionStatus(  unsigned long Status );
	HRESULT GetCodeLevel(  unsigned long* Level );
	HRESULT SetCodeLevel(  unsigned long Level );
	HRESULT GetEngineOptions(  unsigned long* Options );
	HRESULT AddEngineOptions(  unsigned long Options );
	HRESULT RemoveEngineOptions(  unsigned long Options );
	HRESULT SetEngineOptions(  unsigned long Options );
	HRESULT GetSystemErrorControl(  unsigned long* OutputLevel, unsigned long* BreakLevel );
	HRESULT SetSystemErrorControl(  unsigned long OutputLevel, unsigned long BreakLevel );
	HRESULT GetTextMacro(  unsigned long Slot, char* Buffer, unsigned long BufferSize, unsigned long* MacroSize );
	HRESULT SetTextMacro(  unsigned long Slot, const char* Macro );
	HRESULT GetRadix(  unsigned long* Radix );
	HRESULT SetRadix(  unsigned long Radix );
	HRESULT Evaluate(  const char* Expression, unsigned long DesiredType, PDEBUG_VALUE Value, unsigned long* RemainderIndex );
	HRESULT CoerceValue(  PDEBUG_VALUE In, unsigned long OutType, PDEBUG_VALUE Out );
	HRESULT CoerceValues(  unsigned long Count, PDEBUG_VALUE In, unsigned long* OutTypes, PDEBUG_VALUE Out );
	HRESULT Execute(  unsigned long OutputControl, const char* Command, unsigned long Flags );
	HRESULT ExecuteCommandFile(  unsigned long OutputControl, const char* CommandFile, unsigned long Flags );
	HRESULT GetNumberBreakpoints(  unsigned long* Number );
	HRESULT GetBreakpointByIndex(  unsigned long Index, IDebugBreakpoint** Bp );
	HRESULT GetBreakpointById(  unsigned long Id, IDebugBreakpoint** Bp );
	HRESULT GetBreakpointParameters(  unsigned long Count, unsigned long* Ids, unsigned long Start, PDEBUG_BREAKPOINT_PARAMETERS Params );
	HRESULT AddBreakpoint(  unsigned long Type, unsigned long DesiredId, IDebugBreakpoint** Bp );
	HRESULT RemoveBreakpoint(  IDebugBreakpoint* Bp );
	HRESULT AddExtension(  const char* Path, unsigned long Flags, unsigned __int64* Handle );
	HRESULT RemoveExtension(  unsigned __int64 Handle );
	HRESULT GetExtensionByPath(  const char* Path, unsigned __int64* Handle );
	HRESULT CallExtension(  unsigned __int64 Handle, const char* Function, const char* Arguments );
	HRESULT GetExtensionFunction(  unsigned __int64 Handle, const char* FuncName, void** Function );
	HRESULT GetWindbgExtensionApis32(  PWINDBG_EXTENSION_APIS32 Api );
	HRESULT GetWindbgExtensionApis64(  PWINDBG_EXTENSION_APIS64 Api );
	HRESULT GetNumberEventFilters(  unsigned long* SpecificEvents, unsigned long* SpecificExceptions, unsigned long* ArbitraryExceptions );
	HRESULT GetEventFilterText(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT GetEventFilterCommand(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetEventFilterCommand(  unsigned long Index, const char* Command );
	HRESULT GetSpecificFilterParameters(  unsigned long Start, unsigned long Count, PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT SetSpecificFilterParameters(  unsigned long Start, unsigned long Count, PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT GetSpecificFilterArgument(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* ArgumentSize );
	HRESULT SetSpecificFilterArgument(  unsigned long Index, const char* Argument );
	HRESULT GetExceptionFilterParameters(  unsigned long Count, unsigned long* Codes, unsigned long Start, PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT SetExceptionFilterParameters(  unsigned long Count, PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT GetExceptionFilterSecondCommand(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetExceptionFilterSecondCommand(  unsigned long Index, const char* Command );
	HRESULT WaitForEvent(  unsigned long Flags, unsigned long Timeout );
	HRESULT GetLastEventInformation(  unsigned long* Type, unsigned long* ProcessId, unsigned long* ThreadId, PVOID ExtraInformation, unsigned long ExtraInformationSize, unsigned long* ExtraInformationUsed, char* Description, unsigned long DescriptionSize, unsigned long* DescriptionUsed );
};

enum {DEBUG_OUT_TEXT_REPL_DEFAULT = 0x00000000};
///////////////////////////////////////////////////////////
[
	object,
	uuid(d4366723-44df-4bed-8c7e-4c05424f4588),
	helpstring("IDebugControl2")
]
interface IDebugControl2 : IUnknown {
	HRESULT GetInterrupt(  );
	HRESULT SetInterrupt(  unsigned long Flags );
	HRESULT GetInterruptTimeout(  unsigned long* Seconds );
	HRESULT SetInterruptTimeout(  unsigned long Seconds );
	HRESULT GetLogFile(  char* Buffer, unsigned long BufferSize, unsigned long* FileSize, bool* Append );
	HRESULT OpenLogFile(  const char* File, BOOL Append );
	HRESULT CloseLogFile(  );
	HRESULT GetLogMask(  unsigned long* Mask );
	HRESULT SetLogMask(  unsigned long Mask );
	HRESULT Input(  char* Buffer, unsigned long BufferSize, unsigned long* InputSize );
	HRESULT ReturnInput(  const char* Buffer );
	HRESULT Output(  unsigned long Mask, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputVaList(  unsigned long Mask, const char* Format, char* Args );
	HRESULT ControlledOutput(  unsigned long OutputControl, unsigned long Mask, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT ControlledOutputVaList(  unsigned long OutputControl, unsigned long Mask, const char* Format, char* Args );
	HRESULT OutputPrompt(  unsigned long OutputControl, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputPromptVaList(  unsigned long OutputControl, const char* Format, char* Args );
	HRESULT GetPromptText(  char* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT OutputCurrentState(  unsigned long OutputControl, unsigned long Flags );
	HRESULT OutputVersionInformation(  unsigned long OutputControl );
	HRESULT GetNotifyEventHandle(  unsigned __int64* Handle );
	HRESULT SetNotifyEventHandle(  unsigned __int64 Handle );
	HRESULT Assemble(  unsigned __int64 Offset, const char* Instr, unsigned __int64* EndOffset );
	HRESULT Disassemble(  unsigned __int64 Offset, unsigned long Flags, char* Buffer, unsigned long BufferSize, unsigned long* DisassemblySize, unsigned __int64* EndOffset );
	HRESULT GetDisassembleEffectiveOffset(  unsigned __int64* Offset );
	HRESULT OutputDisassembly(  unsigned long OutputControl, unsigned __int64 Offset, unsigned long Flags, unsigned __int64* EndOffset );
	HRESULT OutputDisassemblyLines(  unsigned long OutputControl, unsigned long PreviousLines, unsigned long TotalLines, unsigned __int64 Offset, unsigned long Flags, unsigned long* OffsetLine, unsigned __int64* StartOffset, unsigned __int64* EndOffset, unsigned __int64* LineOffsets );
	HRESULT GetNearInstruction(  unsigned __int64 Offset, LONG Delta, unsigned __int64* NearOffset );
	HRESULT GetStackTrace(  unsigned __int64 FrameOffset, unsigned __int64 StackOffset, unsigned __int64 InstructionOffset,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, unsigned long* FramesFilled );
	HRESULT GetReturnOffset(  unsigned __int64* Offset );
	HRESULT OutputStackTrace(  unsigned long OutputControl,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, unsigned long Flags );
	HRESULT GetDebuggeeType(  unsigned long* Class, unsigned long* Qualifier );
	HRESULT GetActualProcessorType(  unsigned long* Type );
	HRESULT GetExecutingProcessorType(  unsigned long* Type );
	HRESULT GetNumberPossibleExecutingProcessorTypes(  unsigned long* Number );
	HRESULT GetPossibleExecutingProcessorTypes(  unsigned long Start, unsigned long Count, unsigned long* Types );
	HRESULT GetNumberProcessors(  unsigned long* Number );
	HRESULT GetSystemVersion(  unsigned long* PlatformId, unsigned long* Major, unsigned long* Minor, char* ServicePackString, unsigned long ServicePackStringSize, unsigned long* ServicePackStringUsed, unsigned long* ServicePackNumber, char* BuildString, unsigned long BuildStringSize, unsigned long* BuildStringUsed );
	HRESULT GetPageSize(  unsigned long* Size );
	HRESULT IsPointer64Bit(  );
	HRESULT ReadBugCheckData(  unsigned long* Code, unsigned __int64* Arg1, unsigned __int64* Arg2, unsigned __int64* Arg3, unsigned __int64* Arg4 );
	HRESULT GetNumberSupportedProcessorTypes(  unsigned long* Number );
	HRESULT GetSupportedProcessorTypes(  unsigned long Start, unsigned long Count, unsigned long* Types );
	HRESULT GetProcessorTypeNames(  unsigned long Type, char* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, char* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetEffectiveProcessorType(  unsigned long* Type );
	HRESULT SetEffectiveProcessorType(  unsigned long Type );
	HRESULT GetExecutionStatus(  unsigned long* Status );
	HRESULT SetExecutionStatus(  unsigned long Status );
	HRESULT GetCodeLevel(  unsigned long* Level );
	HRESULT SetCodeLevel(  unsigned long Level );
	HRESULT GetEngineOptions(  unsigned long* Options );
	HRESULT AddEngineOptions(  unsigned long Options );
	HRESULT RemoveEngineOptions(  unsigned long Options );
	HRESULT SetEngineOptions(  unsigned long Options );
	HRESULT GetSystemErrorControl(  unsigned long* OutputLevel, unsigned long* BreakLevel );
	HRESULT SetSystemErrorControl(  unsigned long OutputLevel, unsigned long BreakLevel );
	HRESULT GetTextMacro(  unsigned long Slot, char* Buffer, unsigned long BufferSize, unsigned long* MacroSize );
	HRESULT SetTextMacro(  unsigned long Slot, const char* Macro );
	HRESULT GetRadix(  unsigned long* Radix );
	HRESULT SetRadix(  unsigned long Radix );
	HRESULT Evaluate(  const char* Expression, unsigned long DesiredType, PDEBUG_VALUE Value, unsigned long* RemainderIndex );
	HRESULT CoerceValue(  PDEBUG_VALUE In, unsigned long OutType, PDEBUG_VALUE Out );
	HRESULT CoerceValues(  unsigned long Count, PDEBUG_VALUE In, unsigned long* OutTypes, PDEBUG_VALUE Out );
	HRESULT Execute(  unsigned long OutputControl, const char* Command, unsigned long Flags );
	HRESULT ExecuteCommandFile(  unsigned long OutputControl, const char* CommandFile, unsigned long Flags );
	HRESULT GetNumberBreakpoints(  unsigned long* Number );
	HRESULT GetBreakpointByIndex(  unsigned long Index, IDebugBreakpoint** Bp );
	HRESULT GetBreakpointById(  unsigned long Id, IDebugBreakpoint** Bp );
	HRESULT GetBreakpointParameters(  unsigned long Count, unsigned long* Ids, unsigned long Start, PDEBUG_BREAKPOINT_PARAMETERS Params );
	HRESULT AddBreakpoint(  unsigned long Type, unsigned long DesiredId, IDebugBreakpoint** Bp );
	HRESULT RemoveBreakpoint(  IDebugBreakpoint* Bp );
	HRESULT AddExtension(  const char* Path, unsigned long Flags, unsigned __int64* Handle );
	HRESULT RemoveExtension(  unsigned __int64 Handle );
	HRESULT GetExtensionByPath(  const char* Path, unsigned __int64* Handle );
	HRESULT CallExtension(  unsigned __int64 Handle, const char* Function, const char* Arguments );
	HRESULT GetExtensionFunction(  unsigned __int64 Handle, const char* FuncName, void** Function );
	HRESULT GetWindbgExtensionApis32(  PWINDBG_EXTENSION_APIS32 Api );
	HRESULT GetWindbgExtensionApis64(  PWINDBG_EXTENSION_APIS64 Api );
	HRESULT GetNumberEventFilters(  unsigned long* SpecificEvents, unsigned long* SpecificExceptions, unsigned long* ArbitraryExceptions );
	HRESULT GetEventFilterText(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT GetEventFilterCommand(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetEventFilterCommand(  unsigned long Index, const char* Command );
	HRESULT GetSpecificFilterParameters(  unsigned long Start, unsigned long Count, PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT SetSpecificFilterParameters(  unsigned long Start, unsigned long Count, PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT GetSpecificFilterArgument(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* ArgumentSize );
	HRESULT SetSpecificFilterArgument(  unsigned long Index, const char* Argument );
	HRESULT GetExceptionFilterParameters(  unsigned long Count, unsigned long* Codes, unsigned long Start, PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT SetExceptionFilterParameters(  unsigned long Count, PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT GetExceptionFilterSecondCommand(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetExceptionFilterSecondCommand(  unsigned long Index, const char* Command );
	HRESULT WaitForEvent(  unsigned long Flags, unsigned long Timeout );
	HRESULT GetLastEventInformation(  unsigned long* Type, unsigned long* ProcessId, unsigned long* ThreadId, PVOID ExtraInformation, unsigned long ExtraInformationSize, unsigned long* ExtraInformationUsed, char* Description, unsigned long DescriptionSize, unsigned long* DescriptionUsed );
	HRESULT GetCurrentTimeDate(  unsigned long* TimeDate );
	HRESULT GetCurrentSystemUpTime(  unsigned long* UpTime );
	HRESULT GetDumpFormatFlags(  unsigned long* FormatFlags );
	HRESULT GetNumberTextReplacements(  unsigned long* NumRepl );
	HRESULT GetTextReplacement(  const char* SrcText, unsigned long Index, char* SrcBuffer, unsigned long SrcBufferSize, unsigned long* SrcSize, char* DstBuffer, unsigned long DstBufferSize, unsigned long* DstSize );
	HRESULT SetTextReplacement(  const char* SrcText, const char* DstText );
	HRESULT RemoveTextReplacements(  );
	HRESULT OutputTextReplacements(  unsigned long OutputControl, unsigned long Flags );
};

enum {DEBUG_ASMDEFAULT             = 0x00000000};
enum {DEBUG_ASMVERBOSE             = 0x00000001};
enum {DEBUG_ASMNO_CODE_BYTES       = 0x00000002};
enum {DEBUG_ASMIGNORE_OUTPUT_WIDTH = 0x00000004};
enum {DEBUG_ASMSOURCE_LINE_NUMBER  = 0x00000008};
enum {DEBUG_EXPR_MASM      = 0x00000000};
enum {DEBUG_EXPR_CPLUSPLUS = 0x00000001};
enum {DEBUG_EINDEX_NAME = 0x00000000};
enum {DEBUG_EINDEX_FROM_START   = 0x00000000};
enum {DEBUG_EINDEX_FROM_END     = 0x00000001};
enum {DEBUG_EINDEX_FROM_CURRENT = 0x00000002};
///////////////////////////////////////////////////////////
[
	object,
	uuid(7df74a86-b03f-407f-90ab-a20dadcead08),
	helpstring("IDebugControl3")
]
interface IDebugControl3 : IUnknown {
	HRESULT GetInterrupt(  );
	HRESULT SetInterrupt(  unsigned long Flags );
	HRESULT GetInterruptTimeout(  unsigned long* Seconds );
	HRESULT SetInterruptTimeout(  unsigned long Seconds );
	HRESULT GetLogFile(  char* Buffer, unsigned long BufferSize, unsigned long* FileSize, bool* Append );
	HRESULT OpenLogFile(  const char* File, BOOL Append );
	HRESULT CloseLogFile(  );
	HRESULT GetLogMask(  unsigned long* Mask );
	HRESULT SetLogMask(  unsigned long Mask );
	HRESULT Input(  char* Buffer, unsigned long BufferSize, unsigned long* InputSize );
	HRESULT ReturnInput(  const char* Buffer );
	HRESULT Output(  unsigned long Mask, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputVaList(  unsigned long Mask, const char* Format, char* Args );
	HRESULT ControlledOutput(  unsigned long OutputControl, unsigned long Mask, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT ControlledOutputVaList(  unsigned long OutputControl, unsigned long Mask, const char* Format, char* Args );
	HRESULT OutputPrompt(  unsigned long OutputControl, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputPromptVaList(  unsigned long OutputControl, const char* Format, char* Args );
	HRESULT GetPromptText(  char* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT OutputCurrentState(  unsigned long OutputControl, unsigned long Flags );
	HRESULT OutputVersionInformation(  unsigned long OutputControl );
	HRESULT GetNotifyEventHandle(  unsigned __int64* Handle );
	HRESULT SetNotifyEventHandle(  unsigned __int64 Handle );
	HRESULT Assemble(  unsigned __int64 Offset, const char* Instr, unsigned __int64* EndOffset );
	HRESULT Disassemble(  unsigned __int64 Offset, unsigned long Flags, char* Buffer, unsigned long BufferSize, unsigned long* DisassemblySize, unsigned __int64* EndOffset );
	HRESULT GetDisassembleEffectiveOffset(  unsigned __int64* Offset );
	HRESULT OutputDisassembly(  unsigned long OutputControl, unsigned __int64 Offset, unsigned long Flags, unsigned __int64* EndOffset );
	HRESULT OutputDisassemblyLines(  unsigned long OutputControl, unsigned long PreviousLines, unsigned long TotalLines, unsigned __int64 Offset, unsigned long Flags, unsigned long* OffsetLine, unsigned __int64* StartOffset, unsigned __int64* EndOffset, unsigned __int64* LineOffsets );
	HRESULT GetNearInstruction(  unsigned __int64 Offset, LONG Delta, unsigned __int64* NearOffset );
	HRESULT GetStackTrace(  unsigned __int64 FrameOffset, unsigned __int64 StackOffset, unsigned __int64 InstructionOffset,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, unsigned long* FramesFilled );
	HRESULT GetReturnOffset(  unsigned __int64* Offset );
	HRESULT OutputStackTrace(  unsigned long OutputControl,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, unsigned long Flags );
	HRESULT GetDebuggeeType(  unsigned long* Class, unsigned long* Qualifier );
	HRESULT GetActualProcessorType(  unsigned long* Type );
	HRESULT GetExecutingProcessorType(  unsigned long* Type );
	HRESULT GetNumberPossibleExecutingProcessorTypes(  unsigned long* Number );
	HRESULT GetPossibleExecutingProcessorTypes(  unsigned long Start, unsigned long Count, unsigned long* Types );
	HRESULT GetNumberProcessors(  unsigned long* Number );
	HRESULT GetSystemVersion(  unsigned long* PlatformId, unsigned long* Major, unsigned long* Minor, char* ServicePackString, unsigned long ServicePackStringSize, unsigned long* ServicePackStringUsed, unsigned long* ServicePackNumber, char* BuildString, unsigned long BuildStringSize, unsigned long* BuildStringUsed );
	HRESULT GetPageSize(  unsigned long* Size );
	HRESULT IsPointer64Bit(  );
	HRESULT ReadBugCheckData(  unsigned long* Code, unsigned __int64* Arg1, unsigned __int64* Arg2, unsigned __int64* Arg3, unsigned __int64* Arg4 );
	HRESULT GetNumberSupportedProcessorTypes(  unsigned long* Number );
	HRESULT GetSupportedProcessorTypes(  unsigned long Start, unsigned long Count, unsigned long* Types );
	HRESULT GetProcessorTypeNames(  unsigned long Type, char* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, char* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetEffectiveProcessorType(  unsigned long* Type );
	HRESULT SetEffectiveProcessorType(  unsigned long Type );
	HRESULT GetExecutionStatus(  unsigned long* Status );
	HRESULT SetExecutionStatus(  unsigned long Status );
	HRESULT GetCodeLevel(  unsigned long* Level );
	HRESULT SetCodeLevel(  unsigned long Level );
	HRESULT GetEngineOptions(  unsigned long* Options );
	HRESULT AddEngineOptions(  unsigned long Options );
	HRESULT RemoveEngineOptions(  unsigned long Options );
	HRESULT SetEngineOptions(  unsigned long Options );
	HRESULT GetSystemErrorControl(  unsigned long* OutputLevel, unsigned long* BreakLevel );
	HRESULT SetSystemErrorControl(  unsigned long OutputLevel, unsigned long BreakLevel );
	HRESULT GetTextMacro(  unsigned long Slot, char* Buffer, unsigned long BufferSize, unsigned long* MacroSize );
	HRESULT SetTextMacro(  unsigned long Slot, const char* Macro );
	HRESULT GetRadix(  unsigned long* Radix );
	HRESULT SetRadix(  unsigned long Radix );
	HRESULT Evaluate(  const char* Expression, unsigned long DesiredType, PDEBUG_VALUE Value, unsigned long* RemainderIndex );
	HRESULT CoerceValue(  PDEBUG_VALUE In, unsigned long OutType, PDEBUG_VALUE Out );
	HRESULT CoerceValues(  unsigned long Count, PDEBUG_VALUE In, unsigned long* OutTypes, PDEBUG_VALUE Out );
	HRESULT Execute(  unsigned long OutputControl, const char* Command, unsigned long Flags );
	HRESULT ExecuteCommandFile(  unsigned long OutputControl, const char* CommandFile, unsigned long Flags );
	HRESULT GetNumberBreakpoints(  unsigned long* Number );
	HRESULT GetBreakpointByIndex(  unsigned long Index, IDebugBreakpoint** Bp );
	HRESULT GetBreakpointById(  unsigned long Id, IDebugBreakpoint** Bp );
	HRESULT GetBreakpointParameters(  unsigned long Count, unsigned long* Ids, unsigned long Start, PDEBUG_BREAKPOINT_PARAMETERS Params );
	HRESULT AddBreakpoint(  unsigned long Type, unsigned long DesiredId, IDebugBreakpoint** Bp );
	HRESULT RemoveBreakpoint(  IDebugBreakpoint* Bp );
	HRESULT AddExtension(  const char* Path, unsigned long Flags, unsigned __int64* Handle );
	HRESULT RemoveExtension(  unsigned __int64 Handle );
	HRESULT GetExtensionByPath(  const char* Path, unsigned __int64* Handle );
	HRESULT CallExtension(  unsigned __int64 Handle, const char* Function, const char* Arguments );
	HRESULT GetExtensionFunction(  unsigned __int64 Handle, const char* FuncName, void** Function );
	HRESULT GetWindbgExtensionApis32(  PWINDBG_EXTENSION_APIS32 Api );
	HRESULT GetWindbgExtensionApis64(  PWINDBG_EXTENSION_APIS64 Api );
	HRESULT GetNumberEventFilters(  unsigned long* SpecificEvents, unsigned long* SpecificExceptions, unsigned long* ArbitraryExceptions );
	HRESULT GetEventFilterText(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT GetEventFilterCommand(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetEventFilterCommand(  unsigned long Index, const char* Command );
	HRESULT GetSpecificFilterParameters(  unsigned long Start, unsigned long Count, PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT SetSpecificFilterParameters(  unsigned long Start, unsigned long Count, PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT GetSpecificFilterArgument(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* ArgumentSize );
	HRESULT SetSpecificFilterArgument(  unsigned long Index, const char* Argument );
	HRESULT GetExceptionFilterParameters(  unsigned long Count, unsigned long* Codes, unsigned long Start, PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT SetExceptionFilterParameters(  unsigned long Count, PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT GetExceptionFilterSecondCommand(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetExceptionFilterSecondCommand(  unsigned long Index, const char* Command );
	HRESULT WaitForEvent(  unsigned long Flags, unsigned long Timeout );
	HRESULT GetLastEventInformation(  unsigned long* Type, unsigned long* ProcessId, unsigned long* ThreadId, PVOID ExtraInformation, unsigned long ExtraInformationSize, unsigned long* ExtraInformationUsed, char* Description, unsigned long DescriptionSize, unsigned long* DescriptionUsed );
	HRESULT GetCurrentTimeDate(  unsigned long* TimeDate );
	HRESULT GetCurrentSystemUpTime(  unsigned long* UpTime );
	HRESULT GetDumpFormatFlags(  unsigned long* FormatFlags );
	HRESULT GetNumberTextReplacements(  unsigned long* NumRepl );
	HRESULT GetTextReplacement(  const char* SrcText, unsigned long Index, char* SrcBuffer, unsigned long SrcBufferSize, unsigned long* SrcSize, char* DstBuffer, unsigned long DstBufferSize, unsigned long* DstSize );
	HRESULT SetTextReplacement(  const char* SrcText, const char* DstText );
	HRESULT RemoveTextReplacements(  );
	HRESULT OutputTextReplacements(  unsigned long OutputControl, unsigned long Flags );
	HRESULT GetAssemblyOptions(  unsigned long* Options );
	HRESULT AddAssemblyOptions(  unsigned long Options );
	HRESULT RemoveAssemblyOptions(  unsigned long Options );
	HRESULT SetAssemblyOptions(  unsigned long Options );
	HRESULT GetExpressionSyntax(  unsigned long* Flags );
	HRESULT SetExpressionSyntax(  unsigned long Flags );
	HRESULT SetExpressionSyntaxByName(  const char* AbbrevName );
	HRESULT GetNumberExpressionSyntaxes(  unsigned long* Number );
	HRESULT GetExpressionSyntaxNames(  unsigned long Index, char* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, char* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetNumberEvents(  unsigned long* Events );
	HRESULT GetEventIndexDescription(  unsigned long Index, unsigned long Which, char* Buffer, unsigned long BufferSize, unsigned long* DescSize );
	HRESULT GetCurrentEventIndex(  unsigned long* Index );
	HRESULT SetNextEventIndex(  unsigned long Relation, unsigned long Value, unsigned long* NextIndex );
};

enum {DEBUG_LOG_DEFAULT = 0x00000000};
enum {DEBUG_LOG_APPEND  = 0x00000001};
enum {DEBUG_LOG_UNICODE = 0x00000002};
enum {DEBUG_LOG_DML     = 0x00000004};
enum {DEBUG_SYSVERSTR_SERVICE_PACK = 0x00000000};
enum {DEBUG_SYSVERSTR_BUILD        = 0x00000001};
enum {DEBUG_MANAGED_DISABLED   = 0x00000000};
enum {DEBUG_MANAGED_ALLOWED    = 0x00000001};
enum {DEBUG_MANAGED_DLL_LOADED = 0x00000002};
enum {DEBUG_MANSTR_NONE               = 0x00000000};
enum {DEBUG_MANSTR_LOADED_SUPPORT_DLL = 0x00000001};
enum {DEBUG_MANSTR_LOAD_STATUS        = 0x00000002};
enum {DEBUG_MANRESET_DEFAULT  = 0x00000000};
enum {DEBUG_MANRESET_LOAD_DLL = 0x00000001};
///////////////////////////////////////////////////////////
[
	object,
	uuid(94e60ce9-9b41-4b19-9fc0-6d9eb35272b3),
	helpstring("IDebugControl4")
]
interface IDebugControl4 : IUnknown {
	HRESULT GetInterrupt(  );
	HRESULT SetInterrupt(  unsigned long Flags );
	HRESULT GetInterruptTimeout(  unsigned long* Seconds );
	HRESULT SetInterruptTimeout(  unsigned long Seconds );
	HRESULT GetLogFile(  char* Buffer, unsigned long BufferSize, unsigned long* FileSize, bool* Append );
	HRESULT OpenLogFile(  const char* File, BOOL Append );
	HRESULT CloseLogFile(  );
	HRESULT GetLogMask(  unsigned long* Mask );
	HRESULT SetLogMask(  unsigned long Mask );
	HRESULT Input(  char* Buffer, unsigned long BufferSize, unsigned long* InputSize );
	HRESULT ReturnInput(  const char* Buffer );
	HRESULT Output(  unsigned long Mask, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputVaList(  unsigned long Mask, const char* Format, char* Args );
	HRESULT ControlledOutput(  unsigned long OutputControl, unsigned long Mask, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT ControlledOutputVaList(  unsigned long OutputControl, unsigned long Mask, const char* Format, char* Args );
	HRESULT OutputPrompt(  unsigned long OutputControl, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputPromptVaList(  unsigned long OutputControl, const char* Format, char* Args );
	HRESULT GetPromptText(  char* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT OutputCurrentState(  unsigned long OutputControl, unsigned long Flags );
	HRESULT OutputVersionInformation(  unsigned long OutputControl );
	HRESULT GetNotifyEventHandle(  unsigned __int64* Handle );
	HRESULT SetNotifyEventHandle(  unsigned __int64 Handle );
	HRESULT Assemble(  unsigned __int64 Offset, const char* Instr, unsigned __int64* EndOffset );
	HRESULT Disassemble(  unsigned __int64 Offset, unsigned long Flags, char* Buffer, unsigned long BufferSize, unsigned long* DisassemblySize, unsigned __int64* EndOffset );
	HRESULT GetDisassembleEffectiveOffset(  unsigned __int64* Offset );
	HRESULT OutputDisassembly(  unsigned long OutputControl, unsigned __int64 Offset, unsigned long Flags, unsigned __int64* EndOffset );
	HRESULT OutputDisassemblyLines(  unsigned long OutputControl, unsigned long PreviousLines, unsigned long TotalLines, unsigned __int64 Offset, unsigned long Flags, unsigned long* OffsetLine, unsigned __int64* StartOffset, unsigned __int64* EndOffset, unsigned __int64* LineOffsets );
	HRESULT GetNearInstruction(  unsigned __int64 Offset, LONG Delta, unsigned __int64* NearOffset );
	HRESULT GetStackTrace(  unsigned __int64 FrameOffset, unsigned __int64 StackOffset, unsigned __int64 InstructionOffset,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, unsigned long* FramesFilled );
	HRESULT GetReturnOffset(  unsigned __int64* Offset );
	HRESULT OutputStackTrace(  unsigned long OutputControl,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, unsigned long Flags );
	HRESULT GetDebuggeeType(  unsigned long* Class, unsigned long* Qualifier );
	HRESULT GetActualProcessorType(  unsigned long* Type );
	HRESULT GetExecutingProcessorType(  unsigned long* Type );
	HRESULT GetNumberPossibleExecutingProcessorTypes(  unsigned long* Number );
	HRESULT GetPossibleExecutingProcessorTypes(  unsigned long Start, unsigned long Count, unsigned long* Types );
	HRESULT GetNumberProcessors(  unsigned long* Number );
	HRESULT GetSystemVersion(  unsigned long* PlatformId, unsigned long* Major, unsigned long* Minor, char* ServicePackString, unsigned long ServicePackStringSize, unsigned long* ServicePackStringUsed, unsigned long* ServicePackNumber, char* BuildString, unsigned long BuildStringSize, unsigned long* BuildStringUsed );
	HRESULT GetPageSize(  unsigned long* Size );
	HRESULT IsPointer64Bit(  );
	HRESULT ReadBugCheckData(  unsigned long* Code, unsigned __int64* Arg1, unsigned __int64* Arg2, unsigned __int64* Arg3, unsigned __int64* Arg4 );
	HRESULT GetNumberSupportedProcessorTypes(  unsigned long* Number );
	HRESULT GetSupportedProcessorTypes(  unsigned long Start, unsigned long Count, unsigned long* Types );
	HRESULT GetProcessorTypeNames(  unsigned long Type, char* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, char* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetEffectiveProcessorType(  unsigned long* Type );
	HRESULT SetEffectiveProcessorType(  unsigned long Type );
	HRESULT GetExecutionStatus(  unsigned long* Status );
	HRESULT SetExecutionStatus(  unsigned long Status );
	HRESULT GetCodeLevel(  unsigned long* Level );
	HRESULT SetCodeLevel(  unsigned long Level );
	HRESULT GetEngineOptions(  unsigned long* Options );
	HRESULT AddEngineOptions(  unsigned long Options );
	HRESULT RemoveEngineOptions(  unsigned long Options );
	HRESULT SetEngineOptions(  unsigned long Options );
	HRESULT GetSystemErrorControl(  unsigned long* OutputLevel, unsigned long* BreakLevel );
	HRESULT SetSystemErrorControl(  unsigned long OutputLevel, unsigned long BreakLevel );
	HRESULT GetTextMacro(  unsigned long Slot, char* Buffer, unsigned long BufferSize, unsigned long* MacroSize );
	HRESULT SetTextMacro(  unsigned long Slot, const char* Macro );
	HRESULT GetRadix(  unsigned long* Radix );
	HRESULT SetRadix(  unsigned long Radix );
	HRESULT Evaluate(  const char* Expression, unsigned long DesiredType, PDEBUG_VALUE Value, unsigned long* RemainderIndex );
	HRESULT CoerceValue(  PDEBUG_VALUE In, unsigned long OutType, PDEBUG_VALUE Out );
	HRESULT CoerceValues(  unsigned long Count, PDEBUG_VALUE In, unsigned long* OutTypes, PDEBUG_VALUE Out );
	HRESULT Execute(  unsigned long OutputControl, const char* Command, unsigned long Flags );
	HRESULT ExecuteCommandFile(  unsigned long OutputControl, const char* CommandFile, unsigned long Flags );
	HRESULT GetNumberBreakpoints(  unsigned long* Number );
	HRESULT GetBreakpointByIndex(  unsigned long Index, IDebugBreakpoint** Bp );
	HRESULT GetBreakpointById(  unsigned long Id, IDebugBreakpoint** Bp );
	HRESULT GetBreakpointParameters(  unsigned long Count, unsigned long* Ids, unsigned long Start, PDEBUG_BREAKPOINT_PARAMETERS Params );
	HRESULT AddBreakpoint(  unsigned long Type, unsigned long DesiredId, IDebugBreakpoint** Bp );
	HRESULT RemoveBreakpoint(  IDebugBreakpoint* Bp );
	HRESULT AddExtension(  const char* Path, unsigned long Flags, unsigned __int64* Handle );
	HRESULT RemoveExtension(  unsigned __int64 Handle );
	HRESULT GetExtensionByPath(  const char* Path, unsigned __int64* Handle );
	HRESULT CallExtension(  unsigned __int64 Handle, const char* Function, const char* Arguments );
	HRESULT GetExtensionFunction(  unsigned __int64 Handle, const char* FuncName, void** Function );
	HRESULT GetWindbgExtensionApis32(  PWINDBG_EXTENSION_APIS32 Api );
	HRESULT GetWindbgExtensionApis64(  PWINDBG_EXTENSION_APIS64 Api );
	HRESULT GetNumberEventFilters(  unsigned long* SpecificEvents, unsigned long* SpecificExceptions, unsigned long* ArbitraryExceptions );
	HRESULT GetEventFilterText(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT GetEventFilterCommand(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetEventFilterCommand(  unsigned long Index, const char* Command );
	HRESULT GetSpecificFilterParameters(  unsigned long Start, unsigned long Count, PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT SetSpecificFilterParameters(  unsigned long Start, unsigned long Count, PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT GetSpecificFilterArgument(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* ArgumentSize );
	HRESULT SetSpecificFilterArgument(  unsigned long Index, const char* Argument );
	HRESULT GetExceptionFilterParameters(  unsigned long Count, unsigned long* Codes, unsigned long Start, PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT SetExceptionFilterParameters(  unsigned long Count, PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT GetExceptionFilterSecondCommand(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetExceptionFilterSecondCommand(  unsigned long Index, const char* Command );
	HRESULT WaitForEvent(  unsigned long Flags, unsigned long Timeout );
	HRESULT GetLastEventInformation(  unsigned long* Type, unsigned long* ProcessId, unsigned long* ThreadId, PVOID ExtraInformation, unsigned long ExtraInformationSize, unsigned long* ExtraInformationUsed, char* Description, unsigned long DescriptionSize, unsigned long* DescriptionUsed );
	HRESULT GetCurrentTimeDate(  unsigned long* TimeDate );
	HRESULT GetCurrentSystemUpTime(  unsigned long* UpTime );
	HRESULT GetDumpFormatFlags(  unsigned long* FormatFlags );
	HRESULT GetNumberTextReplacements(  unsigned long* NumRepl );
	HRESULT GetTextReplacement(  const char* SrcText, unsigned long Index, char* SrcBuffer, unsigned long SrcBufferSize, unsigned long* SrcSize, char* DstBuffer, unsigned long DstBufferSize, unsigned long* DstSize );
	HRESULT SetTextReplacement(  const char* SrcText, const char* DstText );
	HRESULT RemoveTextReplacements(  );
	HRESULT OutputTextReplacements(  unsigned long OutputControl, unsigned long Flags );
	HRESULT GetAssemblyOptions(  unsigned long* Options );
	HRESULT AddAssemblyOptions(  unsigned long Options );
	HRESULT RemoveAssemblyOptions(  unsigned long Options );
	HRESULT SetAssemblyOptions(  unsigned long Options );
	HRESULT GetExpressionSyntax(  unsigned long* Flags );
	HRESULT SetExpressionSyntax(  unsigned long Flags );
	HRESULT SetExpressionSyntaxByName(  const char* AbbrevName );
	HRESULT GetNumberExpressionSyntaxes(  unsigned long* Number );
	HRESULT GetExpressionSyntaxNames(  unsigned long Index, char* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, char* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetNumberEvents(  unsigned long* Events );
	HRESULT GetEventIndexDescription(  unsigned long Index, unsigned long Which, char* Buffer, unsigned long BufferSize, unsigned long* DescSize );
	HRESULT GetCurrentEventIndex(  unsigned long* Index );
	HRESULT SetNextEventIndex(  unsigned long Relation, unsigned long Value, unsigned long* NextIndex );
	HRESULT GetLogFileWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* FileSize, bool* Append );
	HRESULT OpenLogFileWide(  const wchar_t* File, BOOL Append );
	HRESULT InputWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* InputSize );
	HRESULT ReturnInputWide(  const wchar_t* Buffer );
	HRESULT OutputWide(  unsigned long Mask, const wchar_t* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputVaListWide(  unsigned long Mask, const wchar_t* Format, char* Args );
	HRESULT ControlledOutputWide(  unsigned long OutputControl, unsigned long Mask, const wchar_t* Format, SAFEARRAY(VARIANT) );
	HRESULT ControlledOutputVaListWide(  unsigned long OutputControl, unsigned long Mask, const wchar_t* Format, char* Args );
	HRESULT OutputPromptWide(  unsigned long OutputControl, const wchar_t* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputPromptVaListWide(  unsigned long OutputControl, const wchar_t* Format, char* Args );
	HRESULT GetPromptTextWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT AssembleWide(  unsigned __int64 Offset, const wchar_t* Instr, unsigned __int64* EndOffset );
	HRESULT DisassembleWide(  unsigned __int64 Offset, unsigned long Flags, wchar_t* Buffer, unsigned long BufferSize, unsigned long* DisassemblySize, unsigned __int64* EndOffset );
	HRESULT GetProcessorTypeNamesWide(  unsigned long Type, wchar_t* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, wchar_t* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetTextMacroWide(  unsigned long Slot, wchar_t* Buffer, unsigned long BufferSize, unsigned long* MacroSize );
	HRESULT SetTextMacroWide(  unsigned long Slot, const wchar_t* Macro );
	HRESULT EvaluateWide(  const wchar_t* Expression, unsigned long DesiredType, PDEBUG_VALUE Value, unsigned long* RemainderIndex );
	HRESULT ExecuteWide(  unsigned long OutputControl, const wchar_t* Command, unsigned long Flags );
	HRESULT ExecuteCommandFileWide(  unsigned long OutputControl, const wchar_t* CommandFile, unsigned long Flags );
	HRESULT GetBreakpointByIndex2(  unsigned long Index, IDebugBreakpoint2** Bp );
	HRESULT GetBreakpointById2(  unsigned long Id, IDebugBreakpoint2** Bp );
	HRESULT AddBreakpoint2(  unsigned long Type, unsigned long DesiredId, IDebugBreakpoint2** Bp );
	HRESULT RemoveBreakpoint2(  IDebugBreakpoint2* Bp );
	HRESULT AddExtensionWide(  const wchar_t* Path, unsigned long Flags, unsigned __int64* Handle );
	HRESULT GetExtensionByPathWide(  const wchar_t* Path, unsigned __int64* Handle );
	HRESULT CallExtensionWide(  unsigned __int64 Handle, const wchar_t* Function, const wchar_t* Arguments );
	HRESULT GetExtensionFunctionWide(  unsigned __int64 Handle, const wchar_t* FuncName, void** Function );
	HRESULT GetEventFilterTextWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT GetEventFilterCommandWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetEventFilterCommandWide(  unsigned long Index, const wchar_t* Command );
	HRESULT GetSpecificFilterArgumentWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* ArgumentSize );
	HRESULT SetSpecificFilterArgumentWide(  unsigned long Index, const wchar_t* Argument );
	HRESULT GetExceptionFilterSecondCommandWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetExceptionFilterSecondCommandWide(  unsigned long Index, const wchar_t* Command );
	HRESULT GetLastEventInformationWide(  unsigned long* Type, unsigned long* ProcessId, unsigned long* ThreadId, PVOID ExtraInformation, unsigned long ExtraInformationSize, unsigned long* ExtraInformationUsed, wchar_t* Description, unsigned long DescriptionSize, unsigned long* DescriptionUsed );
	HRESULT GetTextReplacementWide(  const wchar_t* SrcText, unsigned long Index, wchar_t* SrcBuffer, unsigned long SrcBufferSize, unsigned long* SrcSize, wchar_t* DstBuffer, unsigned long DstBufferSize, unsigned long* DstSize );
	HRESULT SetTextReplacementWide(  const wchar_t* SrcText, const wchar_t* DstText );
	HRESULT SetExpressionSyntaxByNameWide(  const wchar_t* AbbrevName );
	HRESULT GetExpressionSyntaxNamesWide(  unsigned long Index, wchar_t* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, wchar_t* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetEventIndexDescriptionWide(  unsigned long Index, unsigned long Which, wchar_t* Buffer, unsigned long BufferSize, unsigned long* DescSize );
	HRESULT GetLogFile2(  char* Buffer, unsigned long BufferSize, unsigned long* FileSize, unsigned long* Flags );
	HRESULT OpenLogFile2(  const char* File, unsigned long Flags );
	HRESULT GetLogFile2Wide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* FileSize, unsigned long* Flags );
	HRESULT OpenLogFile2Wide(  const wchar_t* File, unsigned long Flags );
	HRESULT GetSystemVersionValues(  unsigned long* PlatformId, unsigned long* Win32Major, unsigned long* Win32Minor, unsigned long* KdMajor, unsigned long* KdMinor );
	HRESULT GetSystemVersionString(  unsigned long Which, char* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetSystemVersionStringWide(  unsigned long Which, wchar_t* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetContextStackTrace(  PVOID StartContext, unsigned long StartContextSize,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, PVOID FrameContexts, unsigned long FrameContextsSize, unsigned long FrameContextsEntrySize, unsigned long* FramesFilled );
	HRESULT OutputContextStackTrace(  unsigned long OutputControl,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, PVOID FrameContexts, unsigned long FrameContextsSize, unsigned long FrameContextsEntrySize, unsigned long Flags );
	HRESULT GetStoredEventInformation(  unsigned long* Type, unsigned long* ProcessId, unsigned long* ThreadId, PVOID Context, unsigned long ContextSize, unsigned long* ContextUsed, PVOID ExtraInformation, unsigned long ExtraInformationSize, unsigned long* ExtraInformationUsed );
	HRESULT GetManagedStatus(  unsigned long* Flags, unsigned long WhichString, char* String, unsigned long StringSize, unsigned long* StringNeeded );
	HRESULT GetManagedStatusWide(  unsigned long* Flags, unsigned long WhichString, wchar_t* String, unsigned long StringSize, unsigned long* StringNeeded );
	HRESULT ResetManagedStatus(  unsigned long Flags );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(b2ffe162-2412-429f-8d1d-5bf6dd824696),
	helpstring("IDebugControl5")
]
interface IDebugControl5 : IUnknown {
	HRESULT GetInterrupt(  );
	HRESULT SetInterrupt(  unsigned long Flags );
	HRESULT GetInterruptTimeout(  unsigned long* Seconds );
	HRESULT SetInterruptTimeout(  unsigned long Seconds );
	HRESULT GetLogFile(  char* Buffer, unsigned long BufferSize, unsigned long* FileSize, bool* Append );
	HRESULT OpenLogFile(  const char* File, BOOL Append );
	HRESULT CloseLogFile(  );
	HRESULT GetLogMask(  unsigned long* Mask );
	HRESULT SetLogMask(  unsigned long Mask );
	HRESULT Input(  char* Buffer, unsigned long BufferSize, unsigned long* InputSize );
	HRESULT ReturnInput(  const char* Buffer );
	HRESULT Output(  unsigned long Mask, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputVaList(  unsigned long Mask, const char* Format, char* Args );
	HRESULT ControlledOutput(  unsigned long OutputControl, unsigned long Mask, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT ControlledOutputVaList(  unsigned long OutputControl, unsigned long Mask, const char* Format, char* Args );
	HRESULT OutputPrompt(  unsigned long OutputControl, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputPromptVaList(  unsigned long OutputControl, const char* Format, char* Args );
	HRESULT GetPromptText(  char* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT OutputCurrentState(  unsigned long OutputControl, unsigned long Flags );
	HRESULT OutputVersionInformation(  unsigned long OutputControl );
	HRESULT GetNotifyEventHandle(  unsigned __int64* Handle );
	HRESULT SetNotifyEventHandle(  unsigned __int64 Handle );
	HRESULT Assemble(  unsigned __int64 Offset, const char* Instr, unsigned __int64* EndOffset );
	HRESULT Disassemble(  unsigned __int64 Offset, unsigned long Flags, char* Buffer, unsigned long BufferSize, unsigned long* DisassemblySize, unsigned __int64* EndOffset );
	HRESULT GetDisassembleEffectiveOffset(  unsigned __int64* Offset );
	HRESULT OutputDisassembly(  unsigned long OutputControl, unsigned __int64 Offset, unsigned long Flags, unsigned __int64* EndOffset );
	HRESULT OutputDisassemblyLines(  unsigned long OutputControl, unsigned long PreviousLines, unsigned long TotalLines, unsigned __int64 Offset, unsigned long Flags, unsigned long* OffsetLine, unsigned __int64* StartOffset, unsigned __int64* EndOffset, unsigned __int64* LineOffsets );
	HRESULT GetNearInstruction(  unsigned __int64 Offset, LONG Delta, unsigned __int64* NearOffset );
	HRESULT GetStackTrace(  unsigned __int64 FrameOffset, unsigned __int64 StackOffset, unsigned __int64 InstructionOffset,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, unsigned long* FramesFilled );
	HRESULT GetReturnOffset(  unsigned __int64* Offset );
	HRESULT OutputStackTrace(  unsigned long OutputControl,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, unsigned long Flags );
	HRESULT GetDebuggeeType(  unsigned long* Class, unsigned long* Qualifier );
	HRESULT GetActualProcessorType(  unsigned long* Type );
	HRESULT GetExecutingProcessorType(  unsigned long* Type );
	HRESULT GetNumberPossibleExecutingProcessorTypes(  unsigned long* Number );
	HRESULT GetPossibleExecutingProcessorTypes(  unsigned long Start, unsigned long Count, unsigned long* Types );
	HRESULT GetNumberProcessors(  unsigned long* Number );
	HRESULT GetSystemVersion(  unsigned long* PlatformId, unsigned long* Major, unsigned long* Minor, char* ServicePackString, unsigned long ServicePackStringSize, unsigned long* ServicePackStringUsed, unsigned long* ServicePackNumber, char* BuildString, unsigned long BuildStringSize, unsigned long* BuildStringUsed );
	HRESULT GetPageSize(  unsigned long* Size );
	HRESULT IsPointer64Bit(  );
	HRESULT ReadBugCheckData(  unsigned long* Code, unsigned __int64* Arg1, unsigned __int64* Arg2, unsigned __int64* Arg3, unsigned __int64* Arg4 );
	HRESULT GetNumberSupportedProcessorTypes(  unsigned long* Number );
	HRESULT GetSupportedProcessorTypes(  unsigned long Start, unsigned long Count, unsigned long* Types );
	HRESULT GetProcessorTypeNames(  unsigned long Type, char* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, char* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetEffectiveProcessorType(  unsigned long* Type );
	HRESULT SetEffectiveProcessorType(  unsigned long Type );
	HRESULT GetExecutionStatus(  unsigned long* Status );
	HRESULT SetExecutionStatus(  unsigned long Status );
	HRESULT GetCodeLevel(  unsigned long* Level );
	HRESULT SetCodeLevel(  unsigned long Level );
	HRESULT GetEngineOptions(  unsigned long* Options );
	HRESULT AddEngineOptions(  unsigned long Options );
	HRESULT RemoveEngineOptions(  unsigned long Options );
	HRESULT SetEngineOptions(  unsigned long Options );
	HRESULT GetSystemErrorControl(  unsigned long* OutputLevel, unsigned long* BreakLevel );
	HRESULT SetSystemErrorControl(  unsigned long OutputLevel, unsigned long BreakLevel );
	HRESULT GetTextMacro(  unsigned long Slot, char* Buffer, unsigned long BufferSize, unsigned long* MacroSize );
	HRESULT SetTextMacro(  unsigned long Slot, const char* Macro );
	HRESULT GetRadix(  unsigned long* Radix );
	HRESULT SetRadix(  unsigned long Radix );
	HRESULT Evaluate(  const char* Expression, unsigned long DesiredType, PDEBUG_VALUE Value, unsigned long* RemainderIndex );
	HRESULT CoerceValue(  PDEBUG_VALUE In, unsigned long OutType, PDEBUG_VALUE Out );
	HRESULT CoerceValues(  unsigned long Count, PDEBUG_VALUE In, unsigned long* OutTypes, PDEBUG_VALUE Out );
	HRESULT Execute(  unsigned long OutputControl, const char* Command, unsigned long Flags );
	HRESULT ExecuteCommandFile(  unsigned long OutputControl, const char* CommandFile, unsigned long Flags );
	HRESULT GetNumberBreakpoints(  unsigned long* Number );
	HRESULT GetBreakpointByIndex(  unsigned long Index, IDebugBreakpoint** Bp );
	HRESULT GetBreakpointById(  unsigned long Id, IDebugBreakpoint** Bp );
	HRESULT GetBreakpointParameters(  unsigned long Count, unsigned long* Ids, unsigned long Start, PDEBUG_BREAKPOINT_PARAMETERS Params );
	HRESULT AddBreakpoint(  unsigned long Type, unsigned long DesiredId, IDebugBreakpoint** Bp );
	HRESULT RemoveBreakpoint(  IDebugBreakpoint* Bp );
	HRESULT AddExtension(  const char* Path, unsigned long Flags, unsigned __int64* Handle );
	HRESULT RemoveExtension(  unsigned __int64 Handle );
	HRESULT GetExtensionByPath(  const char* Path, unsigned __int64* Handle );
	HRESULT CallExtension(  unsigned __int64 Handle, const char* Function, const char* Arguments );
	HRESULT GetExtensionFunction(  unsigned __int64 Handle, const char* FuncName, void** Function );
	HRESULT GetWindbgExtensionApis32(  PWINDBG_EXTENSION_APIS32 Api );
	HRESULT GetWindbgExtensionApis64(  PWINDBG_EXTENSION_APIS64 Api );
	HRESULT GetNumberEventFilters(  unsigned long* SpecificEvents, unsigned long* SpecificExceptions, unsigned long* ArbitraryExceptions );
	HRESULT GetEventFilterText(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT GetEventFilterCommand(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetEventFilterCommand(  unsigned long Index, const char* Command );
	HRESULT GetSpecificFilterParameters(  unsigned long Start, unsigned long Count, PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT SetSpecificFilterParameters(  unsigned long Start, unsigned long Count, PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT GetSpecificFilterArgument(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* ArgumentSize );
	HRESULT SetSpecificFilterArgument(  unsigned long Index, const char* Argument );
	HRESULT GetExceptionFilterParameters(  unsigned long Count, unsigned long* Codes, unsigned long Start, PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT SetExceptionFilterParameters(  unsigned long Count, PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT GetExceptionFilterSecondCommand(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetExceptionFilterSecondCommand(  unsigned long Index, const char* Command );
	HRESULT WaitForEvent(  unsigned long Flags, unsigned long Timeout );
	HRESULT GetLastEventInformation(  unsigned long* Type, unsigned long* ProcessId, unsigned long* ThreadId, PVOID ExtraInformation, unsigned long ExtraInformationSize, unsigned long* ExtraInformationUsed, char* Description, unsigned long DescriptionSize, unsigned long* DescriptionUsed );
	HRESULT GetCurrentTimeDate(  unsigned long* TimeDate );
	HRESULT GetCurrentSystemUpTime(  unsigned long* UpTime );
	HRESULT GetDumpFormatFlags(  unsigned long* FormatFlags );
	HRESULT GetNumberTextReplacements(  unsigned long* NumRepl );
	HRESULT GetTextReplacement(  const char* SrcText, unsigned long Index, char* SrcBuffer, unsigned long SrcBufferSize, unsigned long* SrcSize, char* DstBuffer, unsigned long DstBufferSize, unsigned long* DstSize );
	HRESULT SetTextReplacement(  const char* SrcText, const char* DstText );
	HRESULT RemoveTextReplacements(  );
	HRESULT OutputTextReplacements(  unsigned long OutputControl, unsigned long Flags );
	HRESULT GetAssemblyOptions(  unsigned long* Options );
	HRESULT AddAssemblyOptions(  unsigned long Options );
	HRESULT RemoveAssemblyOptions(  unsigned long Options );
	HRESULT SetAssemblyOptions(  unsigned long Options );
	HRESULT GetExpressionSyntax(  unsigned long* Flags );
	HRESULT SetExpressionSyntax(  unsigned long Flags );
	HRESULT SetExpressionSyntaxByName(  const char* AbbrevName );
	HRESULT GetNumberExpressionSyntaxes(  unsigned long* Number );
	HRESULT GetExpressionSyntaxNames(  unsigned long Index, char* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, char* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetNumberEvents(  unsigned long* Events );
	HRESULT GetEventIndexDescription(  unsigned long Index, unsigned long Which, char* Buffer, unsigned long BufferSize, unsigned long* DescSize );
	HRESULT GetCurrentEventIndex(  unsigned long* Index );
	HRESULT SetNextEventIndex(  unsigned long Relation, unsigned long Value, unsigned long* NextIndex );
	HRESULT GetLogFileWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* FileSize, bool* Append );
	HRESULT OpenLogFileWide(  const wchar_t* File, BOOL Append );
	HRESULT InputWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* InputSize );
	HRESULT ReturnInputWide(  const wchar_t* Buffer );
	HRESULT OutputWide(  unsigned long Mask, const wchar_t* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputVaListWide(  unsigned long Mask, const wchar_t* Format, char* Args );
	HRESULT ControlledOutputWide(  unsigned long OutputControl, unsigned long Mask, const wchar_t* Format, SAFEARRAY(VARIANT) );
	HRESULT ControlledOutputVaListWide(  unsigned long OutputControl, unsigned long Mask, const wchar_t* Format, char* Args );
	HRESULT OutputPromptWide(  unsigned long OutputControl, const wchar_t* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputPromptVaListWide(  unsigned long OutputControl, const wchar_t* Format, char* Args );
	HRESULT GetPromptTextWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT AssembleWide(  unsigned __int64 Offset, const wchar_t* Instr, unsigned __int64* EndOffset );
	HRESULT DisassembleWide(  unsigned __int64 Offset, unsigned long Flags, wchar_t* Buffer, unsigned long BufferSize, unsigned long* DisassemblySize, unsigned __int64* EndOffset );
	HRESULT GetProcessorTypeNamesWide(  unsigned long Type, wchar_t* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, wchar_t* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetTextMacroWide(  unsigned long Slot, wchar_t* Buffer, unsigned long BufferSize, unsigned long* MacroSize );
	HRESULT SetTextMacroWide(  unsigned long Slot, const wchar_t* Macro );
	HRESULT EvaluateWide(  const wchar_t* Expression, unsigned long DesiredType, PDEBUG_VALUE Value, unsigned long* RemainderIndex );
	HRESULT ExecuteWide(  unsigned long OutputControl, const wchar_t* Command, unsigned long Flags );
	HRESULT ExecuteCommandFileWide(  unsigned long OutputControl, const wchar_t* CommandFile, unsigned long Flags );
	HRESULT GetBreakpointByIndex2(  unsigned long Index, IDebugBreakpoint2** Bp );
	HRESULT GetBreakpointById2(  unsigned long Id, IDebugBreakpoint2** Bp );
	HRESULT AddBreakpoint2(  unsigned long Type, unsigned long DesiredId, IDebugBreakpoint2** Bp );
	HRESULT RemoveBreakpoint2(  IDebugBreakpoint2* Bp );
	HRESULT AddExtensionWide(  const wchar_t* Path, unsigned long Flags, unsigned __int64* Handle );
	HRESULT GetExtensionByPathWide(  const wchar_t* Path, unsigned __int64* Handle );
	HRESULT CallExtensionWide(  unsigned __int64 Handle, const wchar_t* Function, const wchar_t* Arguments );
	HRESULT GetExtensionFunctionWide(  unsigned __int64 Handle, const wchar_t* FuncName, void** Function );
	HRESULT GetEventFilterTextWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT GetEventFilterCommandWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetEventFilterCommandWide(  unsigned long Index, const wchar_t* Command );
	HRESULT GetSpecificFilterArgumentWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* ArgumentSize );
	HRESULT SetSpecificFilterArgumentWide(  unsigned long Index, const wchar_t* Argument );
	HRESULT GetExceptionFilterSecondCommandWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetExceptionFilterSecondCommandWide(  unsigned long Index, const wchar_t* Command );
	HRESULT GetLastEventInformationWide(  unsigned long* Type, unsigned long* ProcessId, unsigned long* ThreadId, PVOID ExtraInformation, unsigned long ExtraInformationSize, unsigned long* ExtraInformationUsed, wchar_t* Description, unsigned long DescriptionSize, unsigned long* DescriptionUsed );
	HRESULT GetTextReplacementWide(  const wchar_t* SrcText, unsigned long Index, wchar_t* SrcBuffer, unsigned long SrcBufferSize, unsigned long* SrcSize, wchar_t* DstBuffer, unsigned long DstBufferSize, unsigned long* DstSize );
	HRESULT SetTextReplacementWide(  const wchar_t* SrcText, const wchar_t* DstText );
	HRESULT SetExpressionSyntaxByNameWide(  const wchar_t* AbbrevName );
	HRESULT GetExpressionSyntaxNamesWide(  unsigned long Index, wchar_t* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, wchar_t* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetEventIndexDescriptionWide(  unsigned long Index, unsigned long Which, wchar_t* Buffer, unsigned long BufferSize, unsigned long* DescSize );
	HRESULT GetLogFile2(  char* Buffer, unsigned long BufferSize, unsigned long* FileSize, unsigned long* Flags );
	HRESULT OpenLogFile2(  const char* File, unsigned long Flags );
	HRESULT GetLogFile2Wide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* FileSize, unsigned long* Flags );
	HRESULT OpenLogFile2Wide(  const wchar_t* File, unsigned long Flags );
	HRESULT GetSystemVersionValues(  unsigned long* PlatformId, unsigned long* Win32Major, unsigned long* Win32Minor, unsigned long* KdMajor, unsigned long* KdMinor );
	HRESULT GetSystemVersionString(  unsigned long Which, char* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetSystemVersionStringWide(  unsigned long Which, wchar_t* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetContextStackTrace(  PVOID StartContext, unsigned long StartContextSize,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, PVOID FrameContexts, unsigned long FrameContextsSize, unsigned long FrameContextsEntrySize, unsigned long* FramesFilled );
	HRESULT OutputContextStackTrace(  unsigned long OutputControl,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, PVOID FrameContexts, unsigned long FrameContextsSize, unsigned long FrameContextsEntrySize, unsigned long Flags );
	HRESULT GetStoredEventInformation(  unsigned long* Type, unsigned long* ProcessId, unsigned long* ThreadId, PVOID Context, unsigned long ContextSize, unsigned long* ContextUsed, PVOID ExtraInformation, unsigned long ExtraInformationSize, unsigned long* ExtraInformationUsed );
	HRESULT GetManagedStatus(  unsigned long* Flags, unsigned long WhichString, char* String, unsigned long StringSize, unsigned long* StringNeeded );
	HRESULT GetManagedStatusWide(  unsigned long* Flags, unsigned long WhichString, wchar_t* String, unsigned long StringSize, unsigned long* StringNeeded );
	HRESULT ResetManagedStatus(  unsigned long Flags );
	HRESULT GetStackTraceEx(  unsigned __int64 FrameOffset, unsigned __int64 StackOffset, unsigned __int64 InstructionOffset, PDEBUG_STACK_FRAME_EX Frames, unsigned long FramesSize, unsigned long* FramesFilled );
	HRESULT OutputStackTraceEx(  unsigned long OutputControl, PDEBUG_STACK_FRAME_EX Frames, unsigned long FramesSize, unsigned long Flags );
	HRESULT GetContextStackTraceEx(  PVOID StartContext, unsigned long StartContextSize, PDEBUG_STACK_FRAME_EX Frames, unsigned long FramesSize, PVOID FrameContexts, unsigned long FrameContextsSize, unsigned long FrameContextsEntrySize, unsigned long* FramesFilled );
	HRESULT OutputContextStackTraceEx(  unsigned long OutputControl, PDEBUG_STACK_FRAME_EX Frames, unsigned long FramesSize, PVOID FrameContexts, unsigned long FrameContextsSize, unsigned long FrameContextsEntrySize, unsigned long Flags );
	HRESULT GetBreakpointByGuid(  LPGUID Guid, IDebugBreakpoint3** Bp );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(bc0d583f-126d-43a1-9cc4-a860ab1d537b),
	helpstring("IDebugControl6")
]
interface IDebugControl6 : IUnknown {
	HRESULT GetInterrupt(  );
	HRESULT SetInterrupt(  unsigned long Flags );
	HRESULT GetInterruptTimeout(  unsigned long* Seconds );
	HRESULT SetInterruptTimeout(  unsigned long Seconds );
	HRESULT GetLogFile(  char* Buffer, unsigned long BufferSize, unsigned long* FileSize, bool* Append );
	HRESULT OpenLogFile(  const char* File, BOOL Append );
	HRESULT CloseLogFile(  );
	HRESULT GetLogMask(  unsigned long* Mask );
	HRESULT SetLogMask(  unsigned long Mask );
	HRESULT Input(  char* Buffer, unsigned long BufferSize, unsigned long* InputSize );
	HRESULT ReturnInput(  const char* Buffer );
	HRESULT Output(  unsigned long Mask, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputVaList(  unsigned long Mask, const char* Format, char* Args );
	HRESULT ControlledOutput(  unsigned long OutputControl, unsigned long Mask, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT ControlledOutputVaList(  unsigned long OutputControl, unsigned long Mask, const char* Format, char* Args );
	HRESULT OutputPrompt(  unsigned long OutputControl, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputPromptVaList(  unsigned long OutputControl, const char* Format, char* Args );
	HRESULT GetPromptText(  char* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT OutputCurrentState(  unsigned long OutputControl, unsigned long Flags );
	HRESULT OutputVersionInformation(  unsigned long OutputControl );
	HRESULT GetNotifyEventHandle(  unsigned __int64* Handle );
	HRESULT SetNotifyEventHandle(  unsigned __int64 Handle );
	HRESULT Assemble(  unsigned __int64 Offset, const char* Instr, unsigned __int64* EndOffset );
	HRESULT Disassemble(  unsigned __int64 Offset, unsigned long Flags, char* Buffer, unsigned long BufferSize, unsigned long* DisassemblySize, unsigned __int64* EndOffset );
	HRESULT GetDisassembleEffectiveOffset(  unsigned __int64* Offset );
	HRESULT OutputDisassembly(  unsigned long OutputControl, unsigned __int64 Offset, unsigned long Flags, unsigned __int64* EndOffset );
	HRESULT OutputDisassemblyLines(  unsigned long OutputControl, unsigned long PreviousLines, unsigned long TotalLines, unsigned __int64 Offset, unsigned long Flags, unsigned long* OffsetLine, unsigned __int64* StartOffset, unsigned __int64* EndOffset, unsigned __int64* LineOffsets );
	HRESULT GetNearInstruction(  unsigned __int64 Offset, LONG Delta, unsigned __int64* NearOffset );
	HRESULT GetStackTrace(  unsigned __int64 FrameOffset, unsigned __int64 StackOffset, unsigned __int64 InstructionOffset,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, unsigned long* FramesFilled );
	HRESULT GetReturnOffset(  unsigned __int64* Offset );
	HRESULT OutputStackTrace(  unsigned long OutputControl,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, unsigned long Flags );
	HRESULT GetDebuggeeType(  unsigned long* Class, unsigned long* Qualifier );
	HRESULT GetActualProcessorType(  unsigned long* Type );
	HRESULT GetExecutingProcessorType(  unsigned long* Type );
	HRESULT GetNumberPossibleExecutingProcessorTypes(  unsigned long* Number );
	HRESULT GetPossibleExecutingProcessorTypes(  unsigned long Start, unsigned long Count, unsigned long* Types );
	HRESULT GetNumberProcessors(  unsigned long* Number );
	HRESULT GetSystemVersion(  unsigned long* PlatformId, unsigned long* Major, unsigned long* Minor, char* ServicePackString, unsigned long ServicePackStringSize, unsigned long* ServicePackStringUsed, unsigned long* ServicePackNumber, char* BuildString, unsigned long BuildStringSize, unsigned long* BuildStringUsed );
	HRESULT GetPageSize(  unsigned long* Size );
	HRESULT IsPointer64Bit(  );
	HRESULT ReadBugCheckData(  unsigned long* Code, unsigned __int64* Arg1, unsigned __int64* Arg2, unsigned __int64* Arg3, unsigned __int64* Arg4 );
	HRESULT GetNumberSupportedProcessorTypes(  unsigned long* Number );
	HRESULT GetSupportedProcessorTypes(  unsigned long Start, unsigned long Count, unsigned long* Types );
	HRESULT GetProcessorTypeNames(  unsigned long Type, char* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, char* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetEffectiveProcessorType(  unsigned long* Type );
	HRESULT SetEffectiveProcessorType(  unsigned long Type );
	HRESULT GetExecutionStatus(  unsigned long* Status );
	HRESULT SetExecutionStatus(  unsigned long Status );
	HRESULT GetCodeLevel(  unsigned long* Level );
	HRESULT SetCodeLevel(  unsigned long Level );
	HRESULT GetEngineOptions(  unsigned long* Options );
	HRESULT AddEngineOptions(  unsigned long Options );
	HRESULT RemoveEngineOptions(  unsigned long Options );
	HRESULT SetEngineOptions(  unsigned long Options );
	HRESULT GetSystemErrorControl(  unsigned long* OutputLevel, unsigned long* BreakLevel );
	HRESULT SetSystemErrorControl(  unsigned long OutputLevel, unsigned long BreakLevel );
	HRESULT GetTextMacro(  unsigned long Slot, char* Buffer, unsigned long BufferSize, unsigned long* MacroSize );
	HRESULT SetTextMacro(  unsigned long Slot, const char* Macro );
	HRESULT GetRadix(  unsigned long* Radix );
	HRESULT SetRadix(  unsigned long Radix );
	HRESULT Evaluate(  const char* Expression, unsigned long DesiredType, PDEBUG_VALUE Value, unsigned long* RemainderIndex );
	HRESULT CoerceValue(  PDEBUG_VALUE In, unsigned long OutType, PDEBUG_VALUE Out );
	HRESULT CoerceValues(  unsigned long Count, PDEBUG_VALUE In, unsigned long* OutTypes, PDEBUG_VALUE Out );
	HRESULT Execute(  unsigned long OutputControl, const char* Command, unsigned long Flags );
	HRESULT ExecuteCommandFile(  unsigned long OutputControl, const char* CommandFile, unsigned long Flags );
	HRESULT GetNumberBreakpoints(  unsigned long* Number );
	HRESULT GetBreakpointByIndex(  unsigned long Index, IDebugBreakpoint** Bp );
	HRESULT GetBreakpointById(  unsigned long Id, IDebugBreakpoint** Bp );
	HRESULT GetBreakpointParameters(  unsigned long Count, unsigned long* Ids, unsigned long Start, PDEBUG_BREAKPOINT_PARAMETERS Params );
	HRESULT AddBreakpoint(  unsigned long Type, unsigned long DesiredId, IDebugBreakpoint** Bp );
	HRESULT RemoveBreakpoint(  IDebugBreakpoint* Bp );
	HRESULT AddExtension(  const char* Path, unsigned long Flags, unsigned __int64* Handle );
	HRESULT RemoveExtension(  unsigned __int64 Handle );
	HRESULT GetExtensionByPath(  const char* Path, unsigned __int64* Handle );
	HRESULT CallExtension(  unsigned __int64 Handle, const char* Function, const char* Arguments );
	HRESULT GetExtensionFunction(  unsigned __int64 Handle, const char* FuncName, void** Function );
	HRESULT GetWindbgExtensionApis32(  PWINDBG_EXTENSION_APIS32 Api );
	HRESULT GetWindbgExtensionApis64(  PWINDBG_EXTENSION_APIS64 Api );
	HRESULT GetNumberEventFilters(  unsigned long* SpecificEvents, unsigned long* SpecificExceptions, unsigned long* ArbitraryExceptions );
	HRESULT GetEventFilterText(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT GetEventFilterCommand(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetEventFilterCommand(  unsigned long Index, const char* Command );
	HRESULT GetSpecificFilterParameters(  unsigned long Start, unsigned long Count, PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT SetSpecificFilterParameters(  unsigned long Start, unsigned long Count, PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT GetSpecificFilterArgument(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* ArgumentSize );
	HRESULT SetSpecificFilterArgument(  unsigned long Index, const char* Argument );
	HRESULT GetExceptionFilterParameters(  unsigned long Count, unsigned long* Codes, unsigned long Start, PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT SetExceptionFilterParameters(  unsigned long Count, PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT GetExceptionFilterSecondCommand(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetExceptionFilterSecondCommand(  unsigned long Index, const char* Command );
	HRESULT WaitForEvent(  unsigned long Flags, unsigned long Timeout );
	HRESULT GetLastEventInformation(  unsigned long* Type, unsigned long* ProcessId, unsigned long* ThreadId, PVOID ExtraInformation, unsigned long ExtraInformationSize, unsigned long* ExtraInformationUsed, char* Description, unsigned long DescriptionSize, unsigned long* DescriptionUsed );
	HRESULT GetCurrentTimeDate(  unsigned long* TimeDate );
	HRESULT GetCurrentSystemUpTime(  unsigned long* UpTime );
	HRESULT GetDumpFormatFlags(  unsigned long* FormatFlags );
	HRESULT GetNumberTextReplacements(  unsigned long* NumRepl );
	HRESULT GetTextReplacement(  const char* SrcText, unsigned long Index, char* SrcBuffer, unsigned long SrcBufferSize, unsigned long* SrcSize, char* DstBuffer, unsigned long DstBufferSize, unsigned long* DstSize );
	HRESULT SetTextReplacement(  const char* SrcText, const char* DstText );
	HRESULT RemoveTextReplacements(  );
	HRESULT OutputTextReplacements(  unsigned long OutputControl, unsigned long Flags );
	HRESULT GetAssemblyOptions(  unsigned long* Options );
	HRESULT AddAssemblyOptions(  unsigned long Options );
	HRESULT RemoveAssemblyOptions(  unsigned long Options );
	HRESULT SetAssemblyOptions(  unsigned long Options );
	HRESULT GetExpressionSyntax(  unsigned long* Flags );
	HRESULT SetExpressionSyntax(  unsigned long Flags );
	HRESULT SetExpressionSyntaxByName(  const char* AbbrevName );
	HRESULT GetNumberExpressionSyntaxes(  unsigned long* Number );
	HRESULT GetExpressionSyntaxNames(  unsigned long Index, char* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, char* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetNumberEvents(  unsigned long* Events );
	HRESULT GetEventIndexDescription(  unsigned long Index, unsigned long Which, char* Buffer, unsigned long BufferSize, unsigned long* DescSize );
	HRESULT GetCurrentEventIndex(  unsigned long* Index );
	HRESULT SetNextEventIndex(  unsigned long Relation, unsigned long Value, unsigned long* NextIndex );
	HRESULT GetLogFileWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* FileSize, bool* Append );
	HRESULT OpenLogFileWide(  const wchar_t* File, BOOL Append );
	HRESULT InputWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* InputSize );
	HRESULT ReturnInputWide(  const wchar_t* Buffer );
	HRESULT OutputWide(  unsigned long Mask, const wchar_t* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputVaListWide(  unsigned long Mask, const wchar_t* Format, char* Args );
	HRESULT ControlledOutputWide(  unsigned long OutputControl, unsigned long Mask, const wchar_t* Format, SAFEARRAY(VARIANT) );
	HRESULT ControlledOutputVaListWide(  unsigned long OutputControl, unsigned long Mask, const wchar_t* Format, char* Args );
	HRESULT OutputPromptWide(  unsigned long OutputControl, const wchar_t* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputPromptVaListWide(  unsigned long OutputControl, const wchar_t* Format, char* Args );
	HRESULT GetPromptTextWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT AssembleWide(  unsigned __int64 Offset, const wchar_t* Instr, unsigned __int64* EndOffset );
	HRESULT DisassembleWide(  unsigned __int64 Offset, unsigned long Flags, wchar_t* Buffer, unsigned long BufferSize, unsigned long* DisassemblySize, unsigned __int64* EndOffset );
	HRESULT GetProcessorTypeNamesWide(  unsigned long Type, wchar_t* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, wchar_t* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetTextMacroWide(  unsigned long Slot, wchar_t* Buffer, unsigned long BufferSize, unsigned long* MacroSize );
	HRESULT SetTextMacroWide(  unsigned long Slot, const wchar_t* Macro );
	HRESULT EvaluateWide(  const wchar_t* Expression, unsigned long DesiredType, PDEBUG_VALUE Value, unsigned long* RemainderIndex );
	HRESULT ExecuteWide(  unsigned long OutputControl, const wchar_t* Command, unsigned long Flags );
	HRESULT ExecuteCommandFileWide(  unsigned long OutputControl, const wchar_t* CommandFile, unsigned long Flags );
	HRESULT GetBreakpointByIndex2(  unsigned long Index, IDebugBreakpoint2** Bp );
	HRESULT GetBreakpointById2(  unsigned long Id, IDebugBreakpoint2** Bp );
	HRESULT AddBreakpoint2(  unsigned long Type, unsigned long DesiredId, IDebugBreakpoint2** Bp );
	HRESULT RemoveBreakpoint2(  IDebugBreakpoint2* Bp );
	HRESULT AddExtensionWide(  const wchar_t* Path, unsigned long Flags, unsigned __int64* Handle );
	HRESULT GetExtensionByPathWide(  const wchar_t* Path, unsigned __int64* Handle );
	HRESULT CallExtensionWide(  unsigned __int64 Handle, const wchar_t* Function, const wchar_t* Arguments );
	HRESULT GetExtensionFunctionWide(  unsigned __int64 Handle, const wchar_t* FuncName, void** Function );
	HRESULT GetEventFilterTextWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT GetEventFilterCommandWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetEventFilterCommandWide(  unsigned long Index, const wchar_t* Command );
	HRESULT GetSpecificFilterArgumentWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* ArgumentSize );
	HRESULT SetSpecificFilterArgumentWide(  unsigned long Index, const wchar_t* Argument );
	HRESULT GetExceptionFilterSecondCommandWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetExceptionFilterSecondCommandWide(  unsigned long Index, const wchar_t* Command );
	HRESULT GetLastEventInformationWide(  unsigned long* Type, unsigned long* ProcessId, unsigned long* ThreadId, PVOID ExtraInformation, unsigned long ExtraInformationSize, unsigned long* ExtraInformationUsed, wchar_t* Description, unsigned long DescriptionSize, unsigned long* DescriptionUsed );
	HRESULT GetTextReplacementWide(  const wchar_t* SrcText, unsigned long Index, wchar_t* SrcBuffer, unsigned long SrcBufferSize, unsigned long* SrcSize, wchar_t* DstBuffer, unsigned long DstBufferSize, unsigned long* DstSize );
	HRESULT SetTextReplacementWide(  const wchar_t* SrcText, const wchar_t* DstText );
	HRESULT SetExpressionSyntaxByNameWide(  const wchar_t* AbbrevName );
	HRESULT GetExpressionSyntaxNamesWide(  unsigned long Index, wchar_t* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, wchar_t* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetEventIndexDescriptionWide(  unsigned long Index, unsigned long Which, wchar_t* Buffer, unsigned long BufferSize, unsigned long* DescSize );
	HRESULT GetLogFile2(  char* Buffer, unsigned long BufferSize, unsigned long* FileSize, unsigned long* Flags );
	HRESULT OpenLogFile2(  const char* File, unsigned long Flags );
	HRESULT GetLogFile2Wide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* FileSize, unsigned long* Flags );
	HRESULT OpenLogFile2Wide(  const wchar_t* File, unsigned long Flags );
	HRESULT GetSystemVersionValues(  unsigned long* PlatformId, unsigned long* Win32Major, unsigned long* Win32Minor, unsigned long* KdMajor, unsigned long* KdMinor );
	HRESULT GetSystemVersionString(  unsigned long Which, char* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetSystemVersionStringWide(  unsigned long Which, wchar_t* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetContextStackTrace(  PVOID StartContext, unsigned long StartContextSize,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, PVOID FrameContexts, unsigned long FrameContextsSize, unsigned long FrameContextsEntrySize, unsigned long* FramesFilled );
	HRESULT OutputContextStackTrace(  unsigned long OutputControl,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, PVOID FrameContexts, unsigned long FrameContextsSize, unsigned long FrameContextsEntrySize, unsigned long Flags );
	HRESULT GetStoredEventInformation(  unsigned long* Type, unsigned long* ProcessId, unsigned long* ThreadId, PVOID Context, unsigned long ContextSize, unsigned long* ContextUsed, PVOID ExtraInformation, unsigned long ExtraInformationSize, unsigned long* ExtraInformationUsed );
	HRESULT GetManagedStatus(  unsigned long* Flags, unsigned long WhichString, char* String, unsigned long StringSize, unsigned long* StringNeeded );
	HRESULT GetManagedStatusWide(  unsigned long* Flags, unsigned long WhichString, wchar_t* String, unsigned long StringSize, unsigned long* StringNeeded );
	HRESULT ResetManagedStatus(  unsigned long Flags );
	HRESULT GetStackTraceEx(  unsigned __int64 FrameOffset, unsigned __int64 StackOffset, unsigned __int64 InstructionOffset, PDEBUG_STACK_FRAME_EX Frames, unsigned long FramesSize, unsigned long* FramesFilled );
	HRESULT OutputStackTraceEx(  unsigned long OutputControl, PDEBUG_STACK_FRAME_EX Frames, unsigned long FramesSize, unsigned long Flags );
	HRESULT GetContextStackTraceEx(  PVOID StartContext, unsigned long StartContextSize, PDEBUG_STACK_FRAME_EX Frames, unsigned long FramesSize, PVOID FrameContexts, unsigned long FrameContextsSize, unsigned long FrameContextsEntrySize, unsigned long* FramesFilled );
	HRESULT OutputContextStackTraceEx(  unsigned long OutputControl, PDEBUG_STACK_FRAME_EX Frames, unsigned long FramesSize, PVOID FrameContexts, unsigned long FrameContextsSize, unsigned long FrameContextsEntrySize, unsigned long Flags );
	HRESULT GetBreakpointByGuid(  LPGUID Guid, IDebugBreakpoint3** Bp );
	HRESULT GetExecutionStatusEx(  unsigned long* Status );
	HRESULT GetSynchronizationStatus(  unsigned long* SendsAttempted, unsigned long* SecondsSinceLastResponse );
};

enum {DEBUG_EXEC_FLAGS_NONBLOCK = 0x00000001};
///////////////////////////////////////////////////////////
[
	object,
	uuid(b86fb3b1-80d4-475b-aea3-cf06539cf63a),
	helpstring("IDebugControl7")
]
interface IDebugControl7 : IUnknown {
	HRESULT GetInterrupt(  );
	HRESULT SetInterrupt(  unsigned long Flags );
	HRESULT GetInterruptTimeout(  unsigned long* Seconds );
	HRESULT SetInterruptTimeout(  unsigned long Seconds );
	HRESULT GetLogFile(  char* Buffer, unsigned long BufferSize, unsigned long* FileSize, bool* Append );
	HRESULT OpenLogFile(  const char* File, BOOL Append );
	HRESULT CloseLogFile(  );
	HRESULT GetLogMask(  unsigned long* Mask );
	HRESULT SetLogMask(  unsigned long Mask );
	HRESULT Input(  char* Buffer, unsigned long BufferSize, unsigned long* InputSize );
	HRESULT ReturnInput(  const char* Buffer );
	HRESULT Output(  unsigned long Mask, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputVaList(  unsigned long Mask, const char* Format, char* Args );
	HRESULT ControlledOutput(  unsigned long OutputControl, unsigned long Mask, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT ControlledOutputVaList(  unsigned long OutputControl, unsigned long Mask, const char* Format, char* Args );
	HRESULT OutputPrompt(  unsigned long OutputControl, const char* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputPromptVaList(  unsigned long OutputControl, const char* Format, char* Args );
	HRESULT GetPromptText(  char* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT OutputCurrentState(  unsigned long OutputControl, unsigned long Flags );
	HRESULT OutputVersionInformation(  unsigned long OutputControl );
	HRESULT GetNotifyEventHandle(  unsigned __int64* Handle );
	HRESULT SetNotifyEventHandle(  unsigned __int64 Handle );
	HRESULT Assemble(  unsigned __int64 Offset, const char* Instr, unsigned __int64* EndOffset );
	HRESULT Disassemble(  unsigned __int64 Offset, unsigned long Flags, char* Buffer, unsigned long BufferSize, unsigned long* DisassemblySize, unsigned __int64* EndOffset );
	HRESULT GetDisassembleEffectiveOffset(  unsigned __int64* Offset );
	HRESULT OutputDisassembly(  unsigned long OutputControl, unsigned __int64 Offset, unsigned long Flags, unsigned __int64* EndOffset );
	HRESULT OutputDisassemblyLines(  unsigned long OutputControl, unsigned long PreviousLines, unsigned long TotalLines, unsigned __int64 Offset, unsigned long Flags, unsigned long* OffsetLine, unsigned __int64* StartOffset, unsigned __int64* EndOffset, unsigned __int64* LineOffsets );
	HRESULT GetNearInstruction(  unsigned __int64 Offset, LONG Delta, unsigned __int64* NearOffset );
	HRESULT GetStackTrace(  unsigned __int64 FrameOffset, unsigned __int64 StackOffset, unsigned __int64 InstructionOffset,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, unsigned long* FramesFilled );
	HRESULT GetReturnOffset(  unsigned __int64* Offset );
	HRESULT OutputStackTrace(  unsigned long OutputControl,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, unsigned long Flags );
	HRESULT GetDebuggeeType(  unsigned long* Class, unsigned long* Qualifier );
	HRESULT GetActualProcessorType(  unsigned long* Type );
	HRESULT GetExecutingProcessorType(  unsigned long* Type );
	HRESULT GetNumberPossibleExecutingProcessorTypes(  unsigned long* Number );
	HRESULT GetPossibleExecutingProcessorTypes(  unsigned long Start, unsigned long Count, unsigned long* Types );
	HRESULT GetNumberProcessors(  unsigned long* Number );
	HRESULT GetSystemVersion(  unsigned long* PlatformId, unsigned long* Major, unsigned long* Minor, char* ServicePackString, unsigned long ServicePackStringSize, unsigned long* ServicePackStringUsed, unsigned long* ServicePackNumber, char* BuildString, unsigned long BuildStringSize, unsigned long* BuildStringUsed );
	HRESULT GetPageSize(  unsigned long* Size );
	HRESULT IsPointer64Bit(  );
	HRESULT ReadBugCheckData(  unsigned long* Code, unsigned __int64* Arg1, unsigned __int64* Arg2, unsigned __int64* Arg3, unsigned __int64* Arg4 );
	HRESULT GetNumberSupportedProcessorTypes(  unsigned long* Number );
	HRESULT GetSupportedProcessorTypes(  unsigned long Start, unsigned long Count, unsigned long* Types );
	HRESULT GetProcessorTypeNames(  unsigned long Type, char* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, char* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetEffectiveProcessorType(  unsigned long* Type );
	HRESULT SetEffectiveProcessorType(  unsigned long Type );
	HRESULT GetExecutionStatus(  unsigned long* Status );
	HRESULT SetExecutionStatus(  unsigned long Status );
	HRESULT GetCodeLevel(  unsigned long* Level );
	HRESULT SetCodeLevel(  unsigned long Level );
	HRESULT GetEngineOptions(  unsigned long* Options );
	HRESULT AddEngineOptions(  unsigned long Options );
	HRESULT RemoveEngineOptions(  unsigned long Options );
	HRESULT SetEngineOptions(  unsigned long Options );
	HRESULT GetSystemErrorControl(  unsigned long* OutputLevel, unsigned long* BreakLevel );
	HRESULT SetSystemErrorControl(  unsigned long OutputLevel, unsigned long BreakLevel );
	HRESULT GetTextMacro(  unsigned long Slot, char* Buffer, unsigned long BufferSize, unsigned long* MacroSize );
	HRESULT SetTextMacro(  unsigned long Slot, const char* Macro );
	HRESULT GetRadix(  unsigned long* Radix );
	HRESULT SetRadix(  unsigned long Radix );
	HRESULT Evaluate(  const char* Expression, unsigned long DesiredType, PDEBUG_VALUE Value, unsigned long* RemainderIndex );
	HRESULT CoerceValue(  PDEBUG_VALUE In, unsigned long OutType, PDEBUG_VALUE Out );
	HRESULT CoerceValues(  unsigned long Count, PDEBUG_VALUE In, unsigned long* OutTypes, PDEBUG_VALUE Out );
	HRESULT Execute(  unsigned long OutputControl, const char* Command, unsigned long Flags );
	HRESULT ExecuteCommandFile(  unsigned long OutputControl, const char* CommandFile, unsigned long Flags );
	HRESULT GetNumberBreakpoints(  unsigned long* Number );
	HRESULT GetBreakpointByIndex(  unsigned long Index, IDebugBreakpoint** Bp );
	HRESULT GetBreakpointById(  unsigned long Id, IDebugBreakpoint** Bp );
	HRESULT GetBreakpointParameters(  unsigned long Count, unsigned long* Ids, unsigned long Start, PDEBUG_BREAKPOINT_PARAMETERS Params );
	HRESULT AddBreakpoint(  unsigned long Type, unsigned long DesiredId, IDebugBreakpoint** Bp );
	HRESULT RemoveBreakpoint(  IDebugBreakpoint* Bp );
	HRESULT AddExtension(  const char* Path, unsigned long Flags, unsigned __int64* Handle );
	HRESULT RemoveExtension(  unsigned __int64 Handle );
	HRESULT GetExtensionByPath(  const char* Path, unsigned __int64* Handle );
	HRESULT CallExtension(  unsigned __int64 Handle, const char* Function, const char* Arguments );
	HRESULT GetExtensionFunction(  unsigned __int64 Handle, const char* FuncName, void** Function );
	HRESULT GetWindbgExtensionApis32(  PWINDBG_EXTENSION_APIS32 Api );
	HRESULT GetWindbgExtensionApis64(  PWINDBG_EXTENSION_APIS64 Api );
	HRESULT GetNumberEventFilters(  unsigned long* SpecificEvents, unsigned long* SpecificExceptions, unsigned long* ArbitraryExceptions );
	HRESULT GetEventFilterText(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT GetEventFilterCommand(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetEventFilterCommand(  unsigned long Index, const char* Command );
	HRESULT GetSpecificFilterParameters(  unsigned long Start, unsigned long Count, PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT SetSpecificFilterParameters(  unsigned long Start, unsigned long Count, PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT GetSpecificFilterArgument(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* ArgumentSize );
	HRESULT SetSpecificFilterArgument(  unsigned long Index, const char* Argument );
	HRESULT GetExceptionFilterParameters(  unsigned long Count, unsigned long* Codes, unsigned long Start, PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT SetExceptionFilterParameters(  unsigned long Count, PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT GetExceptionFilterSecondCommand(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetExceptionFilterSecondCommand(  unsigned long Index, const char* Command );
	HRESULT WaitForEvent(  unsigned long Flags, unsigned long Timeout );
	HRESULT GetLastEventInformation(  unsigned long* Type, unsigned long* ProcessId, unsigned long* ThreadId, PVOID ExtraInformation, unsigned long ExtraInformationSize, unsigned long* ExtraInformationUsed, char* Description, unsigned long DescriptionSize, unsigned long* DescriptionUsed );
	HRESULT GetCurrentTimeDate(  unsigned long* TimeDate );
	HRESULT GetCurrentSystemUpTime(  unsigned long* UpTime );
	HRESULT GetDumpFormatFlags(  unsigned long* FormatFlags );
	HRESULT GetNumberTextReplacements(  unsigned long* NumRepl );
	HRESULT GetTextReplacement(  const char* SrcText, unsigned long Index, char* SrcBuffer, unsigned long SrcBufferSize, unsigned long* SrcSize, char* DstBuffer, unsigned long DstBufferSize, unsigned long* DstSize );
	HRESULT SetTextReplacement(  const char* SrcText, const char* DstText );
	HRESULT RemoveTextReplacements(  );
	HRESULT OutputTextReplacements(  unsigned long OutputControl, unsigned long Flags );
	HRESULT GetAssemblyOptions(  unsigned long* Options );
	HRESULT AddAssemblyOptions(  unsigned long Options );
	HRESULT RemoveAssemblyOptions(  unsigned long Options );
	HRESULT SetAssemblyOptions(  unsigned long Options );
	HRESULT GetExpressionSyntax(  unsigned long* Flags );
	HRESULT SetExpressionSyntax(  unsigned long Flags );
	HRESULT SetExpressionSyntaxByName(  const char* AbbrevName );
	HRESULT GetNumberExpressionSyntaxes(  unsigned long* Number );
	HRESULT GetExpressionSyntaxNames(  unsigned long Index, char* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, char* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetNumberEvents(  unsigned long* Events );
	HRESULT GetEventIndexDescription(  unsigned long Index, unsigned long Which, char* Buffer, unsigned long BufferSize, unsigned long* DescSize );
	HRESULT GetCurrentEventIndex(  unsigned long* Index );
	HRESULT SetNextEventIndex(  unsigned long Relation, unsigned long Value, unsigned long* NextIndex );
	HRESULT GetLogFileWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* FileSize, bool* Append );
	HRESULT OpenLogFileWide(  const wchar_t* File, BOOL Append );
	HRESULT InputWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* InputSize );
	HRESULT ReturnInputWide(  const wchar_t* Buffer );
	HRESULT OutputWide(  unsigned long Mask, const wchar_t* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputVaListWide(  unsigned long Mask, const wchar_t* Format, char* Args );
	HRESULT ControlledOutputWide(  unsigned long OutputControl, unsigned long Mask, const wchar_t* Format, SAFEARRAY(VARIANT) );
	HRESULT ControlledOutputVaListWide(  unsigned long OutputControl, unsigned long Mask, const wchar_t* Format, char* Args );
	HRESULT OutputPromptWide(  unsigned long OutputControl, const wchar_t* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputPromptVaListWide(  unsigned long OutputControl, const wchar_t* Format, char* Args );
	HRESULT GetPromptTextWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT AssembleWide(  unsigned __int64 Offset, const wchar_t* Instr, unsigned __int64* EndOffset );
	HRESULT DisassembleWide(  unsigned __int64 Offset, unsigned long Flags, wchar_t* Buffer, unsigned long BufferSize, unsigned long* DisassemblySize, unsigned __int64* EndOffset );
	HRESULT GetProcessorTypeNamesWide(  unsigned long Type, wchar_t* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, wchar_t* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetTextMacroWide(  unsigned long Slot, wchar_t* Buffer, unsigned long BufferSize, unsigned long* MacroSize );
	HRESULT SetTextMacroWide(  unsigned long Slot, const wchar_t* Macro );
	HRESULT EvaluateWide(  const wchar_t* Expression, unsigned long DesiredType, PDEBUG_VALUE Value, unsigned long* RemainderIndex );
	HRESULT ExecuteWide(  unsigned long OutputControl, const wchar_t* Command, unsigned long Flags );
	HRESULT ExecuteCommandFileWide(  unsigned long OutputControl, const wchar_t* CommandFile, unsigned long Flags );
	HRESULT GetBreakpointByIndex2(  unsigned long Index, IDebugBreakpoint2** Bp );
	HRESULT GetBreakpointById2(  unsigned long Id, IDebugBreakpoint2** Bp );
	HRESULT AddBreakpoint2(  unsigned long Type, unsigned long DesiredId, IDebugBreakpoint2** Bp );
	HRESULT RemoveBreakpoint2(  IDebugBreakpoint2* Bp );
	HRESULT AddExtensionWide(  const wchar_t* Path, unsigned long Flags, unsigned __int64* Handle );
	HRESULT GetExtensionByPathWide(  const wchar_t* Path, unsigned __int64* Handle );
	HRESULT CallExtensionWide(  unsigned __int64 Handle, const wchar_t* Function, const wchar_t* Arguments );
	HRESULT GetExtensionFunctionWide(  unsigned __int64 Handle, const wchar_t* FuncName, void** Function );
	HRESULT GetEventFilterTextWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* TextSize );
	HRESULT GetEventFilterCommandWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetEventFilterCommandWide(  unsigned long Index, const wchar_t* Command );
	HRESULT GetSpecificFilterArgumentWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* ArgumentSize );
	HRESULT SetSpecificFilterArgumentWide(  unsigned long Index, const wchar_t* Argument );
	HRESULT GetExceptionFilterSecondCommandWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* CommandSize );
	HRESULT SetExceptionFilterSecondCommandWide(  unsigned long Index, const wchar_t* Command );
	HRESULT GetLastEventInformationWide(  unsigned long* Type, unsigned long* ProcessId, unsigned long* ThreadId, PVOID ExtraInformation, unsigned long ExtraInformationSize, unsigned long* ExtraInformationUsed, wchar_t* Description, unsigned long DescriptionSize, unsigned long* DescriptionUsed );
	HRESULT GetTextReplacementWide(  const wchar_t* SrcText, unsigned long Index, wchar_t* SrcBuffer, unsigned long SrcBufferSize, unsigned long* SrcSize, wchar_t* DstBuffer, unsigned long DstBufferSize, unsigned long* DstSize );
	HRESULT SetTextReplacementWide(  const wchar_t* SrcText, const wchar_t* DstText );
	HRESULT SetExpressionSyntaxByNameWide(  const wchar_t* AbbrevName );
	HRESULT GetExpressionSyntaxNamesWide(  unsigned long Index, wchar_t* FullNameBuffer, unsigned long FullNameBufferSize, unsigned long* FullNameSize, wchar_t* AbbrevNameBuffer, unsigned long AbbrevNameBufferSize, unsigned long* AbbrevNameSize );
	HRESULT GetEventIndexDescriptionWide(  unsigned long Index, unsigned long Which, wchar_t* Buffer, unsigned long BufferSize, unsigned long* DescSize );
	HRESULT GetLogFile2(  char* Buffer, unsigned long BufferSize, unsigned long* FileSize, unsigned long* Flags );
	HRESULT OpenLogFile2(  const char* File, unsigned long Flags );
	HRESULT GetLogFile2Wide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* FileSize, unsigned long* Flags );
	HRESULT OpenLogFile2Wide(  const wchar_t* File, unsigned long Flags );
	HRESULT GetSystemVersionValues(  unsigned long* PlatformId, unsigned long* Win32Major, unsigned long* Win32Minor, unsigned long* KdMajor, unsigned long* KdMinor );
	HRESULT GetSystemVersionString(  unsigned long Which, char* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetSystemVersionStringWide(  unsigned long Which, wchar_t* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetContextStackTrace(  PVOID StartContext, unsigned long StartContextSize,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, PVOID FrameContexts, unsigned long FrameContextsSize, unsigned long FrameContextsEntrySize, unsigned long* FramesFilled );
	HRESULT OutputContextStackTrace(  unsigned long OutputControl,[in] PDEBUG_STACK_FRAME Frames, unsigned long FramesSize, PVOID FrameContexts, unsigned long FrameContextsSize, unsigned long FrameContextsEntrySize, unsigned long Flags );
	HRESULT GetStoredEventInformation(  unsigned long* Type, unsigned long* ProcessId, unsigned long* ThreadId, PVOID Context, unsigned long ContextSize, unsigned long* ContextUsed, PVOID ExtraInformation, unsigned long ExtraInformationSize, unsigned long* ExtraInformationUsed );
	HRESULT GetManagedStatus(  unsigned long* Flags, unsigned long WhichString, char* String, unsigned long StringSize, unsigned long* StringNeeded );
	HRESULT GetManagedStatusWide(  unsigned long* Flags, unsigned long WhichString, wchar_t* String, unsigned long StringSize, unsigned long* StringNeeded );
	HRESULT ResetManagedStatus(  unsigned long Flags );
	HRESULT GetStackTraceEx(  unsigned __int64 FrameOffset, unsigned __int64 StackOffset, unsigned __int64 InstructionOffset, PDEBUG_STACK_FRAME_EX Frames, unsigned long FramesSize, unsigned long* FramesFilled );
	HRESULT OutputStackTraceEx(  unsigned long OutputControl, PDEBUG_STACK_FRAME_EX Frames, unsigned long FramesSize, unsigned long Flags );
	HRESULT GetContextStackTraceEx(  PVOID StartContext, unsigned long StartContextSize, PDEBUG_STACK_FRAME_EX Frames, unsigned long FramesSize, PVOID FrameContexts, unsigned long FrameContextsSize, unsigned long FrameContextsEntrySize, unsigned long* FramesFilled );
	HRESULT OutputContextStackTraceEx(  unsigned long OutputControl, PDEBUG_STACK_FRAME_EX Frames, unsigned long FramesSize, PVOID FrameContexts, unsigned long FrameContextsSize, unsigned long FrameContextsEntrySize, unsigned long Flags );
	HRESULT GetBreakpointByGuid(  LPGUID Guid, IDebugBreakpoint3** Bp );
	HRESULT GetExecutionStatusEx(  unsigned long* Status );
	HRESULT GetSynchronizationStatus(  unsigned long* SendsAttempted, unsigned long* SecondsSinceLastResponse );
	HRESULT GetDebuggeeType2(  unsigned long Flags, unsigned long* Class, unsigned long* Qualifier );
};

enum {DEBUG_DATA_SPACE_VIRTUAL       = 0};
enum {DEBUG_DATA_SPACE_PHYSICAL      = 1};
enum {DEBUG_DATA_SPACE_CONTROL       = 2};
enum {DEBUG_DATA_SPACE_IO            = 3};
enum {DEBUG_DATA_SPACE_MSR           = 4};
enum {DEBUG_DATA_SPACE_BUS_DATA      = 5};
enum {DEBUG_DATA_SPACE_DEBUGGER_DATA = 6};
enum {DEBUG_DATA_SPACE_COUNT         = 7};
enum {DEBUG_DATA_KernBase                              = 24};
enum {DEBUG_DATA_BreakpointWithStatusAddr              = 32};
enum {DEBUG_DATA_SavedContextAddr                      = 40};
enum {DEBUG_DATA_KiCallUserModeAddr                    = 56};
enum {DEBUG_DATA_KeUserCallbackDispatcherAddr          = 64};
enum {DEBUG_DATA_PsLoadedModuleListAddr                = 72};
enum {DEBUG_DATA_PsActiveProcessHeadAddr               = 80};
enum {DEBUG_DATA_PspCidTableAddr                       = 88};
enum {DEBUG_DATA_ExpSystemResourcesListAddr            = 96};
enum {DEBUG_DATA_ExpPagedPoolDescriptorAddr           = 104};
enum {DEBUG_DATA_ExpNumberOfPagedPoolsAddr            = 112};
enum {DEBUG_DATA_KeTimeIncrementAddr                  = 120};
enum {DEBUG_DATA_KeBugCheckCallbackListHeadAddr       = 128};
enum {DEBUG_DATA_KiBugcheckDataAddr                   = 136};
enum {DEBUG_DATA_IopErrorLogListHeadAddr              = 144};
enum {DEBUG_DATA_ObpRootDirectoryObjectAddr           = 152};
enum {DEBUG_DATA_ObpTypeObjectTypeAddr                = 160};
enum {DEBUG_DATA_MmSystemCacheStartAddr               = 168};
enum {DEBUG_DATA_MmSystemCacheEndAddr                 = 176};
enum {DEBUG_DATA_MmSystemCacheWsAddr                  = 184};
enum {DEBUG_DATA_MmPfnDatabaseAddr                    = 192};
enum {DEBUG_DATA_MmSystemPtesStartAddr                = 200};
enum {DEBUG_DATA_MmSystemPtesEndAddr                  = 208};
enum {DEBUG_DATA_MmSubsectionBaseAddr                 = 216};
enum {DEBUG_DATA_MmNumberOfPagingFilesAddr            = 224};
enum {DEBUG_DATA_MmLowestPhysicalPageAddr             = 232};
enum {DEBUG_DATA_MmHighestPhysicalPageAddr            = 240};
enum {DEBUG_DATA_MmNumberOfPhysicalPagesAddr          = 248};
enum {DEBUG_DATA_MmMaximumNonPagedPoolInBytesAddr     = 256};
enum {DEBUG_DATA_MmNonPagedSystemStartAddr            = 264};
enum {DEBUG_DATA_MmNonPagedPoolStartAddr              = 272};
enum {DEBUG_DATA_MmNonPagedPoolEndAddr                = 280};
enum {DEBUG_DATA_MmPagedPoolStartAddr                 = 288};
enum {DEBUG_DATA_MmPagedPoolEndAddr                   = 296};
enum {DEBUG_DATA_MmPagedPoolInformationAddr           = 304};
enum {DEBUG_DATA_MmPageSize                           = 312};
enum {DEBUG_DATA_MmSizeOfPagedPoolInBytesAddr         = 320};
enum {DEBUG_DATA_MmTotalCommitLimitAddr               = 328};
enum {DEBUG_DATA_MmTotalCommittedPagesAddr            = 336};
enum {DEBUG_DATA_MmSharedCommitAddr                   = 344};
enum {DEBUG_DATA_MmDriverCommitAddr                   = 352};
enum {DEBUG_DATA_MmProcessCommitAddr                  = 360};
enum {DEBUG_DATA_MmPagedPoolCommitAddr                = 368};
enum {DEBUG_DATA_MmExtendedCommitAddr                 = 376};
enum {DEBUG_DATA_MmZeroedPageListHeadAddr             = 384};
enum {DEBUG_DATA_MmFreePageListHeadAddr               = 392};
enum {DEBUG_DATA_MmStandbyPageListHeadAddr            = 400};
enum {DEBUG_DATA_MmModifiedPageListHeadAddr           = 408};
enum {DEBUG_DATA_MmModifiedNoWritePageListHeadAddr    = 416};
enum {DEBUG_DATA_MmAvailablePagesAddr                 = 424};
enum {DEBUG_DATA_MmResidentAvailablePagesAddr         = 432};
enum {DEBUG_DATA_PoolTrackTableAddr                   = 440};
enum {DEBUG_DATA_NonPagedPoolDescriptorAddr           = 448};
enum {DEBUG_DATA_MmHighestUserAddressAddr             = 456};
enum {DEBUG_DATA_MmSystemRangeStartAddr               = 464};
enum {DEBUG_DATA_MmUserProbeAddressAddr               = 472};
enum {DEBUG_DATA_KdPrintCircularBufferAddr            = 480};
enum {DEBUG_DATA_KdPrintCircularBufferEndAddr         = 488};
enum {DEBUG_DATA_KdPrintWritePointerAddr              = 496};
enum {DEBUG_DATA_KdPrintRolloverCountAddr             = 504};
enum {DEBUG_DATA_MmLoadedUserImageListAddr            = 512};
enum {DEBUG_DATA_NtBuildLabAddr                       = 520};
enum {DEBUG_DATA_KiNormalSystemCall                   = 528};
enum {DEBUG_DATA_KiProcessorBlockAddr                 = 536};
enum {DEBUG_DATA_MmUnloadedDriversAddr                = 544};
enum {DEBUG_DATA_MmLastUnloadedDriverAddr             = 552};
enum {DEBUG_DATA_MmTriageActionTakenAddr              = 560};
enum {DEBUG_DATA_MmSpecialPoolTagAddr                 = 568};
enum {DEBUG_DATA_KernelVerifierAddr                   = 576};
enum {DEBUG_DATA_MmVerifierDataAddr                   = 584};
enum {DEBUG_DATA_MmAllocatedNonPagedPoolAddr          = 592};
enum {DEBUG_DATA_MmPeakCommitmentAddr                 = 600};
enum {DEBUG_DATA_MmTotalCommitLimitMaximumAddr        = 608};
enum {DEBUG_DATA_CmNtCSDVersionAddr                   = 616};
enum {DEBUG_DATA_MmPhysicalMemoryBlockAddr            = 624};
enum {DEBUG_DATA_MmSessionBase                        = 632};
enum {DEBUG_DATA_MmSessionSize                        = 640};
enum {DEBUG_DATA_MmSystemParentTablePage              = 648};
enum {DEBUG_DATA_MmVirtualTranslationBase             = 656};
enum {DEBUG_DATA_OffsetKThreadNextProcessor           = 664};
enum {DEBUG_DATA_OffsetKThreadTeb                     = 666};
enum {DEBUG_DATA_OffsetKThreadKernelStack             = 668};
enum {DEBUG_DATA_OffsetKThreadInitialStack            = 670};
enum {DEBUG_DATA_OffsetKThreadApcProcess              = 672};
enum {DEBUG_DATA_OffsetKThreadState                   = 674};
enum {DEBUG_DATA_OffsetKThreadBStore                  = 676};
enum {DEBUG_DATA_OffsetKThreadBStoreLimit             = 678};
enum {DEBUG_DATA_SizeEProcess                         = 680};
enum {DEBUG_DATA_OffsetEprocessPeb                    = 682};
enum {DEBUG_DATA_OffsetEprocessParentCID              = 684};
enum {DEBUG_DATA_OffsetEprocessDirectoryTableBase     = 686};
enum {DEBUG_DATA_SizePrcb                             = 688};
enum {DEBUG_DATA_OffsetPrcbDpcRoutine                 = 690};
enum {DEBUG_DATA_OffsetPrcbCurrentThread              = 692};
enum {DEBUG_DATA_OffsetPrcbMhz                        = 694};
enum {DEBUG_DATA_OffsetPrcbCpuType                    = 696};
enum {DEBUG_DATA_OffsetPrcbVendorString               = 698};
enum {DEBUG_DATA_OffsetPrcbProcessorState             = 700};
enum {DEBUG_DATA_OffsetPrcbNumber                     = 702};
enum {DEBUG_DATA_SizeEThread                          = 704};
enum {DEBUG_DATA_KdPrintCircularBufferPtrAddr         = 712};
enum {DEBUG_DATA_KdPrintBufferSizeAddr                = 720};
enum {DEBUG_DATA_MmBadPagesDetected                   = 800};
enum {DEBUG_DATA_EtwpDebuggerData                     = 816};
enum {DEBUG_DATA_PteBase                              = 864};
enum {DEBUG_DATA_PaeEnabled                        = 100000};
enum {DEBUG_DATA_SharedUserData                    = 100008};
enum {DEBUG_DATA_ProductType                       = 100016};
enum {DEBUG_DATA_SuiteMask                         = 100024};
enum {DEBUG_DATA_DumpWriterStatus                  = 100032};
enum {DEBUG_DATA_DumpFormatVersion                 = 100040};
enum {DEBUG_DATA_DumpWriterVersion                 = 100048};
enum {DEBUG_DATA_DumpPowerState                    = 100056};
enum {DEBUG_DATA_DumpMmStorage                     = 100064};
enum {DEBUG_DATA_DumpAttributes                    = 100072};
typedef struct _DEBUG_PROCESSOR_IDENTIFICATION_ALPHA
{
    unsigned long Type;
    unsigned long Revision;
} DEBUG_PROCESSOR_IDENTIFICATION_ALPHA, *PDEBUG_PROCESSOR_IDENTIFICATION_ALPHA;
typedef struct _DEBUG_PROCESSOR_IDENTIFICATION_AMD64
{
    unsigned long Family;
    unsigned long Model;
    unsigned long Stepping;
    CHAR  VendorString[16];
} DEBUG_PROCESSOR_IDENTIFICATION_AMD64, *PDEBUG_PROCESSOR_IDENTIFICATION_AMD64;
typedef struct _DEBUG_PROCESSOR_IDENTIFICATION_IA64
{
    unsigned long Model;
    unsigned long Revision;
    unsigned long Family;
    unsigned long ArchRev;
    CHAR  VendorString[16];
} DEBUG_PROCESSOR_IDENTIFICATION_IA64, *PDEBUG_PROCESSOR_IDENTIFICATION_IA64;
typedef struct _DEBUG_PROCESSOR_IDENTIFICATION_X86
{
    unsigned long Family;
    unsigned long Model;
    unsigned long Stepping;
    CHAR  VendorString[16];
} DEBUG_PROCESSOR_IDENTIFICATION_X86, *PDEBUG_PROCESSOR_IDENTIFICATION_X86;
typedef struct _DEBUG_PROCESSOR_IDENTIFICATION_ARM
{
    unsigned long Model;
    unsigned long Revision;
    CHAR  VendorString[16];
} DEBUG_PROCESSOR_IDENTIFICATION_ARM, *PDEBUG_PROCESSOR_IDENTIFICATION_ARM;
typedef struct _DEBUG_PROCESSOR_IDENTIFICATION_ARM64
{
    unsigned long Model;
    unsigned long Revision;
    CHAR  VendorString[16];
} DEBUG_PROCESSOR_IDENTIFICATION_ARM64, *PDEBUG_PROCESSOR_IDENTIFICATION_ARM64;
enum {DEBUG_DATA_KPCR_OFFSET                          = 0};
enum {DEBUG_DATA_KPRCB_OFFSET                         = 1};
enum {DEBUG_DATA_KTHREAD_OFFSET                       = 2};
enum {DEBUG_DATA_BASE_TRANSLATION_VIRTUAL_OFFSET      = 3};
enum {DEBUG_DATA_PROCESSOR_IDENTIFICATION             = 4};
enum {DEBUG_DATA_PROCESSOR_SPEED                      = 5};
///////////////////////////////////////////////////////////
[
	object,
	uuid(88f7dfab-3ea7-4c3a-aefb-c4e8106173aa),
	helpstring("IDebugDataSpaces")
]
interface IDebugDataSpaces : IUnknown {
	HRESULT ReadVirtual(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteVirtual(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT SearchVirtual(  unsigned __int64 Offset, unsigned __int64 Length, PVOID Pattern, unsigned long PatternSize, unsigned long PatternGranularity, unsigned __int64* MatchOffset );
	HRESULT ReadVirtualUncached(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteVirtualUncached(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT ReadPointersVirtual(  unsigned long Count, unsigned __int64 Offset, unsigned __int64* Ptrs );
	HRESULT WritePointersVirtual(  unsigned long Count, unsigned __int64 Offset, unsigned __int64* Ptrs );
	HRESULT ReadPhysical(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WritePhysical(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT ReadControl(  unsigned long Processor, unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteControl(  unsigned long Processor, unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT ReadIo(  unsigned long InterfaceType, unsigned long BusNumber, unsigned long AddressSpace, unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteIo(  unsigned long InterfaceType, unsigned long BusNumber, unsigned long AddressSpace, unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT ReadMsr(  unsigned long Msr, unsigned __int64* Value );
	HRESULT WriteMsr(  unsigned long Msr, unsigned __int64 Value );
	HRESULT ReadBusData(  unsigned long BusDataType, unsigned long BusNumber, unsigned long SlotNumber, unsigned long Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteBusData(  unsigned long BusDataType, unsigned long BusNumber, unsigned long SlotNumber, unsigned long Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT CheckLowMemory(  );
	HRESULT ReadDebuggerData(  unsigned long Index,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* DataSize );
	HRESULT ReadProcessorSystemData(  unsigned long Processor, unsigned long Index,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* DataSize );
};

enum {DEBUG_HANDLE_DATA_TYPE_BASIC                 = 0};
enum {DEBUG_HANDLE_DATA_TYPE_TYPE_NAME             = 1};
enum {DEBUG_HANDLE_DATA_TYPE_OBJECT_NAME           = 2};
enum {DEBUG_HANDLE_DATA_TYPE_HANDLE_COUNT          = 3};
enum {DEBUG_HANDLE_DATA_TYPE_TYPE_NAME_WIDE        = 4};
enum {DEBUG_HANDLE_DATA_TYPE_OBJECT_NAME_WIDE      = 5};
enum {DEBUG_HANDLE_DATA_TYPE_MINI_THREAD_1         = 6};
enum {DEBUG_HANDLE_DATA_TYPE_MINI_MUTANT_1         = 7};
enum {DEBUG_HANDLE_DATA_TYPE_MINI_MUTANT_2         = 8};
enum {DEBUG_HANDLE_DATA_TYPE_PER_HANDLE_OPERATIONS = 9};
enum {DEBUG_HANDLE_DATA_TYPE_ALL_HANDLE_OPERATIONS = 10};
enum {DEBUG_HANDLE_DATA_TYPE_MINI_PROCESS_1        = 11};
enum {DEBUG_HANDLE_DATA_TYPE_MINI_PROCESS_2        = 12};
enum {DEBUG_HANDLE_DATA_TYPE_MINI_EVENT_1          = 13};
enum {DEBUG_HANDLE_DATA_TYPE_MINI_SECTION_1        = 14};
enum {DEBUG_HANDLE_DATA_TYPE_MINI_SEMAPHORE_1      = 15};
typedef struct _DEBUG_HANDLE_DATA_BASIC
{
    unsigned long TypeNameSize;
    unsigned long ObjectNameSize;
    unsigned long Attributes;
    unsigned long GrantedAccess;
    unsigned long HandleCount;
    unsigned long PointerCount;
} DEBUG_HANDLE_DATA_BASIC, *PDEBUG_HANDLE_DATA_BASIC;
///////////////////////////////////////////////////////////
[
	object,
	uuid(7a5e852f-96e9-468f-ac1b-0b3addc4a049),
	helpstring("IDebugDataSpaces2")
]
interface IDebugDataSpaces2 : IUnknown {
	HRESULT ReadVirtual(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteVirtual(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT SearchVirtual(  unsigned __int64 Offset, unsigned __int64 Length, PVOID Pattern, unsigned long PatternSize, unsigned long PatternGranularity, unsigned __int64* MatchOffset );
	HRESULT ReadVirtualUncached(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteVirtualUncached(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT ReadPointersVirtual(  unsigned long Count, unsigned __int64 Offset, unsigned __int64* Ptrs );
	HRESULT WritePointersVirtual(  unsigned long Count, unsigned __int64 Offset, unsigned __int64* Ptrs );
	HRESULT ReadPhysical(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WritePhysical(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT ReadControl(  unsigned long Processor, unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteControl(  unsigned long Processor, unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT ReadIo(  unsigned long InterfaceType, unsigned long BusNumber, unsigned long AddressSpace, unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteIo(  unsigned long InterfaceType, unsigned long BusNumber, unsigned long AddressSpace, unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT ReadMsr(  unsigned long Msr, unsigned __int64* Value );
	HRESULT WriteMsr(  unsigned long Msr, unsigned __int64 Value );
	HRESULT ReadBusData(  unsigned long BusDataType, unsigned long BusNumber, unsigned long SlotNumber, unsigned long Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteBusData(  unsigned long BusDataType, unsigned long BusNumber, unsigned long SlotNumber, unsigned long Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT CheckLowMemory(  );
	HRESULT ReadDebuggerData(  unsigned long Index,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* DataSize );
	HRESULT ReadProcessorSystemData(  unsigned long Processor, unsigned long Index,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* DataSize );
	HRESULT VirtualToPhysical(  unsigned __int64 Virtual, unsigned __int64* Physical );
	HRESULT GetVirtualTranslationPhysicalOffsets(  unsigned __int64 Virtual, unsigned __int64* Offsets, unsigned long OffsetsSize, unsigned long* Levels );
	HRESULT ReadHandleData(  unsigned __int64 Handle, unsigned long DataType,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* DataSize );
	HRESULT FillVirtual(  unsigned __int64 Start, unsigned long Size, PVOID Pattern, unsigned long PatternSize, unsigned long* Filled );
	HRESULT FillPhysical(  unsigned __int64 Start, unsigned long Size, PVOID Pattern, unsigned long PatternSize, unsigned long* Filled );
	HRESULT QueryVirtual(  unsigned __int64 Offset, PMEMORY_BASIC_INFORMATION64 Info );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(23f79d6c-8aaf-4f7c-a607-9995f5407e63),
	helpstring("IDebugDataSpaces3")
]
interface IDebugDataSpaces3 : IUnknown {
	HRESULT ReadVirtual(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteVirtual(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT SearchVirtual(  unsigned __int64 Offset, unsigned __int64 Length, PVOID Pattern, unsigned long PatternSize, unsigned long PatternGranularity, unsigned __int64* MatchOffset );
	HRESULT ReadVirtualUncached(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteVirtualUncached(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT ReadPointersVirtual(  unsigned long Count, unsigned __int64 Offset, unsigned __int64* Ptrs );
	HRESULT WritePointersVirtual(  unsigned long Count, unsigned __int64 Offset, unsigned __int64* Ptrs );
	HRESULT ReadPhysical(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WritePhysical(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT ReadControl(  unsigned long Processor, unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteControl(  unsigned long Processor, unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT ReadIo(  unsigned long InterfaceType, unsigned long BusNumber, unsigned long AddressSpace, unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteIo(  unsigned long InterfaceType, unsigned long BusNumber, unsigned long AddressSpace, unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT ReadMsr(  unsigned long Msr, unsigned __int64* Value );
	HRESULT WriteMsr(  unsigned long Msr, unsigned __int64 Value );
	HRESULT ReadBusData(  unsigned long BusDataType, unsigned long BusNumber, unsigned long SlotNumber, unsigned long Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteBusData(  unsigned long BusDataType, unsigned long BusNumber, unsigned long SlotNumber, unsigned long Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT CheckLowMemory(  );
	HRESULT ReadDebuggerData(  unsigned long Index,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* DataSize );
	HRESULT ReadProcessorSystemData(  unsigned long Processor, unsigned long Index,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* DataSize );
	HRESULT VirtualToPhysical(  unsigned __int64 Virtual, unsigned __int64* Physical );
	HRESULT GetVirtualTranslationPhysicalOffsets(  unsigned __int64 Virtual, unsigned __int64* Offsets, unsigned long OffsetsSize, unsigned long* Levels );
	HRESULT ReadHandleData(  unsigned __int64 Handle, unsigned long DataType,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* DataSize );
	HRESULT FillVirtual(  unsigned __int64 Start, unsigned long Size, PVOID Pattern, unsigned long PatternSize, unsigned long* Filled );
	HRESULT FillPhysical(  unsigned __int64 Start, unsigned long Size, PVOID Pattern, unsigned long PatternSize, unsigned long* Filled );
	HRESULT QueryVirtual(  unsigned __int64 Offset, PMEMORY_BASIC_INFORMATION64 Info );
	HRESULT ReadImageNtHeaders(  unsigned __int64 ImageBase, PIMAGE_NT_HEADERS64 Headers );
	HRESULT ReadTagged(  LPGUID Tag, unsigned long Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* TotalSize );
	HRESULT StartEnumTagged(  unsigned __int64* Handle );
	HRESULT GetNextTagged(  unsigned __int64 Handle, LPGUID Tag, unsigned long* Size );
	HRESULT EndEnumTagged(  unsigned __int64 Handle );
};

enum {DEBUG_OFFSINFO_VIRTUAL_SOURCE = 0x00000001};
enum {DEBUG_VSOURCE_INVALID              = 0x00000000};
enum {DEBUG_VSOURCE_DEBUGGEE             = 0x00000001};
enum {DEBUG_VSOURCE_MAPPED_IMAGE         = 0x00000002};
enum {DEBUG_VSOURCE_DUMP_WITHOUT_MEMINFO = 0x00000003};
enum {DEBUG_VSEARCH_DEFAULT       = 0x00000000};
enum {DEBUG_VSEARCH_WRITABLE_ONLY = 0x00000001};
enum {DEBUG_PHYSICAL_DEFAULT        = 0x00000000};
enum {DEBUG_PHYSICAL_CACHED         = 0x00000001};
enum {DEBUG_PHYSICAL_UNCACHED       = 0x00000002};
enum {DEBUG_PHYSICAL_WRITE_COMBINED = 0x00000003};
///////////////////////////////////////////////////////////
[
	object,
	uuid(d98ada1f-29e9-4ef5-a6c0-e53349883212),
	helpstring("IDebugDataSpaces4")
]
interface IDebugDataSpaces4 : IUnknown {
	HRESULT ReadVirtual(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteVirtual(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT SearchVirtual(  unsigned __int64 Offset, unsigned __int64 Length, PVOID Pattern, unsigned long PatternSize, unsigned long PatternGranularity, unsigned __int64* MatchOffset );
	HRESULT ReadVirtualUncached(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteVirtualUncached(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT ReadPointersVirtual(  unsigned long Count, unsigned __int64 Offset, unsigned __int64* Ptrs );
	HRESULT WritePointersVirtual(  unsigned long Count, unsigned __int64 Offset, unsigned __int64* Ptrs );
	HRESULT ReadPhysical(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WritePhysical(  unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT ReadControl(  unsigned long Processor, unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteControl(  unsigned long Processor, unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT ReadIo(  unsigned long InterfaceType, unsigned long BusNumber, unsigned long AddressSpace, unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteIo(  unsigned long InterfaceType, unsigned long BusNumber, unsigned long AddressSpace, unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT ReadMsr(  unsigned long Msr, unsigned __int64* Value );
	HRESULT WriteMsr(  unsigned long Msr, unsigned __int64 Value );
	HRESULT ReadBusData(  unsigned long BusDataType, unsigned long BusNumber, unsigned long SlotNumber, unsigned long Offset,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteBusData(  unsigned long BusDataType, unsigned long BusNumber, unsigned long SlotNumber, unsigned long Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT CheckLowMemory(  );
	HRESULT ReadDebuggerData(  unsigned long Index,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* DataSize );
	HRESULT ReadProcessorSystemData(  unsigned long Processor, unsigned long Index,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* DataSize );
	HRESULT VirtualToPhysical(  unsigned __int64 Virtual, unsigned __int64* Physical );
	HRESULT GetVirtualTranslationPhysicalOffsets(  unsigned __int64 Virtual, unsigned __int64* Offsets, unsigned long OffsetsSize, unsigned long* Levels );
	HRESULT ReadHandleData(  unsigned __int64 Handle, unsigned long DataType,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* DataSize );
	HRESULT FillVirtual(  unsigned __int64 Start, unsigned long Size, PVOID Pattern, unsigned long PatternSize, unsigned long* Filled );
	HRESULT FillPhysical(  unsigned __int64 Start, unsigned long Size, PVOID Pattern, unsigned long PatternSize, unsigned long* Filled );
	HRESULT QueryVirtual(  unsigned __int64 Offset, PMEMORY_BASIC_INFORMATION64 Info );
	HRESULT ReadImageNtHeaders(  unsigned __int64 ImageBase, PIMAGE_NT_HEADERS64 Headers );
	HRESULT ReadTagged(  LPGUID Tag, unsigned long Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* TotalSize );
	HRESULT StartEnumTagged(  unsigned __int64* Handle );
	HRESULT GetNextTagged(  unsigned __int64 Handle, LPGUID Tag, unsigned long* Size );
	HRESULT EndEnumTagged(  unsigned __int64 Handle );
	HRESULT GetOffsetInformation(  unsigned long Space, unsigned long Which, unsigned __int64 Offset,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* InfoSize );
	HRESULT GetNextDifferentlyValidOffsetVirtual(  unsigned __int64 Offset, unsigned __int64* NextOffset );
	HRESULT GetValidRegionVirtual(  unsigned __int64 Base, unsigned long Size, unsigned __int64* ValidBase, unsigned long* ValidSize );
	HRESULT SearchVirtual2(  unsigned __int64 Offset, unsigned __int64 Length, unsigned long Flags, PVOID Pattern, unsigned long PatternSize, unsigned long PatternGranularity, unsigned __int64* MatchOffset );
	HRESULT ReadMultiByteStringVirtual(  unsigned __int64 Offset, unsigned long MaxBytes, char* Buffer, unsigned long BufferSize, unsigned long* StringBytes );
	HRESULT ReadMultiByteStringVirtualWide(  unsigned __int64 Offset, unsigned long MaxBytes, unsigned long CodePage, wchar_t* Buffer, unsigned long BufferSize, unsigned long* StringBytes );
	HRESULT ReadUnicodeStringVirtual(  unsigned __int64 Offset, unsigned long MaxBytes, unsigned long CodePage, char* Buffer, unsigned long BufferSize, unsigned long* StringBytes );
	HRESULT ReadUnicodeStringVirtualWide(  unsigned __int64 Offset, unsigned long MaxBytes, wchar_t* Buffer, unsigned long BufferSize, unsigned long* StringBytes );
	HRESULT ReadPhysical2(  unsigned __int64 Offset, unsigned long Flags,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WritePhysical2(  unsigned __int64 Offset, unsigned long Flags,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
};

enum {DEBUG_EVENT_BREAKPOINT              = 0x00000001};
enum {DEBUG_EVENT_EXCEPTION               = 0x00000002};
enum {DEBUG_EVENT_CREATE_THREAD           = 0x00000004};
enum {DEBUG_EVENT_EXIT_THREAD             = 0x00000008};
enum {DEBUG_EVENT_CREATE_PROCESS          = 0x00000010};
enum {DEBUG_EVENT_EXIT_PROCESS            = 0x00000020};
enum {DEBUG_EVENT_LOAD_MODULE             = 0x00000040};
enum {DEBUG_EVENT_UNLOAD_MODULE           = 0x00000080};
enum {DEBUG_EVENT_SYSTEM_ERROR            = 0x00000100};
enum {DEBUG_EVENT_SESSION_STATUS          = 0x00000200};
enum {DEBUG_EVENT_CHANGE_DEBUGGEE_STATE   = 0x00000400};
enum {DEBUG_EVENT_CHANGE_ENGINE_STATE     = 0x00000800};
enum {DEBUG_EVENT_CHANGE_SYMBOL_STATE     = 0x00001000};
enum {DEBUG_EVENT_SERVICE_EXCEPTION       = 0x00002000};
enum {DEBUG_SESSION_ACTIVE                       = 0x00000000};
enum {DEBUG_SESSION_END_SESSION_ACTIVE_TERMINATE = 0x00000001};
enum {DEBUG_SESSION_END_SESSION_ACTIVE_DETACH    = 0x00000002};
enum {DEBUG_SESSION_END_SESSION_PASSIVE          = 0x00000003};
enum {DEBUG_SESSION_END                          = 0x00000004};
enum {DEBUG_SESSION_REBOOT                       = 0x00000005};
enum {DEBUG_SESSION_HIBERNATE                    = 0x00000006};
enum {DEBUG_SESSION_FAILURE                      = 0x00000007};
enum {DEBUG_CDS_ALL       = 0xffffffff};
enum {DEBUG_CDS_REGISTERS = 0x00000001};
enum {DEBUG_CDS_DATA      = 0x00000002};
enum {DEBUG_CDS_REFRESH   = 0x00000004};
enum {DEBUG_CDS_REFRESH_EVALUATE                  = 1};
enum {DEBUG_CDS_REFRESH_EXECUTE                   = 2};
enum {DEBUG_CDS_REFRESH_EXECUTECOMMANDFILE        = 3};
enum {DEBUG_CDS_REFRESH_ADDBREAKPOINT             = 4};
enum {DEBUG_CDS_REFRESH_REMOVEBREAKPOINT          = 5};
enum {DEBUG_CDS_REFRESH_WRITEVIRTUAL              = 6};
enum {DEBUG_CDS_REFRESH_WRITEVIRTUALUNCACHED      = 7};
enum {DEBUG_CDS_REFRESH_WRITEPHYSICAL             = 8};
enum {DEBUG_CDS_REFRESH_WRITEPHYSICAL2            = 9};
enum {DEBUG_CDS_REFRESH_SETVALUE                 = 10};
enum {DEBUG_CDS_REFRESH_SETVALUE2                = 11};
enum {DEBUG_CDS_REFRESH_SETSCOPE                 = 12};
enum {DEBUG_CDS_REFRESH_SETSCOPEFRAMEBYINDEX     = 13};
enum {DEBUG_CDS_REFRESH_SETSCOPEFROMJITDEBUGINFO = 14};
enum {DEBUG_CDS_REFRESH_SETSCOPEFROMSTOREDEVENT  = 15};
enum {DEBUG_CDS_REFRESH_INLINESTEP               = 16};
enum {DEBUG_CDS_REFRESH_INLINESTEP_PSEUDO        = 17};
enum {DEBUG_CES_ALL                 = 0xffffffff};
enum {DEBUG_CES_CURRENT_THREAD      = 0x00000001};
enum {DEBUG_CES_EFFECTIVE_PROCESSOR = 0x00000002};
enum {DEBUG_CES_BREAKPOINTS         = 0x00000004};
enum {DEBUG_CES_CODE_LEVEL          = 0x00000008};
enum {DEBUG_CES_EXECUTION_STATUS    = 0x00000010};
enum {DEBUG_CES_ENGINE_OPTIONS      = 0x00000020};
enum {DEBUG_CES_LOG_FILE            = 0x00000040};
enum {DEBUG_CES_RADIX               = 0x00000080};
enum {DEBUG_CES_EVENT_FILTERS       = 0x00000100};
enum {DEBUG_CES_PROCESS_OPTIONS     = 0x00000200};
enum {DEBUG_CES_EXTENSIONS          = 0x00000400};
enum {DEBUG_CES_SYSTEMS             = 0x00000800};
enum {DEBUG_CES_ASSEMBLY_OPTIONS    = 0x00001000};
enum {DEBUG_CES_EXPRESSION_SYNTAX   = 0x00002000};
enum {DEBUG_CES_TEXT_REPLACEMENTS   = 0x00004000};
enum {DEBUG_CSS_ALL            = 0xffffffff};
enum {DEBUG_CSS_LOADS          = 0x00000001};
enum {DEBUG_CSS_UNLOADS        = 0x00000002};
enum {DEBUG_CSS_SCOPE          = 0x00000004};
enum {DEBUG_CSS_PATHS          = 0x00000008};
enum {DEBUG_CSS_SYMBOL_OPTIONS = 0x00000010};
enum {DEBUG_CSS_TYPE_OPTIONS   = 0x00000020};
enum {DEBUG_CSS_COLLAPSE_CHILDREN = 0x00000040};
///////////////////////////////////////////////////////////
[
	object,
	uuid(337be28b-5036-4d72-b6bf-c45fbb9f2eaa),
	helpstring("IDebugEventCallbacks")
]
interface IDebugEventCallbacks : IUnknown {
	HRESULT GetInterestMask(  unsigned long* Mask );
	HRESULT Breakpoint(  IDebugBreakpoint* Bp );
	HRESULT Exception(  PEXCEPTION_RECORD64 Exception, unsigned long FirstChance );
	HRESULT CreateThread(  unsigned __int64 Handle, unsigned __int64 DataOffset, unsigned __int64 StartOffset );
	HRESULT ExitThread(  unsigned long ExitCode );
	HRESULT CreateProcess(  unsigned __int64 ImageFileHandle, unsigned __int64 Handle, unsigned __int64 BaseOffset, unsigned long ModuleSize, const char* ModuleName, const char* ImageName, unsigned long CheckSum, unsigned long TimeDateStamp, unsigned __int64 InitialThreadHandle, unsigned __int64 ThreadDataOffset, unsigned __int64 StartOffset );
	HRESULT ExitProcess(  unsigned long ExitCode );
	HRESULT LoadModule(  unsigned __int64 ImageFileHandle, unsigned __int64 BaseOffset, unsigned long ModuleSize, const char* ModuleName, const char* ImageName, unsigned long CheckSum, unsigned long TimeDateStamp );
	HRESULT UnloadModule(  const char* ImageBaseName, unsigned __int64 BaseOffset );
	HRESULT SystemError(  unsigned long Error, unsigned long Level );
	HRESULT SessionStatus(  unsigned long Status );
	HRESULT ChangeDebuggeeState(  unsigned long Flags, unsigned __int64 Argument );
	HRESULT ChangeEngineState(  unsigned long Flags, unsigned __int64 Argument );
	HRESULT ChangeSymbolState(  unsigned long Flags, unsigned __int64 Argument );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(0690e046-9c23-45ac-a04f-987ac29ad0d3),
	helpstring("IDebugEventCallbacksWide")
]
interface IDebugEventCallbacksWide : IUnknown {
	HRESULT GetInterestMask(  unsigned long* Mask );
	HRESULT Breakpoint(  IDebugBreakpoint2* Bp );
	HRESULT Exception(  PEXCEPTION_RECORD64 Exception, unsigned long FirstChance );
	HRESULT CreateThread(  unsigned __int64 Handle, unsigned __int64 DataOffset, unsigned __int64 StartOffset );
	HRESULT ExitThread(  unsigned long ExitCode );
	HRESULT CreateProcess(  unsigned __int64 ImageFileHandle, unsigned __int64 Handle, unsigned __int64 BaseOffset, unsigned long ModuleSize, const wchar_t* ModuleName, const wchar_t* ImageName, unsigned long CheckSum, unsigned long TimeDateStamp, unsigned __int64 InitialThreadHandle, unsigned __int64 ThreadDataOffset, unsigned __int64 StartOffset );
	HRESULT ExitProcess(  unsigned long ExitCode );
	HRESULT LoadModule(  unsigned __int64 ImageFileHandle, unsigned __int64 BaseOffset, unsigned long ModuleSize, const wchar_t* ModuleName, const wchar_t* ImageName, unsigned long CheckSum, unsigned long TimeDateStamp );
	HRESULT UnloadModule(  const wchar_t* ImageBaseName, unsigned __int64 BaseOffset );
	HRESULT SystemError(  unsigned long Error, unsigned long Level );
	HRESULT SessionStatus(  unsigned long Status );
	HRESULT ChangeDebuggeeState(  unsigned long Flags, unsigned __int64 Argument );
	HRESULT ChangeEngineState(  unsigned long Flags, unsigned __int64 Argument );
	HRESULT ChangeSymbolState(  unsigned long Flags, unsigned __int64 Argument );
};

typedef struct _DEBUG_EVENT_CONTEXT
{
    unsigned long Size;
    unsigned long ProcessEngineId;
    unsigned long ThreadEngineId;
    unsigned long FrameEngineId;
} DEBUG_EVENT_CONTEXT, *PDEBUG_EVENT_CONTEXT;
///////////////////////////////////////////////////////////
[
	object,
	uuid(61a4905b-23f9-4247-b3c5-53d087529ab7),
	helpstring("IDebugEventContextCallbacks")
]
interface IDebugEventContextCallbacks : IUnknown {
	HRESULT GetInterestMask(  unsigned long* Mask );
	HRESULT Breakpoint(  IDebugBreakpoint2* Bp, PVOID Context, unsigned long ContextSize );
	HRESULT Exception(  PEXCEPTION_RECORD64 Exception, unsigned long FirstChance, PVOID Context, unsigned long ContextSize );
	HRESULT CreateThread(  unsigned __int64 Handle, unsigned __int64 DataOffset, unsigned __int64 StartOffset, PVOID Context, unsigned long ContextSize );
	HRESULT ExitThread(  unsigned long ExitCode, PVOID Context, unsigned long ContextSize );
	HRESULT CreateProcess(  unsigned __int64 ImageFileHandle, unsigned __int64 Handle, unsigned __int64 BaseOffset, unsigned long ModuleSize, const wchar_t* ModuleName, const wchar_t* ImageName, unsigned long CheckSum, unsigned long TimeDateStamp, unsigned __int64 InitialThreadHandle, unsigned __int64 ThreadDataOffset, unsigned __int64 StartOffset, PVOID Context, unsigned long ContextSize );
	HRESULT ExitProcess(  unsigned long ExitCode, PVOID Context, unsigned long ContextSize );
	HRESULT LoadModule(  unsigned __int64 ImageFileHandle, unsigned __int64 BaseOffset, unsigned long ModuleSize, const wchar_t* ModuleName, const wchar_t* ImageName, unsigned long CheckSum, unsigned long TimeDateStamp, PVOID Context, unsigned long ContextSize );
	HRESULT UnloadModule(  const wchar_t* ImageBaseName, unsigned __int64 BaseOffset, PVOID Context, unsigned long ContextSize );
	HRESULT SystemError(  unsigned long Error, unsigned long Level, PVOID Context, unsigned long ContextSize );
	HRESULT SessionStatus(  unsigned long Status );
	HRESULT ChangeDebuggeeState(  unsigned long Flags, unsigned __int64 Argument, PVOID Context, unsigned long ContextSize );
	HRESULT ChangeEngineState(  unsigned long Flags, unsigned __int64 Argument, PVOID Context, unsigned long ContextSize );
	HRESULT ChangeSymbolState(  unsigned long Flags, unsigned __int64 Argument );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(9f50e42c-f136-499e-9a97-73036c94ed2d),
	helpstring("IDebugInputCallbacks")
]
interface IDebugInputCallbacks : IUnknown {
	HRESULT StartInput(  unsigned long BufferSize );
	HRESULT EndInput(  );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(4bf58045-d654-4c40-b0af-683090f356dc),
	helpstring("IDebugOutputCallbacks")
]
interface IDebugOutputCallbacks : IUnknown {
	HRESULT Output(  unsigned long Mask, const char* Text );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(4c7fd663-c394-4e26-8ef1-34ad5ed3764c),
	helpstring("IDebugOutputCallbacksWide")
]
interface IDebugOutputCallbacksWide : IUnknown {
	HRESULT Output(  unsigned long Mask, const wchar_t* Text );
};

enum {DEBUG_OUTCBI_EXPLICIT_FLUSH = 0x00000001};
enum {DEBUG_OUTCBI_TEXT           = 0x00000002};
enum {DEBUG_OUTCBI_DML            = 0x00000004};
enum {DEBUG_OUTCBI_ANY_FORMAT     = 0x00000006};
enum {DEBUG_OUTCB_TEXT           = 0};
enum {DEBUG_OUTCB_DML            = 1};
enum {DEBUG_OUTCB_EXPLICIT_FLUSH = 2};
enum {DEBUG_OUTCBF_COMBINED_EXPLICIT_FLUSH    = 0x00000001};
enum {DEBUG_OUTCBF_DML_HAS_TAGS               = 0x00000002};
enum {DEBUG_OUTCBF_DML_HAS_SPECIAL_CHARACTERS = 0x00000004};
///////////////////////////////////////////////////////////
[
	object,
	uuid(67721fe9-56d2-4a44-a325-2b65513ce6eb),
	helpstring("IDebugOutputCallbacks2")
]
interface IDebugOutputCallbacks2 : IUnknown {
	HRESULT Output(  unsigned long Mask, const char* Text );
	HRESULT GetInterestMask(  unsigned long* Mask );
	HRESULT Output2(  unsigned long Which, unsigned long Flags, unsigned __int64 Arg, const wchar_t* Text );
};

enum {DEBUG_REGISTERS_DEFAULT = 0x00000000};
enum {DEBUG_REGISTERS_INT32   = 0x00000001};
enum {DEBUG_REGISTERS_INT64   = 0x00000002};
enum {DEBUG_REGISTERS_FLOAT   = 0x00000004};
enum {DEBUG_REGISTERS_ALL     = 0x00000007};
enum {DEBUG_REGISTER_SUB_REGISTER = 0x00000001};
typedef struct _DEBUG_REGISTER_DESCRIPTION
{
    // DEBUG_VALUE type.
    unsigned long Type;
    unsigned long Flags;

    // If this is a subregister the full
    // registers description index is
    // given in SubregMaster.  The length, mask
    // and shift describe how the subregisters
    // bits fit into the full register.
    unsigned long SubregMaster;
    unsigned long SubregLength;
    unsigned __int64 SubregMask;
    unsigned long SubregShift;

    unsigned long Reserved0;
} DEBUG_REGISTER_DESCRIPTION, *PDEBUG_REGISTER_DESCRIPTION;
///////////////////////////////////////////////////////////
[
	object,
	uuid(ce289126-9e84-45a7-937e-67bb18691493),
	helpstring("IDebugRegisters")
]
interface IDebugRegisters : IUnknown {
	HRESULT GetNumberRegisters(  unsigned long* Number );
	HRESULT GetDescription(  unsigned long Register,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize, PDEBUG_REGISTER_DESCRIPTION Desc );
	HRESULT GetIndexByName(  const char* Name, unsigned long* Index );
	HRESULT GetValue(  unsigned long Register, PDEBUG_VALUE Value );
	HRESULT SetValue(  unsigned long Register, PDEBUG_VALUE Value );
	HRESULT GetValues(  unsigned long Count, unsigned long* Indices, unsigned long Start, PDEBUG_VALUE Values );
	HRESULT SetValues(  unsigned long Count, unsigned long* Indices, unsigned long Start, PDEBUG_VALUE Values );
	HRESULT OutputRegisters(  unsigned long OutputControl, unsigned long Flags );
	HRESULT GetInstructionOffset(  unsigned __int64* Offset );
	HRESULT GetStackOffset(  unsigned __int64* Offset );
	HRESULT GetFrameOffset(  unsigned __int64* Offset );
};

enum {DEBUG_REGSRC_DEBUGGEE = 0x00000000};
enum {DEBUG_REGSRC_EXPLICIT = 0x00000001};
enum {DEBUG_REGSRC_FRAME    = 0x00000002};
///////////////////////////////////////////////////////////
[
	object,
	uuid(1656afa9-19c6-4e3a-97e7-5dc9160cf9c4),
	helpstring("IDebugRegisters2")
]
interface IDebugRegisters2 : IUnknown {
	HRESULT GetNumberRegisters(  unsigned long* Number );
	HRESULT GetDescription(  unsigned long Register,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize, PDEBUG_REGISTER_DESCRIPTION Desc );
	HRESULT GetIndexByName(  const char* Name, unsigned long* Index );
	HRESULT GetValue(  unsigned long Register, PDEBUG_VALUE Value );
	HRESULT SetValue(  unsigned long Register, PDEBUG_VALUE Value );
	HRESULT GetValues(  unsigned long Count, unsigned long* Indices, unsigned long Start, PDEBUG_VALUE Values );
	HRESULT SetValues(  unsigned long Count, unsigned long* Indices, unsigned long Start, PDEBUG_VALUE Values );
	HRESULT OutputRegisters(  unsigned long OutputControl, unsigned long Flags );
	HRESULT GetInstructionOffset(  unsigned __int64* Offset );
	HRESULT GetStackOffset(  unsigned __int64* Offset );
	HRESULT GetFrameOffset(  unsigned __int64* Offset );
	HRESULT GetDescriptionWide(  unsigned long Register, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize, PDEBUG_REGISTER_DESCRIPTION Desc );
	HRESULT GetIndexByNameWide(  const wchar_t* Name, unsigned long* Index );
	HRESULT GetNumberPseudoRegisters(  unsigned long* Number );
	HRESULT GetPseudoDescription(  unsigned long Register,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize, unsigned __int64* TypeModule, unsigned long* TypeId );
	HRESULT GetPseudoDescriptionWide(  unsigned long Register, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize, unsigned __int64* TypeModule, unsigned long* TypeId );
	HRESULT GetPseudoIndexByName(  const char* Name, unsigned long* Index );
	HRESULT GetPseudoIndexByNameWide(  const wchar_t* Name, unsigned long* Index );
	HRESULT GetPseudoValues(  unsigned long Source, unsigned long Count, unsigned long* Indices, unsigned long Start, PDEBUG_VALUE Values );
	HRESULT SetPseudoValues(  unsigned long Source, unsigned long Count, unsigned long* Indices, unsigned long Start, PDEBUG_VALUE Values );
	HRESULT GetValues2(  unsigned long Source, unsigned long Count, unsigned long* Indices, unsigned long Start, PDEBUG_VALUE Values );
	HRESULT SetValues2(  unsigned long Source, unsigned long Count, unsigned long* Indices, unsigned long Start, PDEBUG_VALUE Values );
	HRESULT OutputRegisters2(  unsigned long OutputControl, unsigned long Source, unsigned long Flags );
	HRESULT GetInstructionOffset2(  unsigned long Source, unsigned __int64* Offset );
	HRESULT GetStackOffset2(  unsigned long Source, unsigned __int64* Offset );
	HRESULT GetFrameOffset2(  unsigned long Source, unsigned __int64* Offset );
};

enum {DEBUG_OUTPUT_SYMBOLS_DEFAULT    = 0x00000000};
enum {DEBUG_OUTPUT_SYMBOLS_NO_NAMES   = 0x00000001};
enum {DEBUG_OUTPUT_SYMBOLS_NO_OFFSETS = 0x00000002};
enum {DEBUG_OUTPUT_SYMBOLS_NO_VALUES  = 0x00000004};
enum {DEBUG_OUTPUT_SYMBOLS_NO_TYPES   = 0x00000010};
enum {DEBUG_SYMBOL_EXPANSION_LEVEL_MASK = 0x0000000f};
enum {DEBUG_SYMBOL_EXPANDED             = 0x00000010};
enum {DEBUG_SYMBOL_READ_ONLY            = 0x00000020};
enum {DEBUG_SYMBOL_IS_ARRAY             = 0x00000040};
enum {DEBUG_SYMBOL_IS_FLOAT             = 0x00000080};
enum {DEBUG_SYMBOL_IS_ARGUMENT          = 0x00000100};
enum {DEBUG_SYMBOL_IS_LOCAL             = 0x00000200};
typedef struct _DEBUG_SYMBOL_PARAMETERS
{
    unsigned __int64 Module;
    unsigned long TypeId;
    // ParentSymbol may be DEBUG_ANY_ID when unknown.
    unsigned long ParentSymbol;
    // A subelement of a symbol can be a field, such
    // as in structs, unions or classes; or an array
    // element count for arrays.
    unsigned long SubElements;
    unsigned long Flags;
    unsigned __int64 Reserved;
} DEBUG_SYMBOL_PARAMETERS, *PDEBUG_SYMBOL_PARAMETERS;
///////////////////////////////////////////////////////////
[
	object,
	uuid(f2528316-0f1a-4431-aeed-11d096e1e2ab),
	helpstring("IDebugSymbolGroup")
]
interface IDebugSymbolGroup : IUnknown {
	HRESULT GetNumberSymbols(  unsigned long* Number );
	HRESULT AddSymbol(  const char* Name, unsigned long* Index );
	HRESULT RemoveSymbolByName(  const char* Name );
	HRESULT RemoveSymbolByIndex(  unsigned long Index );
	HRESULT GetSymbolName(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* NameSize );
	HRESULT GetSymbolParameters(  unsigned long Start, unsigned long Count, PDEBUG_SYMBOL_PARAMETERS Params );
	HRESULT ExpandSymbol(  unsigned long Index, BOOL Expand );
	HRESULT OutputSymbols(  unsigned long OutputControl, unsigned long Flags, unsigned long Start, unsigned long Count );
	HRESULT WriteSymbol(  unsigned long Index, const char* Value );
	HRESULT OutputAsType(  unsigned long Index, const char* Type );
};

enum {DEBUG_SYMENT_IS_CODE      = 0x00000001};
enum {DEBUG_SYMENT_IS_DATA      = 0x00000002};
enum {DEBUG_SYMENT_IS_PARAMETER = 0x00000004};
enum {DEBUG_SYMENT_IS_LOCAL     = 0x00000008};
enum {DEBUG_SYMENT_IS_MANAGED   = 0x00000010};
enum {DEBUG_SYMENT_IS_SYNTHETIC = 0x00000020};
typedef struct _DEBUG_SYMBOL_ENTRY
{
    unsigned __int64 ModuleBase;
    unsigned __int64 Offset;
    unsigned __int64 Id;
    unsigned __int64 Arg64;
    unsigned long Size;
    unsigned long Flags;
    unsigned long TypeId;
    unsigned long NameSize;
    unsigned long Token;
    unsigned long Tag;
    unsigned long Arg32;
    unsigned long Reserved;
} DEBUG_SYMBOL_ENTRY, *PDEBUG_SYMBOL_ENTRY;
///////////////////////////////////////////////////////////
[
	object,
	uuid(6a7ccc5f-fb5e-4dcc-b41c-6c20307bccc7),
	helpstring("IDebugSymbolGroup2")
]
interface IDebugSymbolGroup2 : IUnknown {
	HRESULT GetNumberSymbols(  unsigned long* Number );
	HRESULT AddSymbol(  const char* Name, unsigned long* Index );
	HRESULT RemoveSymbolByName(  const char* Name );
	HRESULT RemoveSymbolByIndex(  unsigned long Index );
	HRESULT GetSymbolName(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* NameSize );
	HRESULT GetSymbolParameters(  unsigned long Start, unsigned long Count, PDEBUG_SYMBOL_PARAMETERS Params );
	HRESULT ExpandSymbol(  unsigned long Index, BOOL Expand );
	HRESULT OutputSymbols(  unsigned long OutputControl, unsigned long Flags, unsigned long Start, unsigned long Count );
	HRESULT WriteSymbol(  unsigned long Index, const char* Value );
	HRESULT OutputAsType(  unsigned long Index, const char* Type );
	HRESULT AddSymbolWide(  const wchar_t* Name, unsigned long* Index );
	HRESULT RemoveSymbolByNameWide(  const wchar_t* Name );
	HRESULT GetSymbolNameWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* NameSize );
	HRESULT WriteSymbolWide(  unsigned long Index, const wchar_t* Value );
	HRESULT OutputAsTypeWide(  unsigned long Index, const wchar_t* Type );
	HRESULT GetSymbolTypeName(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* NameSize );
	HRESULT GetSymbolTypeNameWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* NameSize );
	HRESULT GetSymbolSize(  unsigned long Index, unsigned long* Size );
	HRESULT GetSymbolOffset(  unsigned long Index, unsigned __int64* Offset );
	HRESULT GetSymbolRegister(  unsigned long Index, unsigned long* Register );
	HRESULT GetSymbolValueText(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* NameSize );
	HRESULT GetSymbolValueTextWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* NameSize );
	HRESULT GetSymbolEntryInformation(  unsigned long Index, PDEBUG_SYMBOL_ENTRY Entry );
};

enum {DEBUG_MODULE_LOADED            = 0x00000000};
enum {DEBUG_MODULE_UNLOADED          = 0x00000001};
enum {DEBUG_MODULE_USER_MODE         = 0x00000002};
enum {DEBUG_MODULE_EXE_MODULE        = 0x00000004};
enum {DEBUG_MODULE_EXPLICIT          = 0x00000008};
enum {DEBUG_MODULE_SECONDARY         = 0x00000010};
enum {DEBUG_MODULE_SYNTHETIC         = 0x00000020};
enum {DEBUG_MODULE_SYM_BAD_CHECKSUM  = 0x00010000};
enum {DEBUG_SYMTYPE_NONE     = 0};
enum {DEBUG_SYMTYPE_COFF     = 1};
enum {DEBUG_SYMTYPE_CODEVIEW = 2};
enum {DEBUG_SYMTYPE_PDB      = 3};
enum {DEBUG_SYMTYPE_EXPORT   = 4};
enum {DEBUG_SYMTYPE_DEFERRED = 5};
enum {DEBUG_SYMTYPE_SYM      = 6};
enum {DEBUG_SYMTYPE_DIA      = 7};
typedef struct _DEBUG_MODULE_PARAMETERS
{
    unsigned __int64 Base;
    unsigned long Size;
    unsigned long TimeDateStamp;
    unsigned long Checksum;
    unsigned long Flags;
    unsigned long SymbolType;
    unsigned long ImageNameSize;
    unsigned long ModuleNameSize;
    unsigned long LoadedImageNameSize;
    unsigned long SymbolFileNameSize;
    unsigned long MappedImageNameSize;
    unsigned __int64 Reserved[2];
} DEBUG_MODULE_PARAMETERS, *PDEBUG_MODULE_PARAMETERS;
enum {DEBUG_SCOPE_GROUP_ARGUMENTS    = 0x00000001};
enum {DEBUG_SCOPE_GROUP_LOCALS       = 0x00000002};
enum {DEBUG_SCOPE_GROUP_ALL          = 0x00000003};
enum {DEBUG_SCOPE_GROUP_BY_DATAMODEL = 0x00000004};
enum {DEBUG_OUTTYPE_DEFAULT              = 0x00000000};
enum {DEBUG_OUTTYPE_NO_INDENT            = 0x00000001};
enum {DEBUG_OUTTYPE_NO_OFFSET            = 0x00000002};
enum {DEBUG_OUTTYPE_VERBOSE              = 0x00000004};
enum {DEBUG_OUTTYPE_COMPACT_OUTPUT       = 0x00000008};
enum {DEBUG_OUTTYPE_ADDRESS_OF_FIELD     = 0x00010000};
enum {DEBUG_OUTTYPE_ADDRESS_AT_END       = 0x00020000};
enum {DEBUG_OUTTYPE_BLOCK_RECURSE        = 0x00200000};
enum {DEBUG_FIND_SOURCE_DEFAULT      = 0x00000000};
enum {DEBUG_FIND_SOURCE_FULL_PATH    = 0x00000001};
enum {DEBUG_FIND_SOURCE_BEST_MATCH   = 0x00000002};
enum {DEBUG_FIND_SOURCE_NO_SRCSRV    = 0x00000004};
enum {DEBUG_FIND_SOURCE_TOKEN_LOOKUP = 0x00000008};
enum {DEBUG_FIND_SOURCE_WITH_CHECKSUM = 0x00000010};
enum {MODULE_ORDERS_MASK       = 0xF0000000};
enum {MODULE_ORDERS_LOADTIME   = 0x10000000};
enum {MODULE_ORDERS_MODULENAME = 0x20000000};
///////////////////////////////////////////////////////////
[
	object,
	uuid(8c31e98c-983a-48a5-9016-6fe5d667a950),
	helpstring("IDebugSymbols")
]
interface IDebugSymbols : IUnknown {
	HRESULT GetSymbolOptions(  unsigned long* Options );
	HRESULT AddSymbolOptions(  unsigned long Options );
	HRESULT RemoveSymbolOptions(  unsigned long Options );
	HRESULT SetSymbolOptions(  unsigned long Options );
	HRESULT GetNameByOffset(  unsigned __int64 Offset,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetOffsetByName(  const char* Symbol, unsigned __int64* Offset );
	HRESULT GetNearNameByOffset(  unsigned __int64 Offset, LONG Delta,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetLineByOffset(  unsigned __int64 Offset, unsigned long* Line, char* FileBuffer, unsigned long FileBufferSize, unsigned long* FileSize,[in] unsigned __int64* Displacement );
	HRESULT GetOffsetByLine(  unsigned long Line, const char* File, unsigned __int64* Offset );
	HRESULT GetNumberModules(  unsigned long* Loaded, unsigned long* Unloaded );
	HRESULT GetModuleByIndex(  unsigned long Index, unsigned __int64* Base );
	HRESULT GetModuleByModuleName(  const char* Name, unsigned long StartIndex, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetModuleByOffset(  unsigned __int64 Offset, unsigned long StartIndex, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetModuleNames(  unsigned long Index, unsigned __int64 Base, char* ImageNameBuffer, unsigned long ImageNameBufferSize, unsigned long* ImageNameSize, char* ModuleNameBuffer, unsigned long ModuleNameBufferSize, unsigned long* ModuleNameSize, char* LoadedImageNameBuffer, unsigned long LoadedImageNameBufferSize, unsigned long* LoadedImageNameSize );
	HRESULT GetModuleParameters(  unsigned long Count, unsigned __int64* Bases, unsigned long Start, PDEBUG_MODULE_PARAMETERS Params );
	HRESULT GetSymbolModule(  const char* Symbol, unsigned __int64* Base );
	HRESULT GetTypeName(  unsigned __int64 Module, unsigned long TypeId,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetTypeId(  unsigned __int64 Module, const char* Name, unsigned long* TypeId );
	HRESULT GetTypeSize(  unsigned __int64 Module, unsigned long TypeId, unsigned long* Size );
	HRESULT GetFieldOffset(  unsigned __int64 Module, unsigned long TypeId, const char* Field, unsigned long* Offset );
	HRESULT GetSymbolTypeId(  const char* Symbol, unsigned long* TypeId, unsigned __int64* Module );
	HRESULT GetOffsetTypeId(  unsigned __int64 Offset, unsigned long* TypeId, unsigned __int64* Module );
	HRESULT ReadTypedDataVirtual(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteTypedDataVirtual(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT OutputTypedDataVirtual(  unsigned long OutputControl, unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId, unsigned long Flags );
	HRESULT ReadTypedDataPhysical(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteTypedDataPhysical(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT OutputTypedDataPhysical(  unsigned long OutputControl, unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId, unsigned long Flags );
	HRESULT GetScope(  unsigned __int64* InstructionOffset, PDEBUG_STACK_FRAME ScopeFrame, PVOID ScopeContext, unsigned long ScopeContextSize );
	HRESULT SetScope(  unsigned __int64 InstructionOffset, PDEBUG_STACK_FRAME ScopeFrame, PVOID ScopeContext, unsigned long ScopeContextSize );
	HRESULT ResetScope(  );
	HRESULT GetScopeSymbolGroup(  unsigned long Flags, IDebugSymbolGroup* Update, IDebugSymbolGroup** Symbols );
	HRESULT CreateSymbolGroup(  IDebugSymbolGroup** Group );
	HRESULT StartSymbolMatch(  const char* Pattern, unsigned __int64* Handle );
	HRESULT GetNextSymbolMatch(  unsigned __int64 Handle, char* Buffer, unsigned long BufferSize, unsigned long* MatchSize, unsigned __int64* Offset );
	HRESULT EndSymbolMatch(  unsigned __int64 Handle );
	HRESULT Reload(  const char* Module );
	HRESULT GetSymbolPath(  char* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT SetSymbolPath(  const char* Path );
	HRESULT AppendSymbolPath(  const char* Addition );
	HRESULT GetImagePath(  char* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT SetImagePath(  const char* Path );
	HRESULT AppendImagePath(  const char* Addition );
	HRESULT GetSourcePath(  char* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT GetSourcePathElement(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* ElementSize );
	HRESULT SetSourcePath(  const char* Path );
	HRESULT AppendSourcePath(  const char* Addition );
	HRESULT FindSourceFile(  unsigned long StartElement, const char* File, unsigned long Flags, unsigned long* FoundElement, char* Buffer, unsigned long BufferSize, unsigned long* FoundSize );
	HRESULT GetSourceFileLineOffsets(  const char* File, unsigned __int64* Buffer, unsigned long BufferLines, unsigned long* FileLines );
};

enum {DEBUG_MODNAME_IMAGE        = 0x00000000};
enum {DEBUG_MODNAME_MODULE       = 0x00000001};
enum {DEBUG_MODNAME_LOADED_IMAGE = 0x00000002};
enum {DEBUG_MODNAME_SYMBOL_FILE  = 0x00000003};
enum {DEBUG_MODNAME_MAPPED_IMAGE = 0x00000004};
enum {DEBUG_TYPEOPTS_UNICODE_DISPLAY    = 0x00000001};
enum {DEBUG_TYPEOPTS_LONGSTATUS_DISPLAY = 0x00000002};
enum {DEBUG_TYPEOPTS_FORCERADIX_OUTPUT  = 0x00000004};
enum {DEBUG_TYPEOPTS_MATCH_MAXSIZE      = 0x00000008};
///////////////////////////////////////////////////////////
[
	object,
	uuid(3a707211-afdd-4495-ad4f-56fecdf8163f),
	helpstring("IDebugSymbols2")
]
interface IDebugSymbols2 : IUnknown {
	HRESULT GetSymbolOptions(  unsigned long* Options );
	HRESULT AddSymbolOptions(  unsigned long Options );
	HRESULT RemoveSymbolOptions(  unsigned long Options );
	HRESULT SetSymbolOptions(  unsigned long Options );
	HRESULT GetNameByOffset(  unsigned __int64 Offset,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetOffsetByName(  const char* Symbol, unsigned __int64* Offset );
	HRESULT GetNearNameByOffset(  unsigned __int64 Offset, LONG Delta,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetLineByOffset(  unsigned __int64 Offset, unsigned long* Line, char* FileBuffer, unsigned long FileBufferSize, unsigned long* FileSize,[in] unsigned __int64* Displacement );
	HRESULT GetOffsetByLine(  unsigned long Line, const char* File, unsigned __int64* Offset );
	HRESULT GetNumberModules(  unsigned long* Loaded, unsigned long* Unloaded );
	HRESULT GetModuleByIndex(  unsigned long Index, unsigned __int64* Base );
	HRESULT GetModuleByModuleName(  const char* Name, unsigned long StartIndex, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetModuleByOffset(  unsigned __int64 Offset, unsigned long StartIndex, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetModuleNames(  unsigned long Index, unsigned __int64 Base, char* ImageNameBuffer, unsigned long ImageNameBufferSize, unsigned long* ImageNameSize, char* ModuleNameBuffer, unsigned long ModuleNameBufferSize, unsigned long* ModuleNameSize, char* LoadedImageNameBuffer, unsigned long LoadedImageNameBufferSize, unsigned long* LoadedImageNameSize );
	HRESULT GetModuleParameters(  unsigned long Count, unsigned __int64* Bases, unsigned long Start, PDEBUG_MODULE_PARAMETERS Params );
	HRESULT GetSymbolModule(  const char* Symbol, unsigned __int64* Base );
	HRESULT GetTypeName(  unsigned __int64 Module, unsigned long TypeId,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetTypeId(  unsigned __int64 Module, const char* Name, unsigned long* TypeId );
	HRESULT GetTypeSize(  unsigned __int64 Module, unsigned long TypeId, unsigned long* Size );
	HRESULT GetFieldOffset(  unsigned __int64 Module, unsigned long TypeId, const char* Field, unsigned long* Offset );
	HRESULT GetSymbolTypeId(  const char* Symbol, unsigned long* TypeId, unsigned __int64* Module );
	HRESULT GetOffsetTypeId(  unsigned __int64 Offset, unsigned long* TypeId, unsigned __int64* Module );
	HRESULT ReadTypedDataVirtual(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteTypedDataVirtual(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT OutputTypedDataVirtual(  unsigned long OutputControl, unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId, unsigned long Flags );
	HRESULT ReadTypedDataPhysical(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteTypedDataPhysical(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT OutputTypedDataPhysical(  unsigned long OutputControl, unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId, unsigned long Flags );
	HRESULT GetScope(  unsigned __int64* InstructionOffset, PDEBUG_STACK_FRAME ScopeFrame, PVOID ScopeContext, unsigned long ScopeContextSize );
	HRESULT SetScope(  unsigned __int64 InstructionOffset, PDEBUG_STACK_FRAME ScopeFrame, PVOID ScopeContext, unsigned long ScopeContextSize );
	HRESULT ResetScope(  );
	HRESULT GetScopeSymbolGroup(  unsigned long Flags, IDebugSymbolGroup* Update, IDebugSymbolGroup** Symbols );
	HRESULT CreateSymbolGroup(  IDebugSymbolGroup** Group );
	HRESULT StartSymbolMatch(  const char* Pattern, unsigned __int64* Handle );
	HRESULT GetNextSymbolMatch(  unsigned __int64 Handle, char* Buffer, unsigned long BufferSize, unsigned long* MatchSize, unsigned __int64* Offset );
	HRESULT EndSymbolMatch(  unsigned __int64 Handle );
	HRESULT Reload(  const char* Module );
	HRESULT GetSymbolPath(  char* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT SetSymbolPath(  const char* Path );
	HRESULT AppendSymbolPath(  const char* Addition );
	HRESULT GetImagePath(  char* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT SetImagePath(  const char* Path );
	HRESULT AppendImagePath(  const char* Addition );
	HRESULT GetSourcePath(  char* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT GetSourcePathElement(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* ElementSize );
	HRESULT SetSourcePath(  const char* Path );
	HRESULT AppendSourcePath(  const char* Addition );
	HRESULT FindSourceFile(  unsigned long StartElement, const char* File, unsigned long Flags, unsigned long* FoundElement, char* Buffer, unsigned long BufferSize, unsigned long* FoundSize );
	HRESULT GetSourceFileLineOffsets(  const char* File, unsigned __int64* Buffer, unsigned long BufferLines, unsigned long* FileLines );
	HRESULT GetModuleVersionInformation(  unsigned long Index, unsigned __int64 Base, const char* Item,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* VerInfoSize );
	HRESULT GetModuleNameString(  unsigned long Which, unsigned long Index, unsigned __int64 Base, char* Buffer, unsigned long BufferSize, unsigned long* NameSize );
	HRESULT GetConstantName(  unsigned __int64 Module, unsigned long TypeId, unsigned __int64 Value,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetFieldName(  unsigned __int64 Module, unsigned long TypeId, unsigned long FieldIndex,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetTypeOptions(  unsigned long* Options );
	HRESULT AddTypeOptions(  unsigned long Options );
	HRESULT RemoveTypeOptions(  unsigned long Options );
	HRESULT SetTypeOptions(  unsigned long Options );
};

enum {DEBUG_GETMOD_DEFAULT             = 0x00000000};
enum {DEBUG_GETMOD_NO_LOADED_MODULES   = 0x00000001};
enum {DEBUG_GETMOD_NO_UNLOADED_MODULES = 0x00000002};
enum {DEBUG_ADDSYNTHMOD_DEFAULT  = 0x00000000};
enum {DEBUG_ADDSYNTHMOD_ZEROBASE = 0x00000001};
enum {DEBUG_ADDSYNTHSYM_DEFAULT = 0x00000000};
enum {DEBUG_OUTSYM_DEFAULT            = 0x00000000};
enum {DEBUG_OUTSYM_FORCE_OFFSET       = 0x00000001};
enum {DEBUG_OUTSYM_SOURCE_LINE        = 0x00000002};
enum {DEBUG_OUTSYM_ALLOW_DISPLACEMENT = 0x00000004};
enum {DEBUG_GETFNENT_DEFAULT        = 0x00000000};
enum {DEBUG_GETFNENT_RAW_ENTRY_ONLY = 0x00000001};
typedef struct _DEBUG_MODULE_AND_ID
{
    unsigned __int64 ModuleBase;
    unsigned __int64 Id;
} DEBUG_MODULE_AND_ID, *PDEBUG_MODULE_AND_ID;
enum {DEBUG_SOURCE_IS_STATEMENT = 0x00000001};
enum {DEBUG_GSEL_DEFAULT         = 0x00000000};
enum {DEBUG_GSEL_NO_SYMBOL_LOADS = 0x00000001};
enum {DEBUG_GSEL_ALLOW_LOWER     = 0x00000002};
enum {DEBUG_GSEL_ALLOW_HIGHER    = 0x00000004};
enum {DEBUG_GSEL_NEAREST_ONLY    = 0x00000008};
enum {DEBUG_GSEL_INLINE_CALLSITE = 0x00000010};
typedef struct _DEBUG_SYMBOL_SOURCE_ENTRY
{
    unsigned __int64 ModuleBase;
    unsigned __int64 Offset;
    unsigned __int64 FileNameId;
    unsigned __int64 EngineInternal;
    unsigned long Size;
    unsigned long Flags;
    unsigned long FileNameSize;
    // Line numbers are one-based.
    // May be DEBUG_ANY_ID if unknown.
    unsigned long StartLine;
    unsigned long EndLine;
    // Column numbers are one-based byte indices.
    // May be DEBUG_ANY_ID if unknown.
    unsigned long StartColumn;
    unsigned long EndColumn;
    unsigned long Reserved;
} DEBUG_SYMBOL_SOURCE_ENTRY, *PDEBUG_SYMBOL_SOURCE_ENTRY;
///////////////////////////////////////////////////////////
[
	object,
	uuid(f02fbecc-50ac-4f36-9ad9-c975e8f32ff8),
	helpstring("IDebugSymbols3")
]
interface IDebugSymbols3 : IUnknown {
	HRESULT GetSymbolOptions(  unsigned long* Options );
	HRESULT AddSymbolOptions(  unsigned long Options );
	HRESULT RemoveSymbolOptions(  unsigned long Options );
	HRESULT SetSymbolOptions(  unsigned long Options );
	HRESULT GetNameByOffset(  unsigned __int64 Offset,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetOffsetByName(  const char* Symbol, unsigned __int64* Offset );
	HRESULT GetNearNameByOffset(  unsigned __int64 Offset, LONG Delta,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetLineByOffset(  unsigned __int64 Offset, unsigned long* Line, char* FileBuffer, unsigned long FileBufferSize, unsigned long* FileSize,[in] unsigned __int64* Displacement );
	HRESULT GetOffsetByLine(  unsigned long Line, const char* File, unsigned __int64* Offset );
	HRESULT GetNumberModules(  unsigned long* Loaded, unsigned long* Unloaded );
	HRESULT GetModuleByIndex(  unsigned long Index, unsigned __int64* Base );
	HRESULT GetModuleByModuleName(  const char* Name, unsigned long StartIndex, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetModuleByOffset(  unsigned __int64 Offset, unsigned long StartIndex, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetModuleNames(  unsigned long Index, unsigned __int64 Base, char* ImageNameBuffer, unsigned long ImageNameBufferSize, unsigned long* ImageNameSize, char* ModuleNameBuffer, unsigned long ModuleNameBufferSize, unsigned long* ModuleNameSize, char* LoadedImageNameBuffer, unsigned long LoadedImageNameBufferSize, unsigned long* LoadedImageNameSize );
	HRESULT GetModuleParameters(  unsigned long Count, unsigned __int64* Bases, unsigned long Start, PDEBUG_MODULE_PARAMETERS Params );
	HRESULT GetSymbolModule(  const char* Symbol, unsigned __int64* Base );
	HRESULT GetTypeName(  unsigned __int64 Module, unsigned long TypeId,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetTypeId(  unsigned __int64 Module, const char* Name, unsigned long* TypeId );
	HRESULT GetTypeSize(  unsigned __int64 Module, unsigned long TypeId, unsigned long* Size );
	HRESULT GetFieldOffset(  unsigned __int64 Module, unsigned long TypeId, const char* Field, unsigned long* Offset );
	HRESULT GetSymbolTypeId(  const char* Symbol, unsigned long* TypeId, unsigned __int64* Module );
	HRESULT GetOffsetTypeId(  unsigned __int64 Offset, unsigned long* TypeId, unsigned __int64* Module );
	HRESULT ReadTypedDataVirtual(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteTypedDataVirtual(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT OutputTypedDataVirtual(  unsigned long OutputControl, unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId, unsigned long Flags );
	HRESULT ReadTypedDataPhysical(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteTypedDataPhysical(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT OutputTypedDataPhysical(  unsigned long OutputControl, unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId, unsigned long Flags );
	HRESULT GetScope(  unsigned __int64* InstructionOffset, PDEBUG_STACK_FRAME ScopeFrame, PVOID ScopeContext, unsigned long ScopeContextSize );
	HRESULT SetScope(  unsigned __int64 InstructionOffset, PDEBUG_STACK_FRAME ScopeFrame, PVOID ScopeContext, unsigned long ScopeContextSize );
	HRESULT ResetScope(  );
	HRESULT GetScopeSymbolGroup(  unsigned long Flags, IDebugSymbolGroup* Update, IDebugSymbolGroup** Symbols );
	HRESULT CreateSymbolGroup(  IDebugSymbolGroup** Group );
	HRESULT StartSymbolMatch(  const char* Pattern, unsigned __int64* Handle );
	HRESULT GetNextSymbolMatch(  unsigned __int64 Handle, char* Buffer, unsigned long BufferSize, unsigned long* MatchSize, unsigned __int64* Offset );
	HRESULT EndSymbolMatch(  unsigned __int64 Handle );
	HRESULT Reload(  const char* Module );
	HRESULT GetSymbolPath(  char* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT SetSymbolPath(  const char* Path );
	HRESULT AppendSymbolPath(  const char* Addition );
	HRESULT GetImagePath(  char* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT SetImagePath(  const char* Path );
	HRESULT AppendImagePath(  const char* Addition );
	HRESULT GetSourcePath(  char* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT GetSourcePathElement(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* ElementSize );
	HRESULT SetSourcePath(  const char* Path );
	HRESULT AppendSourcePath(  const char* Addition );
	HRESULT FindSourceFile(  unsigned long StartElement, const char* File, unsigned long Flags, unsigned long* FoundElement, char* Buffer, unsigned long BufferSize, unsigned long* FoundSize );
	HRESULT GetSourceFileLineOffsets(  const char* File, unsigned __int64* Buffer, unsigned long BufferLines, unsigned long* FileLines );
	HRESULT GetModuleVersionInformation(  unsigned long Index, unsigned __int64 Base, const char* Item,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* VerInfoSize );
	HRESULT GetModuleNameString(  unsigned long Which, unsigned long Index, unsigned __int64 Base, char* Buffer, unsigned long BufferSize, unsigned long* NameSize );
	HRESULT GetConstantName(  unsigned __int64 Module, unsigned long TypeId, unsigned __int64 Value,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetFieldName(  unsigned __int64 Module, unsigned long TypeId, unsigned long FieldIndex,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetTypeOptions(  unsigned long* Options );
	HRESULT AddTypeOptions(  unsigned long Options );
	HRESULT RemoveTypeOptions(  unsigned long Options );
	HRESULT SetTypeOptions(  unsigned long Options );
	HRESULT GetNameByOffsetWide(  unsigned __int64 Offset, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetOffsetByNameWide(  const wchar_t* Symbol, unsigned __int64* Offset );
	HRESULT GetNearNameByOffsetWide(  unsigned __int64 Offset, LONG Delta, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetLineByOffsetWide(  unsigned __int64 Offset, unsigned long* Line, wchar_t* FileBuffer, unsigned long FileBufferSize, unsigned long* FileSize,[in] unsigned __int64* Displacement );
	HRESULT GetOffsetByLineWide(  unsigned long Line, const wchar_t* File, unsigned __int64* Offset );
	HRESULT GetModuleByModuleNameWide(  const wchar_t* Name, unsigned long StartIndex, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetSymbolModuleWide(  const wchar_t* Symbol, unsigned __int64* Base );
	HRESULT GetTypeNameWide(  unsigned __int64 Module, unsigned long TypeId, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetTypeIdWide(  unsigned __int64 Module, const wchar_t* Name, unsigned long* TypeId );
	HRESULT GetFieldOffsetWide(  unsigned __int64 Module, unsigned long TypeId, const wchar_t* Field, unsigned long* Offset );
	HRESULT GetSymbolTypeIdWide(  const wchar_t* Symbol, unsigned long* TypeId, unsigned __int64* Module );
	HRESULT GetScopeSymbolGroup2(  unsigned long Flags, IDebugSymbolGroup2* Update, IDebugSymbolGroup2** Symbols );
	HRESULT CreateSymbolGroup2(  IDebugSymbolGroup2** Group );
	HRESULT StartSymbolMatchWide(  const wchar_t* Pattern, unsigned __int64* Handle );
	HRESULT GetNextSymbolMatchWide(  unsigned __int64 Handle, wchar_t* Buffer, unsigned long BufferSize, unsigned long* MatchSize, unsigned __int64* Offset );
	HRESULT ReloadWide(  const wchar_t* Module );
	HRESULT GetSymbolPathWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT SetSymbolPathWide(  const wchar_t* Path );
	HRESULT AppendSymbolPathWide(  const wchar_t* Addition );
	HRESULT GetImagePathWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT SetImagePathWide(  const wchar_t* Path );
	HRESULT AppendImagePathWide(  const wchar_t* Addition );
	HRESULT GetSourcePathWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT GetSourcePathElementWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* ElementSize );
	HRESULT SetSourcePathWide(  const wchar_t* Path );
	HRESULT AppendSourcePathWide(  const wchar_t* Addition );
	HRESULT FindSourceFileWide(  unsigned long StartElement, const wchar_t* File, unsigned long Flags, unsigned long* FoundElement, wchar_t* Buffer, unsigned long BufferSize, unsigned long* FoundSize );
	HRESULT GetSourceFileLineOffsetsWide(  const wchar_t* File, unsigned __int64* Buffer, unsigned long BufferLines, unsigned long* FileLines );
	HRESULT GetModuleVersionInformationWide(  unsigned long Index, unsigned __int64 Base, const wchar_t* Item,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* VerInfoSize );
	HRESULT GetModuleNameStringWide(  unsigned long Which, unsigned long Index, unsigned __int64 Base, wchar_t* Buffer, unsigned long BufferSize, unsigned long* NameSize );
	HRESULT GetConstantNameWide(  unsigned __int64 Module, unsigned long TypeId, unsigned __int64 Value, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetFieldNameWide(  unsigned __int64 Module, unsigned long TypeId, unsigned long FieldIndex, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT IsManagedModule(  unsigned long Index, unsigned __int64 Base );
	HRESULT GetModuleByModuleName2(  const char* Name, unsigned long StartIndex, unsigned long Flags, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetModuleByModuleName2Wide(  const wchar_t* Name, unsigned long StartIndex, unsigned long Flags, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetModuleByOffset2(  unsigned __int64 Offset, unsigned long StartIndex, unsigned long Flags, unsigned long* Index, unsigned __int64* Base );
	HRESULT AddSyntheticModule(  unsigned __int64 Base, unsigned long Size, const char* ImagePath, const char* ModuleName, unsigned long Flags );
	HRESULT AddSyntheticModuleWide(  unsigned __int64 Base, unsigned long Size, const wchar_t* ImagePath, const wchar_t* ModuleName, unsigned long Flags );
	HRESULT RemoveSyntheticModule(  unsigned __int64 Base );
	HRESULT GetCurrentScopeFrameIndex(  unsigned long* Index );
	HRESULT SetScopeFrameByIndex(  unsigned long Index );
	HRESULT SetScopeFromJitDebugInfo(  unsigned long OutputControl, unsigned __int64 InfoOffset );
	HRESULT SetScopeFromStoredEvent(  );
	HRESULT OutputSymbolByOffset(  unsigned long OutputControl, unsigned long Flags, unsigned __int64 Offset );
	HRESULT GetFunctionEntryByOffset(  unsigned __int64 Offset, unsigned long Flags,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BufferNeeded );
	HRESULT GetFieldTypeAndOffset(  unsigned __int64 Module, unsigned long ContainerTypeId, const char* Field, unsigned long* FieldTypeId, unsigned long* Offset );
	HRESULT GetFieldTypeAndOffsetWide(  unsigned __int64 Module, unsigned long ContainerTypeId, const wchar_t* Field, unsigned long* FieldTypeId, unsigned long* Offset );
	HRESULT AddSyntheticSymbol(  unsigned __int64 Offset, unsigned long Size, const char* Name, unsigned long Flags, PDEBUG_MODULE_AND_ID Id );
	HRESULT AddSyntheticSymbolWide(  unsigned __int64 Offset, unsigned long Size, const wchar_t* Name, unsigned long Flags, PDEBUG_MODULE_AND_ID Id );
	HRESULT RemoveSyntheticSymbol(  PDEBUG_MODULE_AND_ID Id );
	HRESULT GetSymbolEntriesByOffset(  unsigned __int64 Offset, unsigned long Flags, PDEBUG_MODULE_AND_ID Ids,[in] unsigned __int64* Displacements, unsigned long IdsCount, unsigned long* Entries );
	HRESULT GetSymbolEntriesByName(  const char* Symbol, unsigned long Flags, PDEBUG_MODULE_AND_ID Ids, unsigned long IdsCount, unsigned long* Entries );
	HRESULT GetSymbolEntriesByNameWide(  const wchar_t* Symbol, unsigned long Flags, PDEBUG_MODULE_AND_ID Ids, unsigned long IdsCount, unsigned long* Entries );
	HRESULT GetSymbolEntryByToken(  unsigned __int64 ModuleBase, unsigned long Token, PDEBUG_MODULE_AND_ID Id );
	HRESULT GetSymbolEntryInformation(  PDEBUG_MODULE_AND_ID Id, PDEBUG_SYMBOL_ENTRY Info );
	HRESULT GetSymbolEntryString(  PDEBUG_MODULE_AND_ID Id, unsigned long Which, char* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetSymbolEntryStringWide(  PDEBUG_MODULE_AND_ID Id, unsigned long Which, wchar_t* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetSymbolEntryOffsetRegions(  PDEBUG_MODULE_AND_ID Id, unsigned long Flags, PDEBUG_OFFSET_REGION Regions, unsigned long RegionsCount, unsigned long* RegionsAvail );
	HRESULT GetSymbolEntryBySymbolEntry(  PDEBUG_MODULE_AND_ID FromId, unsigned long Flags, PDEBUG_MODULE_AND_ID ToId );
	HRESULT GetSourceEntriesByOffset(  unsigned __int64 Offset, unsigned long Flags, PDEBUG_SYMBOL_SOURCE_ENTRY Entries, unsigned long EntriesCount, unsigned long* EntriesAvail );
	HRESULT GetSourceEntriesByLine(  unsigned long Line, const char* File, unsigned long Flags, PDEBUG_SYMBOL_SOURCE_ENTRY Entries, unsigned long EntriesCount, unsigned long* EntriesAvail );
	HRESULT GetSourceEntriesByLineWide(  unsigned long Line, const wchar_t* File, unsigned long Flags, PDEBUG_SYMBOL_SOURCE_ENTRY Entries, unsigned long EntriesCount, unsigned long* EntriesAvail );
	HRESULT GetSourceEntryString(  PDEBUG_SYMBOL_SOURCE_ENTRY Entry, unsigned long Which, char* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetSourceEntryStringWide(  PDEBUG_SYMBOL_SOURCE_ENTRY Entry, unsigned long Which, wchar_t* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetSourceEntryOffsetRegions(  PDEBUG_SYMBOL_SOURCE_ENTRY Entry, unsigned long Flags, PDEBUG_OFFSET_REGION Regions, unsigned long RegionsCount, unsigned long* RegionsAvail );
	HRESULT GetSourceEntryBySourceEntry(  PDEBUG_SYMBOL_SOURCE_ENTRY FromEntry, unsigned long Flags, PDEBUG_SYMBOL_SOURCE_ENTRY ToEntry );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(e391bbd8-9d8c-4418-840b-c006592a1752),
	helpstring("IDebugSymbols4")
]
interface IDebugSymbols4 : IUnknown {
	HRESULT GetSymbolOptions(  unsigned long* Options );
	HRESULT AddSymbolOptions(  unsigned long Options );
	HRESULT RemoveSymbolOptions(  unsigned long Options );
	HRESULT SetSymbolOptions(  unsigned long Options );
	HRESULT GetNameByOffset(  unsigned __int64 Offset,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetOffsetByName(  const char* Symbol, unsigned __int64* Offset );
	HRESULT GetNearNameByOffset(  unsigned __int64 Offset, LONG Delta,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetLineByOffset(  unsigned __int64 Offset, unsigned long* Line, char* FileBuffer, unsigned long FileBufferSize, unsigned long* FileSize,[in] unsigned __int64* Displacement );
	HRESULT GetOffsetByLine(  unsigned long Line, const char* File, unsigned __int64* Offset );
	HRESULT GetNumberModules(  unsigned long* Loaded, unsigned long* Unloaded );
	HRESULT GetModuleByIndex(  unsigned long Index, unsigned __int64* Base );
	HRESULT GetModuleByModuleName(  const char* Name, unsigned long StartIndex, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetModuleByOffset(  unsigned __int64 Offset, unsigned long StartIndex, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetModuleNames(  unsigned long Index, unsigned __int64 Base, char* ImageNameBuffer, unsigned long ImageNameBufferSize, unsigned long* ImageNameSize, char* ModuleNameBuffer, unsigned long ModuleNameBufferSize, unsigned long* ModuleNameSize, char* LoadedImageNameBuffer, unsigned long LoadedImageNameBufferSize, unsigned long* LoadedImageNameSize );
	HRESULT GetModuleParameters(  unsigned long Count, unsigned __int64* Bases, unsigned long Start, PDEBUG_MODULE_PARAMETERS Params );
	HRESULT GetSymbolModule(  const char* Symbol, unsigned __int64* Base );
	HRESULT GetTypeName(  unsigned __int64 Module, unsigned long TypeId,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetTypeId(  unsigned __int64 Module, const char* Name, unsigned long* TypeId );
	HRESULT GetTypeSize(  unsigned __int64 Module, unsigned long TypeId, unsigned long* Size );
	HRESULT GetFieldOffset(  unsigned __int64 Module, unsigned long TypeId, const char* Field, unsigned long* Offset );
	HRESULT GetSymbolTypeId(  const char* Symbol, unsigned long* TypeId, unsigned __int64* Module );
	HRESULT GetOffsetTypeId(  unsigned __int64 Offset, unsigned long* TypeId, unsigned __int64* Module );
	HRESULT ReadTypedDataVirtual(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteTypedDataVirtual(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT OutputTypedDataVirtual(  unsigned long OutputControl, unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId, unsigned long Flags );
	HRESULT ReadTypedDataPhysical(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteTypedDataPhysical(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT OutputTypedDataPhysical(  unsigned long OutputControl, unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId, unsigned long Flags );
	HRESULT GetScope(  unsigned __int64* InstructionOffset, PDEBUG_STACK_FRAME ScopeFrame, PVOID ScopeContext, unsigned long ScopeContextSize );
	HRESULT SetScope(  unsigned __int64 InstructionOffset, PDEBUG_STACK_FRAME ScopeFrame, PVOID ScopeContext, unsigned long ScopeContextSize );
	HRESULT ResetScope(  );
	HRESULT GetScopeSymbolGroup(  unsigned long Flags, IDebugSymbolGroup* Update, IDebugSymbolGroup** Symbols );
	HRESULT CreateSymbolGroup(  IDebugSymbolGroup** Group );
	HRESULT StartSymbolMatch(  const char* Pattern, unsigned __int64* Handle );
	HRESULT GetNextSymbolMatch(  unsigned __int64 Handle, char* Buffer, unsigned long BufferSize, unsigned long* MatchSize, unsigned __int64* Offset );
	HRESULT EndSymbolMatch(  unsigned __int64 Handle );
	HRESULT Reload(  const char* Module );
	HRESULT GetSymbolPath(  char* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT SetSymbolPath(  const char* Path );
	HRESULT AppendSymbolPath(  const char* Addition );
	HRESULT GetImagePath(  char* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT SetImagePath(  const char* Path );
	HRESULT AppendImagePath(  const char* Addition );
	HRESULT GetSourcePath(  char* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT GetSourcePathElement(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* ElementSize );
	HRESULT SetSourcePath(  const char* Path );
	HRESULT AppendSourcePath(  const char* Addition );
	HRESULT FindSourceFile(  unsigned long StartElement, const char* File, unsigned long Flags, unsigned long* FoundElement, char* Buffer, unsigned long BufferSize, unsigned long* FoundSize );
	HRESULT GetSourceFileLineOffsets(  const char* File, unsigned __int64* Buffer, unsigned long BufferLines, unsigned long* FileLines );
	HRESULT GetModuleVersionInformation(  unsigned long Index, unsigned __int64 Base, const char* Item,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* VerInfoSize );
	HRESULT GetModuleNameString(  unsigned long Which, unsigned long Index, unsigned __int64 Base, char* Buffer, unsigned long BufferSize, unsigned long* NameSize );
	HRESULT GetConstantName(  unsigned __int64 Module, unsigned long TypeId, unsigned __int64 Value,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetFieldName(  unsigned __int64 Module, unsigned long TypeId, unsigned long FieldIndex,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetTypeOptions(  unsigned long* Options );
	HRESULT AddTypeOptions(  unsigned long Options );
	HRESULT RemoveTypeOptions(  unsigned long Options );
	HRESULT SetTypeOptions(  unsigned long Options );
	HRESULT GetNameByOffsetWide(  unsigned __int64 Offset, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetOffsetByNameWide(  const wchar_t* Symbol, unsigned __int64* Offset );
	HRESULT GetNearNameByOffsetWide(  unsigned __int64 Offset, LONG Delta, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetLineByOffsetWide(  unsigned __int64 Offset, unsigned long* Line, wchar_t* FileBuffer, unsigned long FileBufferSize, unsigned long* FileSize,[in] unsigned __int64* Displacement );
	HRESULT GetOffsetByLineWide(  unsigned long Line, const wchar_t* File, unsigned __int64* Offset );
	HRESULT GetModuleByModuleNameWide(  const wchar_t* Name, unsigned long StartIndex, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetSymbolModuleWide(  const wchar_t* Symbol, unsigned __int64* Base );
	HRESULT GetTypeNameWide(  unsigned __int64 Module, unsigned long TypeId, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetTypeIdWide(  unsigned __int64 Module, const wchar_t* Name, unsigned long* TypeId );
	HRESULT GetFieldOffsetWide(  unsigned __int64 Module, unsigned long TypeId, const wchar_t* Field, unsigned long* Offset );
	HRESULT GetSymbolTypeIdWide(  const wchar_t* Symbol, unsigned long* TypeId, unsigned __int64* Module );
	HRESULT GetScopeSymbolGroup2(  unsigned long Flags, IDebugSymbolGroup2* Update, IDebugSymbolGroup2** Symbols );
	HRESULT CreateSymbolGroup2(  IDebugSymbolGroup2** Group );
	HRESULT StartSymbolMatchWide(  const wchar_t* Pattern, unsigned __int64* Handle );
	HRESULT GetNextSymbolMatchWide(  unsigned __int64 Handle, wchar_t* Buffer, unsigned long BufferSize, unsigned long* MatchSize, unsigned __int64* Offset );
	HRESULT ReloadWide(  const wchar_t* Module );
	HRESULT GetSymbolPathWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT SetSymbolPathWide(  const wchar_t* Path );
	HRESULT AppendSymbolPathWide(  const wchar_t* Addition );
	HRESULT GetImagePathWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT SetImagePathWide(  const wchar_t* Path );
	HRESULT AppendImagePathWide(  const wchar_t* Addition );
	HRESULT GetSourcePathWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT GetSourcePathElementWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* ElementSize );
	HRESULT SetSourcePathWide(  const wchar_t* Path );
	HRESULT AppendSourcePathWide(  const wchar_t* Addition );
	HRESULT FindSourceFileWide(  unsigned long StartElement, const wchar_t* File, unsigned long Flags, unsigned long* FoundElement, wchar_t* Buffer, unsigned long BufferSize, unsigned long* FoundSize );
	HRESULT GetSourceFileLineOffsetsWide(  const wchar_t* File, unsigned __int64* Buffer, unsigned long BufferLines, unsigned long* FileLines );
	HRESULT GetModuleVersionInformationWide(  unsigned long Index, unsigned __int64 Base, const wchar_t* Item,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* VerInfoSize );
	HRESULT GetModuleNameStringWide(  unsigned long Which, unsigned long Index, unsigned __int64 Base, wchar_t* Buffer, unsigned long BufferSize, unsigned long* NameSize );
	HRESULT GetConstantNameWide(  unsigned __int64 Module, unsigned long TypeId, unsigned __int64 Value, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetFieldNameWide(  unsigned __int64 Module, unsigned long TypeId, unsigned long FieldIndex, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT IsManagedModule(  unsigned long Index, unsigned __int64 Base );
	HRESULT GetModuleByModuleName2(  const char* Name, unsigned long StartIndex, unsigned long Flags, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetModuleByModuleName2Wide(  const wchar_t* Name, unsigned long StartIndex, unsigned long Flags, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetModuleByOffset2(  unsigned __int64 Offset, unsigned long StartIndex, unsigned long Flags, unsigned long* Index, unsigned __int64* Base );
	HRESULT AddSyntheticModule(  unsigned __int64 Base, unsigned long Size, const char* ImagePath, const char* ModuleName, unsigned long Flags );
	HRESULT AddSyntheticModuleWide(  unsigned __int64 Base, unsigned long Size, const wchar_t* ImagePath, const wchar_t* ModuleName, unsigned long Flags );
	HRESULT RemoveSyntheticModule(  unsigned __int64 Base );
	HRESULT GetCurrentScopeFrameIndex(  unsigned long* Index );
	HRESULT SetScopeFrameByIndex(  unsigned long Index );
	HRESULT SetScopeFromJitDebugInfo(  unsigned long OutputControl, unsigned __int64 InfoOffset );
	HRESULT SetScopeFromStoredEvent(  );
	HRESULT OutputSymbolByOffset(  unsigned long OutputControl, unsigned long Flags, unsigned __int64 Offset );
	HRESULT GetFunctionEntryByOffset(  unsigned __int64 Offset, unsigned long Flags,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BufferNeeded );
	HRESULT GetFieldTypeAndOffset(  unsigned __int64 Module, unsigned long ContainerTypeId, const char* Field, unsigned long* FieldTypeId, unsigned long* Offset );
	HRESULT GetFieldTypeAndOffsetWide(  unsigned __int64 Module, unsigned long ContainerTypeId, const wchar_t* Field, unsigned long* FieldTypeId, unsigned long* Offset );
	HRESULT AddSyntheticSymbol(  unsigned __int64 Offset, unsigned long Size, const char* Name, unsigned long Flags, PDEBUG_MODULE_AND_ID Id );
	HRESULT AddSyntheticSymbolWide(  unsigned __int64 Offset, unsigned long Size, const wchar_t* Name, unsigned long Flags, PDEBUG_MODULE_AND_ID Id );
	HRESULT RemoveSyntheticSymbol(  PDEBUG_MODULE_AND_ID Id );
	HRESULT GetSymbolEntriesByOffset(  unsigned __int64 Offset, unsigned long Flags, PDEBUG_MODULE_AND_ID Ids,[in] unsigned __int64* Displacements, unsigned long IdsCount, unsigned long* Entries );
	HRESULT GetSymbolEntriesByName(  const char* Symbol, unsigned long Flags, PDEBUG_MODULE_AND_ID Ids, unsigned long IdsCount, unsigned long* Entries );
	HRESULT GetSymbolEntriesByNameWide(  const wchar_t* Symbol, unsigned long Flags, PDEBUG_MODULE_AND_ID Ids, unsigned long IdsCount, unsigned long* Entries );
	HRESULT GetSymbolEntryByToken(  unsigned __int64 ModuleBase, unsigned long Token, PDEBUG_MODULE_AND_ID Id );
	HRESULT GetSymbolEntryInformation(  PDEBUG_MODULE_AND_ID Id, PDEBUG_SYMBOL_ENTRY Info );
	HRESULT GetSymbolEntryString(  PDEBUG_MODULE_AND_ID Id, unsigned long Which, char* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetSymbolEntryStringWide(  PDEBUG_MODULE_AND_ID Id, unsigned long Which, wchar_t* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetSymbolEntryOffsetRegions(  PDEBUG_MODULE_AND_ID Id, unsigned long Flags, PDEBUG_OFFSET_REGION Regions, unsigned long RegionsCount, unsigned long* RegionsAvail );
	HRESULT GetSymbolEntryBySymbolEntry(  PDEBUG_MODULE_AND_ID FromId, unsigned long Flags, PDEBUG_MODULE_AND_ID ToId );
	HRESULT GetSourceEntriesByOffset(  unsigned __int64 Offset, unsigned long Flags, PDEBUG_SYMBOL_SOURCE_ENTRY Entries, unsigned long EntriesCount, unsigned long* EntriesAvail );
	HRESULT GetSourceEntriesByLine(  unsigned long Line, const char* File, unsigned long Flags, PDEBUG_SYMBOL_SOURCE_ENTRY Entries, unsigned long EntriesCount, unsigned long* EntriesAvail );
	HRESULT GetSourceEntriesByLineWide(  unsigned long Line, const wchar_t* File, unsigned long Flags, PDEBUG_SYMBOL_SOURCE_ENTRY Entries, unsigned long EntriesCount, unsigned long* EntriesAvail );
	HRESULT GetSourceEntryString(  PDEBUG_SYMBOL_SOURCE_ENTRY Entry, unsigned long Which, char* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetSourceEntryStringWide(  PDEBUG_SYMBOL_SOURCE_ENTRY Entry, unsigned long Which, wchar_t* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetSourceEntryOffsetRegions(  PDEBUG_SYMBOL_SOURCE_ENTRY Entry, unsigned long Flags, PDEBUG_OFFSET_REGION Regions, unsigned long RegionsCount, unsigned long* RegionsAvail );
	HRESULT GetSourceEntryBySourceEntry(  PDEBUG_SYMBOL_SOURCE_ENTRY FromEntry, unsigned long Flags, PDEBUG_SYMBOL_SOURCE_ENTRY ToEntry );
	HRESULT GetScopeEx(  unsigned __int64* InstructionOffset, PDEBUG_STACK_FRAME_EX ScopeFrame, PVOID ScopeContext, unsigned long ScopeContextSize );
	HRESULT SetScopeEx(  unsigned __int64 InstructionOffset, PDEBUG_STACK_FRAME_EX ScopeFrame, PVOID ScopeContext, unsigned long ScopeContextSize );
	HRESULT GetNameByInlineContext(  unsigned __int64 Offset, unsigned long InlineContext,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetNameByInlineContextWide(  unsigned __int64 Offset, unsigned long InlineContext, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetLineByInlineContext(  unsigned __int64 Offset, unsigned long InlineContext, unsigned long* Line, char* FileBuffer, unsigned long FileBufferSize, unsigned long* FileSize,[in] unsigned __int64* Displacement );
	HRESULT GetLineByInlineContextWide(  unsigned __int64 Offset, unsigned long InlineContext, unsigned long* Line, wchar_t* FileBuffer, unsigned long FileBufferSize, unsigned long* FileSize,[in] unsigned __int64* Displacement );
	HRESULT OutputSymbolByInlineContext(  unsigned long OutputControl, unsigned long Flags, unsigned __int64 Offset, unsigned long InlineContext );
};

enum {DEBUG_FRAME_DEFAULT                = 0};
enum {DEBUG_FRAME_IGNORE_INLINE = 0x00000001};
///////////////////////////////////////////////////////////
[
	object,
	uuid(c65fa83e-1e69-475e-8e0e-b5d79e9cc17e),
	helpstring("IDebugSymbols5")
]
interface IDebugSymbols5 : IUnknown {
	HRESULT GetSymbolOptions(  unsigned long* Options );
	HRESULT AddSymbolOptions(  unsigned long Options );
	HRESULT RemoveSymbolOptions(  unsigned long Options );
	HRESULT SetSymbolOptions(  unsigned long Options );
	HRESULT GetNameByOffset(  unsigned __int64 Offset,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetOffsetByName(  const char* Symbol, unsigned __int64* Offset );
	HRESULT GetNearNameByOffset(  unsigned __int64 Offset, LONG Delta,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetLineByOffset(  unsigned __int64 Offset, unsigned long* Line, char* FileBuffer, unsigned long FileBufferSize, unsigned long* FileSize,[in] unsigned __int64* Displacement );
	HRESULT GetOffsetByLine(  unsigned long Line, const char* File, unsigned __int64* Offset );
	HRESULT GetNumberModules(  unsigned long* Loaded, unsigned long* Unloaded );
	HRESULT GetModuleByIndex(  unsigned long Index, unsigned __int64* Base );
	HRESULT GetModuleByModuleName(  const char* Name, unsigned long StartIndex, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetModuleByOffset(  unsigned __int64 Offset, unsigned long StartIndex, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetModuleNames(  unsigned long Index, unsigned __int64 Base, char* ImageNameBuffer, unsigned long ImageNameBufferSize, unsigned long* ImageNameSize, char* ModuleNameBuffer, unsigned long ModuleNameBufferSize, unsigned long* ModuleNameSize, char* LoadedImageNameBuffer, unsigned long LoadedImageNameBufferSize, unsigned long* LoadedImageNameSize );
	HRESULT GetModuleParameters(  unsigned long Count, unsigned __int64* Bases, unsigned long Start, PDEBUG_MODULE_PARAMETERS Params );
	HRESULT GetSymbolModule(  const char* Symbol, unsigned __int64* Base );
	HRESULT GetTypeName(  unsigned __int64 Module, unsigned long TypeId,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetTypeId(  unsigned __int64 Module, const char* Name, unsigned long* TypeId );
	HRESULT GetTypeSize(  unsigned __int64 Module, unsigned long TypeId, unsigned long* Size );
	HRESULT GetFieldOffset(  unsigned __int64 Module, unsigned long TypeId, const char* Field, unsigned long* Offset );
	HRESULT GetSymbolTypeId(  const char* Symbol, unsigned long* TypeId, unsigned __int64* Module );
	HRESULT GetOffsetTypeId(  unsigned __int64 Offset, unsigned long* TypeId, unsigned __int64* Module );
	HRESULT ReadTypedDataVirtual(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteTypedDataVirtual(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT OutputTypedDataVirtual(  unsigned long OutputControl, unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId, unsigned long Flags );
	HRESULT ReadTypedDataPhysical(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize,[in] unsigned long* BytesRead );
	HRESULT WriteTypedDataPhysical(  unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BytesWritten );
	HRESULT OutputTypedDataPhysical(  unsigned long OutputControl, unsigned __int64 Offset, unsigned __int64 Module, unsigned long TypeId, unsigned long Flags );
	HRESULT GetScope(  unsigned __int64* InstructionOffset, PDEBUG_STACK_FRAME ScopeFrame, PVOID ScopeContext, unsigned long ScopeContextSize );
	HRESULT SetScope(  unsigned __int64 InstructionOffset, PDEBUG_STACK_FRAME ScopeFrame, PVOID ScopeContext, unsigned long ScopeContextSize );
	HRESULT ResetScope(  );
	HRESULT GetScopeSymbolGroup(  unsigned long Flags, IDebugSymbolGroup* Update, IDebugSymbolGroup** Symbols );
	HRESULT CreateSymbolGroup(  IDebugSymbolGroup** Group );
	HRESULT StartSymbolMatch(  const char* Pattern, unsigned __int64* Handle );
	HRESULT GetNextSymbolMatch(  unsigned __int64 Handle, char* Buffer, unsigned long BufferSize, unsigned long* MatchSize, unsigned __int64* Offset );
	HRESULT EndSymbolMatch(  unsigned __int64 Handle );
	HRESULT Reload(  const char* Module );
	HRESULT GetSymbolPath(  char* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT SetSymbolPath(  const char* Path );
	HRESULT AppendSymbolPath(  const char* Addition );
	HRESULT GetImagePath(  char* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT SetImagePath(  const char* Path );
	HRESULT AppendImagePath(  const char* Addition );
	HRESULT GetSourcePath(  char* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT GetSourcePathElement(  unsigned long Index, char* Buffer, unsigned long BufferSize, unsigned long* ElementSize );
	HRESULT SetSourcePath(  const char* Path );
	HRESULT AppendSourcePath(  const char* Addition );
	HRESULT FindSourceFile(  unsigned long StartElement, const char* File, unsigned long Flags, unsigned long* FoundElement, char* Buffer, unsigned long BufferSize, unsigned long* FoundSize );
	HRESULT GetSourceFileLineOffsets(  const char* File, unsigned __int64* Buffer, unsigned long BufferLines, unsigned long* FileLines );
	HRESULT GetModuleVersionInformation(  unsigned long Index, unsigned __int64 Base, const char* Item,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* VerInfoSize );
	HRESULT GetModuleNameString(  unsigned long Which, unsigned long Index, unsigned __int64 Base, char* Buffer, unsigned long BufferSize, unsigned long* NameSize );
	HRESULT GetConstantName(  unsigned __int64 Module, unsigned long TypeId, unsigned __int64 Value,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetFieldName(  unsigned __int64 Module, unsigned long TypeId, unsigned long FieldIndex,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetTypeOptions(  unsigned long* Options );
	HRESULT AddTypeOptions(  unsigned long Options );
	HRESULT RemoveTypeOptions(  unsigned long Options );
	HRESULT SetTypeOptions(  unsigned long Options );
	HRESULT GetNameByOffsetWide(  unsigned __int64 Offset, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetOffsetByNameWide(  const wchar_t* Symbol, unsigned __int64* Offset );
	HRESULT GetNearNameByOffsetWide(  unsigned __int64 Offset, LONG Delta, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetLineByOffsetWide(  unsigned __int64 Offset, unsigned long* Line, wchar_t* FileBuffer, unsigned long FileBufferSize, unsigned long* FileSize,[in] unsigned __int64* Displacement );
	HRESULT GetOffsetByLineWide(  unsigned long Line, const wchar_t* File, unsigned __int64* Offset );
	HRESULT GetModuleByModuleNameWide(  const wchar_t* Name, unsigned long StartIndex, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetSymbolModuleWide(  const wchar_t* Symbol, unsigned __int64* Base );
	HRESULT GetTypeNameWide(  unsigned __int64 Module, unsigned long TypeId, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetTypeIdWide(  unsigned __int64 Module, const wchar_t* Name, unsigned long* TypeId );
	HRESULT GetFieldOffsetWide(  unsigned __int64 Module, unsigned long TypeId, const wchar_t* Field, unsigned long* Offset );
	HRESULT GetSymbolTypeIdWide(  const wchar_t* Symbol, unsigned long* TypeId, unsigned __int64* Module );
	HRESULT GetScopeSymbolGroup2(  unsigned long Flags, IDebugSymbolGroup2* Update, IDebugSymbolGroup2** Symbols );
	HRESULT CreateSymbolGroup2(  IDebugSymbolGroup2** Group );
	HRESULT StartSymbolMatchWide(  const wchar_t* Pattern, unsigned __int64* Handle );
	HRESULT GetNextSymbolMatchWide(  unsigned __int64 Handle, wchar_t* Buffer, unsigned long BufferSize, unsigned long* MatchSize, unsigned __int64* Offset );
	HRESULT ReloadWide(  const wchar_t* Module );
	HRESULT GetSymbolPathWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT SetSymbolPathWide(  const wchar_t* Path );
	HRESULT AppendSymbolPathWide(  const wchar_t* Addition );
	HRESULT GetImagePathWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT SetImagePathWide(  const wchar_t* Path );
	HRESULT AppendImagePathWide(  const wchar_t* Addition );
	HRESULT GetSourcePathWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* PathSize );
	HRESULT GetSourcePathElementWide(  unsigned long Index, wchar_t* Buffer, unsigned long BufferSize, unsigned long* ElementSize );
	HRESULT SetSourcePathWide(  const wchar_t* Path );
	HRESULT AppendSourcePathWide(  const wchar_t* Addition );
	HRESULT FindSourceFileWide(  unsigned long StartElement, const wchar_t* File, unsigned long Flags, unsigned long* FoundElement, wchar_t* Buffer, unsigned long BufferSize, unsigned long* FoundSize );
	HRESULT GetSourceFileLineOffsetsWide(  const wchar_t* File, unsigned __int64* Buffer, unsigned long BufferLines, unsigned long* FileLines );
	HRESULT GetModuleVersionInformationWide(  unsigned long Index, unsigned __int64 Base, const wchar_t* Item,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* VerInfoSize );
	HRESULT GetModuleNameStringWide(  unsigned long Which, unsigned long Index, unsigned __int64 Base, wchar_t* Buffer, unsigned long BufferSize, unsigned long* NameSize );
	HRESULT GetConstantNameWide(  unsigned __int64 Module, unsigned long TypeId, unsigned __int64 Value, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT GetFieldNameWide(  unsigned __int64 Module, unsigned long TypeId, unsigned long FieldIndex, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize );
	HRESULT IsManagedModule(  unsigned long Index, unsigned __int64 Base );
	HRESULT GetModuleByModuleName2(  const char* Name, unsigned long StartIndex, unsigned long Flags, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetModuleByModuleName2Wide(  const wchar_t* Name, unsigned long StartIndex, unsigned long Flags, unsigned long* Index, unsigned __int64* Base );
	HRESULT GetModuleByOffset2(  unsigned __int64 Offset, unsigned long StartIndex, unsigned long Flags, unsigned long* Index, unsigned __int64* Base );
	HRESULT AddSyntheticModule(  unsigned __int64 Base, unsigned long Size, const char* ImagePath, const char* ModuleName, unsigned long Flags );
	HRESULT AddSyntheticModuleWide(  unsigned __int64 Base, unsigned long Size, const wchar_t* ImagePath, const wchar_t* ModuleName, unsigned long Flags );
	HRESULT RemoveSyntheticModule(  unsigned __int64 Base );
	HRESULT GetCurrentScopeFrameIndex(  unsigned long* Index );
	HRESULT SetScopeFrameByIndex(  unsigned long Index );
	HRESULT SetScopeFromJitDebugInfo(  unsigned long OutputControl, unsigned __int64 InfoOffset );
	HRESULT SetScopeFromStoredEvent(  );
	HRESULT OutputSymbolByOffset(  unsigned long OutputControl, unsigned long Flags, unsigned __int64 Offset );
	HRESULT GetFunctionEntryByOffset(  unsigned __int64 Offset, unsigned long Flags,[in] PVOID Buffer, unsigned long BufferSize, unsigned long* BufferNeeded );
	HRESULT GetFieldTypeAndOffset(  unsigned __int64 Module, unsigned long ContainerTypeId, const char* Field, unsigned long* FieldTypeId, unsigned long* Offset );
	HRESULT GetFieldTypeAndOffsetWide(  unsigned __int64 Module, unsigned long ContainerTypeId, const wchar_t* Field, unsigned long* FieldTypeId, unsigned long* Offset );
	HRESULT AddSyntheticSymbol(  unsigned __int64 Offset, unsigned long Size, const char* Name, unsigned long Flags, PDEBUG_MODULE_AND_ID Id );
	HRESULT AddSyntheticSymbolWide(  unsigned __int64 Offset, unsigned long Size, const wchar_t* Name, unsigned long Flags, PDEBUG_MODULE_AND_ID Id );
	HRESULT RemoveSyntheticSymbol(  PDEBUG_MODULE_AND_ID Id );
	HRESULT GetSymbolEntriesByOffset(  unsigned __int64 Offset, unsigned long Flags, PDEBUG_MODULE_AND_ID Ids,[in] unsigned __int64* Displacements, unsigned long IdsCount, unsigned long* Entries );
	HRESULT GetSymbolEntriesByName(  const char* Symbol, unsigned long Flags, PDEBUG_MODULE_AND_ID Ids, unsigned long IdsCount, unsigned long* Entries );
	HRESULT GetSymbolEntriesByNameWide(  const wchar_t* Symbol, unsigned long Flags, PDEBUG_MODULE_AND_ID Ids, unsigned long IdsCount, unsigned long* Entries );
	HRESULT GetSymbolEntryByToken(  unsigned __int64 ModuleBase, unsigned long Token, PDEBUG_MODULE_AND_ID Id );
	HRESULT GetSymbolEntryInformation(  PDEBUG_MODULE_AND_ID Id, PDEBUG_SYMBOL_ENTRY Info );
	HRESULT GetSymbolEntryString(  PDEBUG_MODULE_AND_ID Id, unsigned long Which, char* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetSymbolEntryStringWide(  PDEBUG_MODULE_AND_ID Id, unsigned long Which, wchar_t* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetSymbolEntryOffsetRegions(  PDEBUG_MODULE_AND_ID Id, unsigned long Flags, PDEBUG_OFFSET_REGION Regions, unsigned long RegionsCount, unsigned long* RegionsAvail );
	HRESULT GetSymbolEntryBySymbolEntry(  PDEBUG_MODULE_AND_ID FromId, unsigned long Flags, PDEBUG_MODULE_AND_ID ToId );
	HRESULT GetSourceEntriesByOffset(  unsigned __int64 Offset, unsigned long Flags, PDEBUG_SYMBOL_SOURCE_ENTRY Entries, unsigned long EntriesCount, unsigned long* EntriesAvail );
	HRESULT GetSourceEntriesByLine(  unsigned long Line, const char* File, unsigned long Flags, PDEBUG_SYMBOL_SOURCE_ENTRY Entries, unsigned long EntriesCount, unsigned long* EntriesAvail );
	HRESULT GetSourceEntriesByLineWide(  unsigned long Line, const wchar_t* File, unsigned long Flags, PDEBUG_SYMBOL_SOURCE_ENTRY Entries, unsigned long EntriesCount, unsigned long* EntriesAvail );
	HRESULT GetSourceEntryString(  PDEBUG_SYMBOL_SOURCE_ENTRY Entry, unsigned long Which, char* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetSourceEntryStringWide(  PDEBUG_SYMBOL_SOURCE_ENTRY Entry, unsigned long Which, wchar_t* Buffer, unsigned long BufferSize, unsigned long* StringSize );
	HRESULT GetSourceEntryOffsetRegions(  PDEBUG_SYMBOL_SOURCE_ENTRY Entry, unsigned long Flags, PDEBUG_OFFSET_REGION Regions, unsigned long RegionsCount, unsigned long* RegionsAvail );
	HRESULT GetSourceEntryBySourceEntry(  PDEBUG_SYMBOL_SOURCE_ENTRY FromEntry, unsigned long Flags, PDEBUG_SYMBOL_SOURCE_ENTRY ToEntry );
	HRESULT GetScopeEx(  unsigned __int64* InstructionOffset, PDEBUG_STACK_FRAME_EX ScopeFrame, PVOID ScopeContext, unsigned long ScopeContextSize );
	HRESULT SetScopeEx(  unsigned __int64 InstructionOffset, PDEBUG_STACK_FRAME_EX ScopeFrame, PVOID ScopeContext, unsigned long ScopeContextSize );
	HRESULT GetNameByInlineContext(  unsigned __int64 Offset, unsigned long InlineContext,[in] char* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetNameByInlineContextWide(  unsigned __int64 Offset, unsigned long InlineContext, wchar_t* NameBuffer, unsigned long NameBufferSize, unsigned long* NameSize,[in] unsigned __int64* Displacement );
	HRESULT GetLineByInlineContext(  unsigned __int64 Offset, unsigned long InlineContext, unsigned long* Line, char* FileBuffer, unsigned long FileBufferSize, unsigned long* FileSize,[in] unsigned __int64* Displacement );
	HRESULT GetLineByInlineContextWide(  unsigned __int64 Offset, unsigned long InlineContext, unsigned long* Line, wchar_t* FileBuffer, unsigned long FileBufferSize, unsigned long* FileSize,[in] unsigned __int64* Displacement );
	HRESULT OutputSymbolByInlineContext(  unsigned long OutputControl, unsigned long Flags, unsigned __int64 Offset, unsigned long InlineContext );
	HRESULT GetCurrentScopeFrameIndexEx(  unsigned long Flags, unsigned long* Index );
	HRESULT SetScopeFrameByIndexEx(  unsigned long Flags, unsigned long Index );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(6b86fe2c-2c4f-4f0c-9da2-174311acc327),
	helpstring("IDebugSystemObjects")
]
interface IDebugSystemObjects : IUnknown {
	HRESULT GetEventThread(  unsigned long* Id );
	HRESULT GetEventProcess(  unsigned long* Id );
	HRESULT GetCurrentThreadId(  unsigned long* Id );
	HRESULT SetCurrentThreadId(  unsigned long Id );
	HRESULT GetCurrentProcessId(  unsigned long* Id );
	HRESULT SetCurrentProcessId(  unsigned long Id );
	HRESULT GetNumberThreads(  unsigned long* Number );
	HRESULT GetTotalNumberThreads(  unsigned long* Total, unsigned long* LargestProcess );
	HRESULT GetThreadIdsByIndex(  unsigned long Start, unsigned long Count, unsigned long* Ids, unsigned long* SysIds );
	HRESULT GetThreadIdByProcessor(  unsigned long Processor, unsigned long* Id );
	HRESULT GetCurrentThreadDataOffset(  unsigned __int64* Offset );
	HRESULT GetThreadIdByDataOffset(  unsigned __int64 Offset, unsigned long* Id );
	HRESULT GetCurrentThreadTeb(  unsigned __int64* Offset );
	HRESULT GetThreadIdByTeb(  unsigned __int64 Offset, unsigned long* Id );
	HRESULT GetCurrentThreadSystemId(  unsigned long* SysId );
	HRESULT GetThreadIdBySystemId(  unsigned long SysId, unsigned long* Id );
	HRESULT GetCurrentThreadHandle(  unsigned __int64* Handle );
	HRESULT GetThreadIdByHandle(  unsigned __int64 Handle, unsigned long* Id );
	HRESULT GetNumberProcesses(  unsigned long* Number );
	HRESULT GetProcessIdsByIndex(  unsigned long Start, unsigned long Count, unsigned long* Ids, unsigned long* SysIds );
	HRESULT GetCurrentProcessDataOffset(  unsigned __int64* Offset );
	HRESULT GetProcessIdByDataOffset(  unsigned __int64 Offset, unsigned long* Id );
	HRESULT GetCurrentProcessPeb(  unsigned __int64* Offset );
	HRESULT GetProcessIdByPeb(  unsigned __int64 Offset, unsigned long* Id );
	HRESULT GetCurrentProcessSystemId(  unsigned long* SysId );
	HRESULT GetProcessIdBySystemId(  unsigned long SysId, unsigned long* Id );
	HRESULT GetCurrentProcessHandle(  unsigned __int64* Handle );
	HRESULT GetProcessIdByHandle(  unsigned __int64 Handle, unsigned long* Id );
	HRESULT GetCurrentProcessExecutableName(  char* Buffer, unsigned long BufferSize, unsigned long* ExeSize );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(0ae9f5ff-1852-4679-b055-494bee6407ee),
	helpstring("IDebugSystemObjects2")
]
interface IDebugSystemObjects2 : IUnknown {
	HRESULT GetEventThread(  unsigned long* Id );
	HRESULT GetEventProcess(  unsigned long* Id );
	HRESULT GetCurrentThreadId(  unsigned long* Id );
	HRESULT SetCurrentThreadId(  unsigned long Id );
	HRESULT GetCurrentProcessId(  unsigned long* Id );
	HRESULT SetCurrentProcessId(  unsigned long Id );
	HRESULT GetNumberThreads(  unsigned long* Number );
	HRESULT GetTotalNumberThreads(  unsigned long* Total, unsigned long* LargestProcess );
	HRESULT GetThreadIdsByIndex(  unsigned long Start, unsigned long Count, unsigned long* Ids, unsigned long* SysIds );
	HRESULT GetThreadIdByProcessor(  unsigned long Processor, unsigned long* Id );
	HRESULT GetCurrentThreadDataOffset(  unsigned __int64* Offset );
	HRESULT GetThreadIdByDataOffset(  unsigned __int64 Offset, unsigned long* Id );
	HRESULT GetCurrentThreadTeb(  unsigned __int64* Offset );
	HRESULT GetThreadIdByTeb(  unsigned __int64 Offset, unsigned long* Id );
	HRESULT GetCurrentThreadSystemId(  unsigned long* SysId );
	HRESULT GetThreadIdBySystemId(  unsigned long SysId, unsigned long* Id );
	HRESULT GetCurrentThreadHandle(  unsigned __int64* Handle );
	HRESULT GetThreadIdByHandle(  unsigned __int64 Handle, unsigned long* Id );
	HRESULT GetNumberProcesses(  unsigned long* Number );
	HRESULT GetProcessIdsByIndex(  unsigned long Start, unsigned long Count, unsigned long* Ids, unsigned long* SysIds );
	HRESULT GetCurrentProcessDataOffset(  unsigned __int64* Offset );
	HRESULT GetProcessIdByDataOffset(  unsigned __int64 Offset, unsigned long* Id );
	HRESULT GetCurrentProcessPeb(  unsigned __int64* Offset );
	HRESULT GetProcessIdByPeb(  unsigned __int64 Offset, unsigned long* Id );
	HRESULT GetCurrentProcessSystemId(  unsigned long* SysId );
	HRESULT GetProcessIdBySystemId(  unsigned long SysId, unsigned long* Id );
	HRESULT GetCurrentProcessHandle(  unsigned __int64* Handle );
	HRESULT GetProcessIdByHandle(  unsigned __int64 Handle, unsigned long* Id );
	HRESULT GetCurrentProcessExecutableName(  char* Buffer, unsigned long BufferSize, unsigned long* ExeSize );
	HRESULT GetCurrentProcessUpTime(  unsigned long* UpTime );
	HRESULT GetImplicitThreadDataOffset(  unsigned __int64* Offset );
	HRESULT SetImplicitThreadDataOffset(  unsigned __int64 Offset );
	HRESULT GetImplicitProcessDataOffset(  unsigned __int64* Offset );
	HRESULT SetImplicitProcessDataOffset(  unsigned __int64 Offset );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(e9676e2f-e286-4ea3-b0f9-dfe5d9fc330e),
	helpstring("IDebugSystemObjects3")
]
interface IDebugSystemObjects3 : IUnknown {
	HRESULT GetEventThread(  unsigned long* Id );
	HRESULT GetEventProcess(  unsigned long* Id );
	HRESULT GetCurrentThreadId(  unsigned long* Id );
	HRESULT SetCurrentThreadId(  unsigned long Id );
	HRESULT GetCurrentProcessId(  unsigned long* Id );
	HRESULT SetCurrentProcessId(  unsigned long Id );
	HRESULT GetNumberThreads(  unsigned long* Number );
	HRESULT GetTotalNumberThreads(  unsigned long* Total, unsigned long* LargestProcess );
	HRESULT GetThreadIdsByIndex(  unsigned long Start, unsigned long Count, unsigned long* Ids, unsigned long* SysIds );
	HRESULT GetThreadIdByProcessor(  unsigned long Processor, unsigned long* Id );
	HRESULT GetCurrentThreadDataOffset(  unsigned __int64* Offset );
	HRESULT GetThreadIdByDataOffset(  unsigned __int64 Offset, unsigned long* Id );
	HRESULT GetCurrentThreadTeb(  unsigned __int64* Offset );
	HRESULT GetThreadIdByTeb(  unsigned __int64 Offset, unsigned long* Id );
	HRESULT GetCurrentThreadSystemId(  unsigned long* SysId );
	HRESULT GetThreadIdBySystemId(  unsigned long SysId, unsigned long* Id );
	HRESULT GetCurrentThreadHandle(  unsigned __int64* Handle );
	HRESULT GetThreadIdByHandle(  unsigned __int64 Handle, unsigned long* Id );
	HRESULT GetNumberProcesses(  unsigned long* Number );
	HRESULT GetProcessIdsByIndex(  unsigned long Start, unsigned long Count, unsigned long* Ids, unsigned long* SysIds );
	HRESULT GetCurrentProcessDataOffset(  unsigned __int64* Offset );
	HRESULT GetProcessIdByDataOffset(  unsigned __int64 Offset, unsigned long* Id );
	HRESULT GetCurrentProcessPeb(  unsigned __int64* Offset );
	HRESULT GetProcessIdByPeb(  unsigned __int64 Offset, unsigned long* Id );
	HRESULT GetCurrentProcessSystemId(  unsigned long* SysId );
	HRESULT GetProcessIdBySystemId(  unsigned long SysId, unsigned long* Id );
	HRESULT GetCurrentProcessHandle(  unsigned __int64* Handle );
	HRESULT GetProcessIdByHandle(  unsigned __int64 Handle, unsigned long* Id );
	HRESULT GetCurrentProcessExecutableName(  char* Buffer, unsigned long BufferSize, unsigned long* ExeSize );
	HRESULT GetCurrentProcessUpTime(  unsigned long* UpTime );
	HRESULT GetImplicitThreadDataOffset(  unsigned __int64* Offset );
	HRESULT SetImplicitThreadDataOffset(  unsigned __int64 Offset );
	HRESULT GetImplicitProcessDataOffset(  unsigned __int64* Offset );
	HRESULT SetImplicitProcessDataOffset(  unsigned __int64 Offset );
	HRESULT GetEventSystem(  unsigned long* Id );
	HRESULT GetCurrentSystemId(  unsigned long* Id );
	HRESULT SetCurrentSystemId(  unsigned long Id );
	HRESULT GetNumberSystems(  unsigned long* Number );
	HRESULT GetSystemIdsByIndex(  unsigned long Start, unsigned long Count, unsigned long* Ids );
	HRESULT GetTotalNumberThreadsAndProcesses(  unsigned long* TotalThreads, unsigned long* TotalProcesses, unsigned long* LargestProcessThreads, unsigned long* LargestSystemThreads, unsigned long* LargestSystemProcesses );
	HRESULT GetCurrentSystemServer(  unsigned __int64* Server );
	HRESULT GetSystemByServer(  unsigned __int64 Server, unsigned long* Id );
	HRESULT GetCurrentSystemServerName(  char* Buffer, unsigned long BufferSize, unsigned long* NameSize );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(489468e6-7d0f-4af5-87ab-25207454d553),
	helpstring("IDebugSystemObjects4")
]
interface IDebugSystemObjects4 : IUnknown {
	HRESULT GetEventThread(  unsigned long* Id );
	HRESULT GetEventProcess(  unsigned long* Id );
	HRESULT GetCurrentThreadId(  unsigned long* Id );
	HRESULT SetCurrentThreadId(  unsigned long Id );
	HRESULT GetCurrentProcessId(  unsigned long* Id );
	HRESULT SetCurrentProcessId(  unsigned long Id );
	HRESULT GetNumberThreads(  unsigned long* Number );
	HRESULT GetTotalNumberThreads(  unsigned long* Total, unsigned long* LargestProcess );
	HRESULT GetThreadIdsByIndex(  unsigned long Start, unsigned long Count, unsigned long* Ids, unsigned long* SysIds );
	HRESULT GetThreadIdByProcessor(  unsigned long Processor, unsigned long* Id );
	HRESULT GetCurrentThreadDataOffset(  unsigned __int64* Offset );
	HRESULT GetThreadIdByDataOffset(  unsigned __int64 Offset, unsigned long* Id );
	HRESULT GetCurrentThreadTeb(  unsigned __int64* Offset );
	HRESULT GetThreadIdByTeb(  unsigned __int64 Offset, unsigned long* Id );
	HRESULT GetCurrentThreadSystemId(  unsigned long* SysId );
	HRESULT GetThreadIdBySystemId(  unsigned long SysId, unsigned long* Id );
	HRESULT GetCurrentThreadHandle(  unsigned __int64* Handle );
	HRESULT GetThreadIdByHandle(  unsigned __int64 Handle, unsigned long* Id );
	HRESULT GetNumberProcesses(  unsigned long* Number );
	HRESULT GetProcessIdsByIndex(  unsigned long Start, unsigned long Count, unsigned long* Ids, unsigned long* SysIds );
	HRESULT GetCurrentProcessDataOffset(  unsigned __int64* Offset );
	HRESULT GetProcessIdByDataOffset(  unsigned __int64 Offset, unsigned long* Id );
	HRESULT GetCurrentProcessPeb(  unsigned __int64* Offset );
	HRESULT GetProcessIdByPeb(  unsigned __int64 Offset, unsigned long* Id );
	HRESULT GetCurrentProcessSystemId(  unsigned long* SysId );
	HRESULT GetProcessIdBySystemId(  unsigned long SysId, unsigned long* Id );
	HRESULT GetCurrentProcessHandle(  unsigned __int64* Handle );
	HRESULT GetProcessIdByHandle(  unsigned __int64 Handle, unsigned long* Id );
	HRESULT GetCurrentProcessExecutableName(  char* Buffer, unsigned long BufferSize, unsigned long* ExeSize );
	HRESULT GetCurrentProcessUpTime(  unsigned long* UpTime );
	HRESULT GetImplicitThreadDataOffset(  unsigned __int64* Offset );
	HRESULT SetImplicitThreadDataOffset(  unsigned __int64 Offset );
	HRESULT GetImplicitProcessDataOffset(  unsigned __int64* Offset );
	HRESULT SetImplicitProcessDataOffset(  unsigned __int64 Offset );
	HRESULT GetEventSystem(  unsigned long* Id );
	HRESULT GetCurrentSystemId(  unsigned long* Id );
	HRESULT SetCurrentSystemId(  unsigned long Id );
	HRESULT GetNumberSystems(  unsigned long* Number );
	HRESULT GetSystemIdsByIndex(  unsigned long Start, unsigned long Count, unsigned long* Ids );
	HRESULT GetTotalNumberThreadsAndProcesses(  unsigned long* TotalThreads, unsigned long* TotalProcesses, unsigned long* LargestProcessThreads, unsigned long* LargestSystemThreads, unsigned long* LargestSystemProcesses );
	HRESULT GetCurrentSystemServer(  unsigned __int64* Server );
	HRESULT GetSystemByServer(  unsigned __int64 Server, unsigned long* Id );
	HRESULT GetCurrentSystemServerName(  char* Buffer, unsigned long BufferSize, unsigned long* NameSize );
	HRESULT GetCurrentProcessExecutableNameWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* ExeSize );
	HRESULT GetCurrentSystemServerNameWide(  wchar_t* Buffer, unsigned long BufferSize, unsigned long* NameSize );
};

enum {DEBUG_COMMAND_EXCEPTION_ID = 0xdbe00dbe};
enum {DEBUG_CMDEX_INVALID             = 0x00000000};
enum {DEBUG_CMDEX_ADD_EVENT_STRING    = 0x00000001};
enum {DEBUG_CMDEX_RESET_EVENT_STRINGS = 0x00000002};
enum {DEBUG_EXTINIT_HAS_COMMAND_HELP = 0x00000001};
enum {DEBUG_NOTIFY_SESSION_ACTIVE       = 0x00000000};
enum {DEBUG_NOTIFY_SESSION_INACTIVE     = 0x00000001};
enum {DEBUG_NOTIFY_SESSION_ACCESSIBLE   = 0x00000002};
enum {DEBUG_NOTIFY_SESSION_INACCESSIBLE = 0x00000003};
enum {DEBUG_KNOWN_STRUCT_GET_NAMES              = 1};
enum {DEBUG_KNOWN_STRUCT_GET_SINGLE_LINE_OUTPUT = 2};
enum {DEBUG_KNOWN_STRUCT_SUPPRESS_TYPE_NAME     = 3};
enum {DEBUG_EXT_QVALUE_DEFAULT = 0x00000000};
enum {DEBUG_EXT_PVALUE_DEFAULT = 0x00000000};
enum {DEBUG_EXT_PVTYPE_IS_VALUE   = 0x00000000};
enum {DEBUG_EXT_PVTYPE_IS_POINTER = 0x00000001};
